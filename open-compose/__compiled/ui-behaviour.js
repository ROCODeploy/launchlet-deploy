var Main = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var main = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKInternationalDefaultIdentifier () {
    			return 'i18n';
    		},

    		OLSKInternationalIsTranslationFileBasename (inputData) {
    			if (typeof inputData !== 'string') {
    				return false;
    			}

    			if (!inputData.split('.').pop().match(/ya?ml/i)) {
    				return false;
    			}

    			if (inputData.split('.').shift() !== mod.OLSKInternationalDefaultIdentifier()) {
    				return false;
    			}

    			if (!mod._OLSKInternationalLanguageID(inputData)) {
    				return false;
    			}

    			return true;
    		},

    		OLSKInternationalLanguageID (inputData) {
    			if (!mod.OLSKInternationalIsTranslationFileBasename(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return mod._OLSKInternationalLanguageID(inputData);
    		},

    		OLSKInternationalSimplifiedLanguageCode (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.split('-').shift();
    		},

    		_OLSKInternationalLanguageID (inputData) {
    			var elements = inputData.split('.');

    			elements.pop();
    			elements.shift();

    			return elements.pop();
    		},

    		OLSKInternationalLocalizedString (translationKey, translationDictionary) {
    			if (typeof translationDictionary !== 'object' || translationDictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var localizedString = translationDictionary[translationKey];

    			if (!localizedString) {
    				localizedString = 'TRANSLATION_MISSING';
    				console.log([
    					localizedString,
    					translationKey,
    					]);
    			}

    			return localizedString;
    		},

    		OLSKInternationalLocalizedStringCallback (dictionary, fallbackLocales) {
    			if (typeof dictionary !== 'object' || dictionary === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!Array.isArray(fallbackLocales)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _locales = Object.keys(dictionary).reverse().concat(...fallbackLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse());

    			return function (signature, requestLocales) {
    				if (!Array.isArray(requestLocales)) {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				let locales = _locales.concat(...requestLocales.map(function (e) {
    					return [mod.OLSKInternationalSimplifiedLanguageCode(e), e]
    				}).reverse(), []);

    				let outputData;

    				while (!outputData && locales.length) {
    					outputData = (dictionary[locales.pop()] || {})[signature];
    				}

    				if (!outputData) {
    					console.log([outputData = 'TRANSLATION_MISSING', signature].join(' '));
    				}

    				return outputData;				
    			};
    		},

    		_OLSKInternationalPaths (cwd, filter) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return _require().sync(`**/*${ mod.OLSKInternationalDefaultIdentifier() }*.y*(a)ml`, {
    				cwd,
    				realpath: true,
    			}).filter(function (e) {
    				if (!filter) {
    					return true;
    				}

    				return !e.match(filter);
    			}).filter(function (e) {
    				return mod.OLSKInternationalIsTranslationFileBasename(_require().basename(e));
    			});
    		},

    		_OLSKInternationalConstructedDictionary (inputData) {
    			if (!Array.isArray(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			return inputData.reduce(function (coll, item) {
    				const key = mod.OLSKInternationalLanguageID(_require().basename(item));

    				coll[key] = Object.assign(coll[key] || {}, _require().load(_require().readFileSync(item, 'utf8')));

    				return coll;
    			}, {});
    		},

    		OLSKInternationalDictionary (cwd) {
    			return this._OLSKInternationalConstructedDictionary(this._OLSKInternationalPaths(cwd));
    		},

    		_OLSKInternationalCompilationObject (cwd, languageID) {
    			const _require = commonjsRequire;

    			return this._OLSKInternationalPaths(cwd, /node_modules|__external/).filter(function (e) {
    				if (!languageID) {
    					return true;
    				}

    				return mod.OLSKInternationalLanguageID(_require().basename(e)) === languageID;
    			}).reduce(function (coll, item) {
    				return Object.assign(coll, {
    					[item]: _require().load(_require().readFileSync(item, 'utf8')),
    				});
    			}, {});
    		},

    		_OLSKInternationalCompilationFilePath (cwd) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const _require = commonjsRequire;

    			return _require().join(cwd, '__compiled', mod.OLSKInternationalDefaultIdentifier() + '-compilation.yml')
    		},

    		_SafeDump (inputData) {
    			const _require = commonjsRequire;

    			return _require().safeDump(inputData, {
    				lineWidth: Infinity,
    			});
    		},

    		OLSKInternationalWriteCompilationFile (cwd, languageID) {
    			const _require = commonjsRequire;

    			const data = mod._SafeDump(this._OLSKInternationalCompilationObject(cwd, languageID));

    			const outputDirectory = _require().dirname(mod._OLSKInternationalCompilationFilePath(cwd));

    			if (!_require().existsSync(outputDirectory)){
    				_require().mkdirSync(outputDirectory);
    			}

    			_require().writeFileSync(mod._OLSKInternationalCompilationFilePath(cwd), data);
    		},

    		OLSKInternationalSpreadCompilationFile (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			const compilation = _require().load(_require().readFileSync(mod._OLSKInternationalCompilationFilePath(cwd), 'utf8'));

    			Object.keys(compilation).map(function (e) {
    				return _require().writeFileSync(e, mod._SafeDump(compilation[e]));
    			});
    		},

    		OLSKInternationalAddControllerLanguageCode (cwd, languageID) {
    			if (typeof cwd !== 'string' || !cwd.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof languageID !== 'string' || !languageID.trim()) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			const _require = commonjsRequire;

    			_require().sync('controller.js', {
    				cwd,
    				matchBase: true,
    				realpath: true,
    			}).forEach(function (file) {
    				if (file.match(/.*(\.git|DS_Store|node_modules|vendor|__\w+)\/.*/i)) {
    					return
    				}

    				const item = _require();

    				if (typeof item.OLSKControllerRoutes !== 'function') {
    					return;
    				}

    				if (!(function(inputData) {
    					if (Array.isArray(inputData)) {
    						return inputData;
    					}
    					return Object.entries(inputData).reduce(function (coll, item) {
    						return coll.concat(Object.assign(item[1], {
    							OLSKRouteSignature: item[0],
    						}));
    					}, []);
    				})(item.OLSKControllerRoutes()).filter(function (e) {
    					return e.OLSKRouteLanguageCodes;
    				}).filter(function (e) {
    					return !e.OLSKRouteLanguageCodes.includes(languageID);
    				}).length) {
    					return
    				}
    				const match = _require().readFileSync(file, 'utf8').match(/OLSKRouteLanguageCodes: \[.*\]/g);

    				if (!match) {
    					throw new Error(`invalid OLSKRouteLanguageCodes syntax in ${ e }`);
    				}

    				match.map(function (e) {
    					const match = e.match(/\[.*\]/);
    					return _require().writeFileSync(file, _require().readFileSync(file, 'utf8').replace(/OLSKRouteLanguageCodes: \[.*\]/, `OLSKRouteLanguageCodes: ['${JSON.parse(match[0].replace(/\'/g, '"')).concat(languageID).join('\', \'')}']`));
    				});
    			});

    			if (process.argv[2].endsWith('olsk-i18n-add')) {
    				process.exit();
    			}
    		},

    	};
    	
    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));

    {
    	exports.OLSKLocalized = function (inputData) {
    		return exports.OLSKInternationalLocalizedString(inputData, JSON.parse(`{"en":{"OLSKAppToolbarCloudStatusOnline":"Online","OLSKAppToolbarCloudStatusOffline":"Offline","OLSKAppToolbarCloudStatusError":"Error","OLSKAppToolbarAproposButtonText":"More info","OLSKAppToolbarLanguageButtonText":"Language","OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Fund","OLSKAppToolbarLauncherButtonText":"Launcher","OLSKAppToolbarCloudButtonText":"Cloud","OLSKAproposHeadingText":"About","OLSKAproposFeedbackButtonText":"Send feedback","OLSKAproposShareButtonText":"Tell a friend","OLSKCatalogMasterPlaceholderText":"Tap + to create an item.","OLSKCatalogStashPlaceholderTextFormat":"Items selected: %@","OLSKCloudRenewButtonText":"Renew","OLSKCloudFormConnectButtonText":"Connect","OLSKCloudFormRegisterLinkText":"Get a cloud","OLSKCloudStatusSyncStartButtonText":"Sync","OLSKCloudStatusSyncStopButtonText":"Stop","OLSKCloudStatusDisconnectButtonText":"Disconnect","OLSKCloudStatusDisconnectConfirmText":"Are you sure?","OLSKFundGrantErrorConnectionText":"Connection error","OLSKFundGrantErrorDecryptionText":"Decryption error","OLSKFundGrantErrorSigningText":"Signing error","OLSKFundGateText":"Unlock unlimited documents by making a contribution to the project. Would you like to do this now?","OLSKFundWebViewTitleText":"Fund a project","OLSKFundLauncherItemEnterClueText":"Enter confirmation code","OLSKFundLauncherItemEnterCluePromptText":"Enter confirmation code","OLSKFundLauncherItemClearClueText":"Clear authorization","OLSKFundLauncherItemClearClueConfirmText":"Are you sure?","OLSKInputWrapperClearButtonText":"Clear text","OLSKModalViewCloseButtonText":"Done","OLSKNarrowFilterFieldText":"Filter","OLSKPlaceholderText":"No item selected","OLSKReloadButtonText":"Reload","OLSKRemoteStorageConnectConfirmText":"Connect your cloud to continue. Would you like to do this now?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Open access link","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Access link","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copy private access link","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flush data","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Are you sure?","OLSKServiceWorkerUpdateAlertLabelText":"Update available","OLSKServiceWorkerUpdateAlertReloadButtonText":"Reload","OLSKServiceWorkerLauncherItemReloadText":"Reload","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Force update","OLSKTransportLauncherItemImportJSONText":"Import JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Input not filled","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Input not valid","OLSKTransportLauncherItemExportJSONText":"Export JSON (beta)","OLSKWebViewWindowButtonText":"Open in new window","LCHComposeCreateButtonText":"Create","LCHComposeListItemUntitledText":"Untitled","LCHComposeToolsPairButtonText":"Pair extension","LCHComposePublicKeyNotValidAlertText":"Input not valid","LCHComposeToolsPairStatusWaitingText":"Waiting","LCHComposeToolsPairStatusFailedText":"Failed","LCHComposeLauncherItemCloneText":"Clone recipe","LCHComposeTitle":"Compose","LCHComposeBuildRunLinkText":"Run","LCHComposeBuildPipeModeEnabledFieldLabelText":"Pipe mode","LCHComposeBuildPageRecipesEnabledFieldLabelText":"Include page recipes","LCHComposeDetailToolbarBackButtonText":"Back","LCHComposeDetailToolbarCloneButtonText":"Clone","LCHComposeDetailToolbarDiscardButtonText":"Discard","LCHComposeDetailDiscardConfirmText":"Are you sure?","LCHComposeDetailFlagAlertText":"This recipe will be ignored because it contains potentially unsafe code.","LCHComposeDetailFormNameFieldText":"Name (e.g. Say Hello)","LCHComposeDetailFormSignatureFieldText":"Signature (e.g. XYZGreet)","LCHComposeDetailFormInputTypesFieldText":"Input Types (e.g. String, Bool)","LCHComposeDetailFormCallbackArgsFieldText":"arguments","LCHComposeDetailFormCallbackBodyFieldText":"Function Body (e.g. window.alert('Hello');)","LCHComposeDetailFormOutputTypeFieldText":"Output Type (e.g. String)","LCHComposeDetailFormCanonicalExampleCallbackBodyFieldText":"Canonical Example Body","LCHComposeDetailFormStyleFieldText":"CSS (e.g. body { background: red; })","LCHComposeDetailFormURLFilterFieldText":"URL Filter (e.g. example.com or /https?://(.*\\\\.)?example\\\\.com/i)","LCHComposeDetailFormIsAutomaticFieldLabelText":"Run automatically","LCHComposeListItemFlaggedAlertText":"[Flagged]","LCHComposePairKeyFieldText":"Key","LCHComposePairSubmitButtonText":"Submit","LCHComposePairClearButtonText":"Delete key"},"es":{"OLSKAppToolbarCloudStatusOnline":"En líneo","OLSKAppToolbarCloudStatusOffline":"Sin conexión","OLSKAppToolbarCloudStatusError":"Error","OLSKAppToolbarAproposButtonText":"Más información","OLSKAppToolbarLanguageButtonText":"Lenguaje","OLSKAppToolbarGuideLinkText":"Guía","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lanzador","OLSKAppToolbarCloudButtonText":"Almacenamiento","OLSKAproposHeadingText":"Sobre","OLSKAproposFeedbackButtonText":"Enviar feedback","OLSKAproposShareButtonText":"Decirlo a un amig@","OLSKCatalogMasterPlaceholderText":"Pulse + para crear un artículo.","OLSKCatalogStashPlaceholderTextFormat":"Artículo seleccionados: %@","OLSKCloudRenewButtonText":"Renovar","OLSKCloudFormConnectButtonText":"Conectar","OLSKCloudFormRegisterLinkText":"Conseguir almacenamiento","OLSKCloudStatusSyncStartButtonText":"Sincronizar","OLSKCloudStatusSyncStopButtonText":"Parar","OLSKCloudStatusDisconnectButtonText":"Desconectar","OLSKCloudStatusDisconnectConfirmText":"¿Estás segur@?","OLSKFundGrantErrorConnectionText":"Error de conexión","OLSKFundGrantErrorDecryptionText":"Error de deciframiento","OLSKFundGrantErrorSigningText":"Error de signatura","OLSKFundGateText":"Desbloquear documentos ilimitados por contribuir al proyecto. ¿Te gustaría hacer eso ahora?","OLSKFundWebViewTitleText":"Financiar un proyecto","OLSKFundLauncherItemEnterClueText":"Entrar código de confirmación","OLSKFundLauncherItemEnterCluePromptText":"Entrar código de confirmación","OLSKFundLauncherItemClearClueText":"Despejar autorización","OLSKFundLauncherItemClearClueConfirmText":"¿Est@s segur@?","OLSKInputWrapperClearButtonText":"Despejar el texto","OLSKModalViewCloseButtonText":"OK","OLSKNarrowFilterFieldText":"Filtrar","OLSKPlaceholderText":"Ningún artículo seleccionado","OLSKReloadButtonText":"Recargar","OLSKRemoteStorageConnectConfirmText":"Conecta tu almacenamiento para continuar. ¿Te gustaría hacer esto ahora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir enlace de acceso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Enlace de acceso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar enlace de acceso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Pulgar los datos","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Estás segur@?","OLSKServiceWorkerUpdateAlertLabelText":"Actualización disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recargar","OLSKServiceWorkerLauncherItemReloadText":"Recargar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forzar actualización","OLSKTransportLauncherItemImportJSONText":"Importar JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrada no cargada","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrada no valida","OLSKTransportLauncherItemExportJSONText":"Exportar JSON (beta)","OLSKWebViewWindowButtonText":"Abrir en una nueva ventana","LCHComposeCreateButtonText":"Crear","LCHComposeListItemUntitledText":"Sin título","LCHComposeToolsPairButtonText":"Emparejar extensión","LCHComposePublicKeyNotValidAlertText":"Entrada no válido","LCHComposeToolsPairStatusWaitingText":"Esperando","LCHComposeToolsPairStatusFailedText":"Falló","LCHComposeLauncherItemCloneText":"Clonar receta","LCHComposeTitle":"Componer","LCHComposeBuildRunLinkText":"Ejecutar","LCHComposeBuildPipeModeEnabledFieldLabelText":"Modo de 'Pipe'","LCHComposeBuildPageRecipesEnabledFieldLabelText":"Incluir recetas de página","LCHComposeDetailToolbarBackButtonText":"Back","LCHComposeDetailToolbarCloneButtonText":"Clonar","LCHComposeDetailToolbarDiscardButtonText":"Eliminar","LCHComposeDetailDiscardConfirmText":"¿Estás segur@?","LCHComposeDetailFlagAlertText":"Esta receta sera ignorada porque tiene código potencialmente inseguro.","LCHComposeDetailFormNameFieldText":"Nombre (e.g. Decir hola)","LCHComposeDetailFormSignatureFieldText":"Firma (e.g. XYZDarLaBienvenida)","LCHComposeDetailFormInputTypesFieldText":"Tipos de entrada (e.g. String, Bool)","LCHComposeDetailFormCallbackArgsFieldText":"argumentos","LCHComposeDetailFormCallbackBodyFieldText":"Cuerpo de función (e.g. window.alert('Hola');)","LCHComposeDetailFormOutputTypeFieldText":"Tipo de salida (e.g. String)","LCHComposeDetailFormCanonicalExampleCallbackBodyFieldText":"Cuerpo del ejemplo canónico","LCHComposeDetailFormStyleFieldText":"CSS (e.g. body { background: red; })","LCHComposeDetailFormURLFilterFieldText":"URL Filter (e.g. example.com o /https?://(.*\\\\.)?example\\\\.com/i)","LCHComposeDetailFormIsAutomaticFieldLabelText":"Ejecutar automáticamente","LCHComposeListItemFlaggedAlertText":"[Señalado]","LCHComposePairKeyFieldText":"Clave","LCHComposePairSubmitButtonText":"Someter","LCHComposePairClearButtonText":"Eliminar clave"},"fr":{"OLSKAppToolbarCloudStatusOnline":"En ligne","OLSKAppToolbarCloudStatusOffline":"Hors connexion","OLSKAppToolbarCloudStatusError":"Erreur","OLSKAppToolbarAproposButtonText":"Plus d'info","OLSKAppToolbarLanguageButtonText":"Langage","OLSKAppToolbarGuideLinkText":"Guide","OLSKAppToolbarFundButtonText":"Financer","OLSKAppToolbarLauncherButtonText":"Lanceur","OLSKAppToolbarCloudButtonText":"Stockage","OLSKAproposHeadingText":"À propos","OLSKAproposFeedbackButtonText":"Envoyer des commentaires","OLSKAproposShareButtonText":"Dire à un ami.e","OLSKCatalogMasterPlaceholderText":"Appuyez sur + pour créer un article.","OLSKCatalogStashPlaceholderTextFormat":"Articles sélectionnés : %@","OLSKCloudRenewButtonText":"Renouveler","OLSKCloudFormConnectButtonText":"Brancher","OLSKCloudFormRegisterLinkText":"Obtenir stockage","OLSKCloudStatusSyncStartButtonText":"Synchroniser","OLSKCloudStatusSyncStopButtonText":"Stop","OLSKCloudStatusDisconnectButtonText":"Débrancher","OLSKCloudStatusDisconnectConfirmText":"Êtes-vous sûr.e ?","OLSKFundGrantErrorConnectionText":"Erreur de connexion","OLSKFundGrantErrorDecryptionText":"Erreur de déchiffrement","OLSKFundGrantErrorSigningText":"Erreur de signature","OLSKFundGateText":"Déverrouiller des documents sans limite en contribuant au projet. Souhaitez-vous le faire maintenant ?","OLSKFundWebViewTitleText":"Financer un projet","OLSKFundLauncherItemEnterClueText":"Entrer code de confirmation","OLSKFundLauncherItemEnterCluePromptText":"Entrer code de confirmation","OLSKFundLauncherItemClearClueText":"Enlever autorisation","OLSKFundLauncherItemClearClueConfirmText":"Êtes-vous sûr.e ?","OLSKInputWrapperClearButtonText":"Effacer le texte","OLSKModalViewCloseButtonText":"OK","OLSKNarrowFilterFieldText":"Filtrer","OLSKPlaceholderText":"Aucun article sélectionné","OLSKReloadButtonText":"Recharger","OLSKRemoteStorageConnectConfirmText":"Veuillez brancher votre stockage afin de continuer. Souhaitez-vous faire ça maintenant ?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Ouvrir lien d'accès","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Lien d'accès","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copier lien d'accès privé","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Flusher les données","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Êtes-vous sûr.e ?","OLSKServiceWorkerUpdateAlertLabelText":"Mise à jour disponible","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recharger","OLSKServiceWorkerLauncherItemReloadText":"Recharger","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forcer mis à jour","OLSKTransportLauncherItemImportJSONText":"Importer JSON (béta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrée non remplie","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrée non valide","OLSKTransportLauncherItemExportJSONText":"Exporter JSON (béta)","OLSKWebViewWindowButtonText":"Ouvrir dans une nouvelle fenêtre","LCHComposeCreateButtonText":"Créer","LCHComposeListItemUntitledText":"Sans titre","LCHComposeToolsPairButtonText":"Associer l'extension","LCHComposePublicKeyNotValidAlertText":"Entrée non valide","LCHComposeToolsPairStatusWaitingText":"En attente","LCHComposeToolsPairStatusFailedText":"Échoué","LCHComposeLauncherItemCloneText":"Cloner recette","LCHComposeTitle":"Composer","LCHComposeBuildRunLinkText":"Exécuter","LCHComposeBuildPipeModeEnabledFieldLabelText":"Mode Pipe","LCHComposeBuildPageRecipesEnabledFieldLabelText":"Inclure les recettes de la page","LCHComposeDetailToolbarBackButtonText":"Back","LCHComposeDetailToolbarCloneButtonText":"Cloner","LCHComposeDetailToolbarDiscardButtonText":"Supprimer","LCHComposeDetailDiscardConfirmText":"Êtes-vous sûr ?","LCHComposeDetailFlagAlertText":"Cette recette va être ignorée parce qu'elle contient du code potentiellement non-sécurisé.","LCHComposeDetailFormNameFieldText":"Nom (e.g. Dire bonjour)","LCHComposeDetailFormSignatureFieldText":"Signature (e.g. XYZAccueillir)","LCHComposeDetailFormInputTypesFieldText":"Types de saisie (e.g. String, Bool)","LCHComposeDetailFormCallbackArgsFieldText":"arguments","LCHComposeDetailFormCallbackBodyFieldText":"Corps de fonction (e.g. window.alert('Bonjour');)","LCHComposeDetailFormOutputTypeFieldText":"Type de sortie (e.g. String)","LCHComposeDetailFormCanonicalExampleCallbackBodyFieldText":"Corps de l'exemple canonique","LCHComposeDetailFormStyleFieldText":"CSS (e.g. body { background: red; })","LCHComposeDetailFormURLFilterFieldText":"URL Filter (e.g. example.com ou /https ?://(.*\\\\.) ?example\\\\.com/i)","LCHComposeDetailFormIsAutomaticFieldLabelText":"Exécuter automatiquement","LCHComposeListItemFlaggedAlertText":"[Marqué]","LCHComposePairKeyFieldText":"Clé","LCHComposePairSubmitButtonText":"Soumettre","LCHComposePairClearButtonText":"Supprimer la clé"},"pt":{"OLSKAppToolbarCloudStatusOnline":"Online","OLSKAppToolbarCloudStatusOffline":"Offline","OLSKAppToolbarCloudStatusError":"Erro","OLSKAppToolbarAproposButtonText":"Mais informação","OLSKAppToolbarLanguageButtonText":"Idioma","OLSKAppToolbarGuideLinkText":"Guia","OLSKAppToolbarFundButtonText":"Financiar","OLSKAppToolbarLauncherButtonText":"Lançador","OLSKAppToolbarCloudButtonText":"Nuvem","OLSKAproposHeadingText":"Sobre","OLSKAproposFeedbackButtonText":"Enviar feedback","OLSKAproposShareButtonText":"Dizer a um amigo","OLSKCatalogMasterPlaceholderText":"Toque + para criar um artículo.","OLSKCatalogStashPlaceholderTextFormat":"Artículos selecionados: %@","OLSKCloudRenewButtonText":"Renovar","OLSKCloudFormConnectButtonText":"Conectar","OLSKCloudFormRegisterLinkText":"Obter uma nuvem","OLSKCloudStatusSyncStartButtonText":"Sincronizar","OLSKCloudStatusSyncStopButtonText":"Parar","OLSKCloudStatusDisconnectButtonText":"Desconectar","OLSKCloudStatusDisconnectConfirmText":"Você tem certeza?","OLSKFundGrantErrorConnectionText":"Erro de conexão","OLSKFundGrantErrorDecryptionText":"Erro de desencriptação","OLSKFundGrantErrorSigningText":"Erro de assinatura","OLSKFundGateText":"Desbloquear documentos ilimitados fazendo uma contribuição para o projeto. Você gostaria de fazer isso agora?","OLSKFundWebViewTitleText":"Financiar um projeto","OLSKFundLauncherItemEnterClueText":"Insira o código de confirmação","OLSKFundLauncherItemEnterCluePromptText":"Digite o código de confirmação","OLSKFundLauncherItemClearClueText":"Zerar autorização","OLSKFundLauncherItemClearClueConfirmText":"Você tem certeza?","OLSKInputWrapperClearButtonText":"Limpar texto","OLSKModalViewCloseButtonText":"OK","OLSKNarrowFilterFieldText":"Filtrar","OLSKPlaceholderText":"Nenhum artículo selecionado","OLSKReloadButtonText":"Reload","OLSKRemoteStorageConnectConfirmText":"Conecte sua nuvem para continuar. Você gostaria de fazer isso agora?","OLSKRemoteStorageLauncherItemOpenLoginLinkText":"Abrir link de acesso","OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText":"Link de acesso","OLSKRemoteStorageLauncherItemCopyLoginLinkText":"Copiar link de acesso privado","OLSKRemoteStorageLauncherItemDebugFlushDataText":"Fazer sair os dados","OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText":"Você tem certeza?","OLSKServiceWorkerUpdateAlertLabelText":"Atualização disponível","OLSKServiceWorkerUpdateAlertReloadButtonText":"Recarregar","OLSKServiceWorkerLauncherItemReloadText":"Recarregar","OLSKServiceWorkerLauncherItemDebugForceUpdateText":"Forçar atualização","OLSKTransportLauncherItemImportJSONText":"Importar JSON (beta)","OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText":"Entrada não preenchida","OLSKTransportLauncherItemImportJSONErrorNotValidAlertText":"Entrada não válida","OLSKTransportLauncherItemExportJSONText":"Exportar JSON (beta)","OLSKWebViewWindowButtonText":"Abrir em nova janela","LCHComposeCreateButtonText":"Criar","LCHComposeListItemUntitledText":"Sem título","LCHComposeToolsPairButtonText":"Extensão do par","LCHComposePublicKeyNotValidAlertText":"Entrada não válida","LCHComposeToolsPairStatusWaitingText":"Esperando","LCHComposeToolsPairStatusFailedText":"Falhado","LCHComposeLauncherItemCloneText":"Clonar a receita","LCHComposeTitle":"Compor","LCHComposeBuildRunLinkText":"Executar","LCHComposeBuildPipeModeEnabledFieldLabelText":"Modo Encanado","LCHComposeBuildPageRecipesEnabledFieldLabelText":"Incluir receitas da página","LCHComposeDetailToolbarBackButtonText":"Voltar","LCHComposeDetailToolbarCloneButtonText":"Clonar","LCHComposeDetailToolbarDiscardButtonText":"Eliminar","LCHComposeDetailDiscardConfirmText":"Você tem certeza?","LCHComposeDetailFlagAlertText":"Essa receita será ignorada porque contém um código potencialmente inseguro.","LCHComposeDetailFormNameFieldText":"Nome (por exemplo: Dizer Olá)","LCHComposeDetailFormSignatureFieldText":"Assinatura (por exemplo, XYZCumprimentar)","LCHComposeDetailFormInputTypesFieldText":"Tipos de entrada (por exemplo, String, Bool)","LCHComposeDetailFormCallbackArgsFieldText":"argumentos","LCHComposeDetailFormCallbackBodyFieldText":"Corpo da Função (por exemplo, window.alert('Olá');)","LCHComposeDetailFormOutputTypeFieldText":"Tipo de saída (por exemplo, String)","LCHComposeDetailFormCanonicalExampleCallbackBodyFieldText":"Corpo do Exemplo Canônico","LCHComposeDetailFormStyleFieldText":"CSS (por exemplo, body { background: red; })","LCHComposeDetailFormURLFilterFieldText":"Filtro do URL (por exemplo, example.com ou /https?://(.*\\\\.)?example\\\\.com/i)'","LCHComposeDetailFormIsAutomaticFieldLabelText":"É automatico","LCHComposeListItemFlaggedAlertText":"[Bandeirado]","LCHComposePairKeyFieldText":"Chave","LCHComposePairSubmitButtonText":"Submeter","LCHComposePairClearButtonText":"Apagar chave"}}`)[window.OLSKPublicConstants('OLSKSharedPageCurrentLanguage')]);
    	};
    }
    });

    unwrapExports(main);
    var main_1 = main.OLSKLocalized;

    var main$1 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKThrottleIsValid (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return false;
    		}

    		if (typeof inputData.OLSKThrottleCallback !== 'function') {
    			return false;
    		}

    		if (typeof inputData.OLSKThrottleDuration !== 'number') {
    			return false;
    		}

    		return true;
    	},

    	OLSKThrottleTimeoutFor (inputData) {
    		if (!mod.OLSKThrottleIsValid(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData._OLSKThrottleTimeoutID) {
    			clearTimeout(inputData._OLSKThrottleTimeoutID);
    		}

    		inputData._OLSKThrottleTimeoutID = setTimeout(function () {
    			mod._OLSKThrottleFire(inputData);
    		}, inputData.OLSKThrottleDuration);

    		return inputData._OLSKThrottleTimeoutID;
    	},

    	OLSKThrottleSkip (inputData) {
    		if (!mod.OLSKThrottleIsValid(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		clearTimeout(inputData._OLSKThrottleTimeoutID);
    		
    		return mod._OLSKThrottleFire(inputData);
    	},

    	_OLSKThrottleFire (inputData) {
    		delete inputData._OLSKThrottleTimeoutID;
    		
    		return inputData.OLSKThrottleCallback();
    	},

    	OLSKThrottleMappedTimeout (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!mod.OLSKThrottleIsValid(param3)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1[param2]) {
    			param1[param2] = Object.assign(Object.assign({}, param3), {
    				OLSKThrottleCallback () {
    					mod._OLSKThrottleFire(param3);

    					// delete param1[param2]
    				},
    			});
    		}

    		return param3._OLSKThrottleTimeoutID = mod.OLSKThrottleTimeoutFor(param1[param2]);
    	},

    };

    Object.assign(exports, mod);
    });

    const mod = {

    	LCHFormulaSafeStringFields: [
    		'LCHFormulaID',
    		'LCHFormulaName',
    		'LCHFormulaSignature',
    		'LCHFormulaInputTypes',
    		'LCHFormulaOutputType',
    		'LCHFormulaStyle',
    		'LCHFormulaURLFilter',
    		'LCHFormulaCreationDate',
    		'LCHFormulaModificationDate',
    		'LCHFormulaSyntaxErrorMessage',
    		'@context',
    	],

    	LCHFormulaErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const errors = {};

    		if (inputData.LCHFormulaName !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaName !== 'string') {
    				errors.LCHFormulaName = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaSignature !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaSignature !== 'string') {
    				errors.LCHFormulaSignature = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaInputTypes !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaInputTypes !== 'string') {
    				errors.LCHFormulaInputTypes = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaOutputType !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaOutputType !== 'string') {
    				errors.LCHFormulaOutputType = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaIsHidden !== undefined) {
    			if (typeof inputData.LCHFormulaIsHidden !== 'function') {
    				errors.LCHFormulaIsHidden = [
    					'LCHErrorNotFunction',
    				];
    			}
    		}

    		if (inputData.LCHFormulaURLFilter !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaURLFilter !== 'string') {
    				errors.LCHFormulaURLFilter = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaIsAutomatic !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaIsAutomatic !== 'boolean') {
    				errors.LCHFormulaIsAutomatic = [
    					'LCHErrorNotBoolean',
    				];
    			}
    		}

    		if (inputData.LCHFormulaStyle !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaStyle !== 'string') {
    				errors.LCHFormulaStyle = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHFormulaIsFlagged !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHFormulaIsFlagged !== 'boolean') {
    				errors.LCHFormulaIsFlagged = [
    					'LCHErrorNotBoolean',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	LCHFormulaFrom (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return Object.entries(inputData).reduce(function (coll, item) {
    			coll[item[0].replace(/LCH[A-Z][a-z]+/, 'LCHFormula')] = item[1];

    			return coll;
    		}, {});
    	},

    	LCHFormulaTo (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return Object.entries(param1).reduce(function (coll, item) {
    			coll[item[0].replace('LCHFormula', param2)] = item[1];

    			return coll;
    		}, {});
    	},

    	LCHFormulaToEvaluate (inputData) {
    		if (mod.LCHFormulaErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		let outputData = Object.fromEntries(Object.entries(inputData).filter(function (e) {
    			return !mod.LCHFormulaSafeStringFields.includes(e[0]);
    		}));

    		if (outputData.LCHFormulaCallbackArgs || outputData.LCHFormulaCallbackBody) {
    			outputData.LCHFormulaCallbackRaw = `(function (${ outputData.LCHFormulaCallbackArgs || '' }) { ${ outputData.LCHFormulaCallbackBody || '' } })`;
    			delete outputData.LCHFormulaCallbackArgs;
    			delete outputData.LCHFormulaCallbackBody;
    		}

    		if (outputData.LCHFormulaCanonicalExampleCallbackBody) {
    			outputData.LCHFormulaCanonicalExampleCallbackRaw = `(function () { ${ outputData.LCHFormulaCanonicalExampleCallbackBody || '' } })`;
    			delete outputData.LCHFormulaCanonicalExampleCallbackBody;
    		}

    		return outputData;
    	},

    };

    function createError(message) {
        var err = new Error(message);
        err.source = "ulid";
        return err;
    }
    // These values should NEVER change. If
    // they do, we're no longer making ulids!
    var ENCODING = "0123456789ABCDEFGHJKMNPQRSTVWXYZ"; // Crockford's Base32
    var ENCODING_LEN = ENCODING.length;
    var TIME_MAX = Math.pow(2, 48) - 1;
    var TIME_LEN = 10;
    var RANDOM_LEN = 16;
    function randomChar(prng) {
        var rand = Math.floor(prng() * ENCODING_LEN);
        if (rand === ENCODING_LEN) {
            rand = ENCODING_LEN - 1;
        }
        return ENCODING.charAt(rand);
    }
    function encodeTime(now, len) {
        if (isNaN(now)) {
            throw new Error(now + " must be a number");
        }
        if (now > TIME_MAX) {
            throw createError("cannot encode time greater than " + TIME_MAX);
        }
        if (now < 0) {
            throw createError("time must be positive");
        }
        if (Number.isInteger(now) === false) {
            throw createError("time must be an integer");
        }
        var mod = void 0;
        var str = "";
        for (; len > 0; len--) {
            mod = now % ENCODING_LEN;
            str = ENCODING.charAt(mod) + str;
            now = (now - mod) / ENCODING_LEN;
        }
        return str;
    }
    function encodeRandom(len, prng) {
        var str = "";
        for (; len > 0; len--) {
            str = randomChar(prng) + str;
        }
        return str;
    }
    function detectPrng() {
        var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (typeof require === 'undefined' && typeof navigator !== 'undefined' && navigator.appName === 'Zombie');
        var root = arguments[1];

        if (!root) {
            root = typeof window !== "undefined" ? window : null;
        }
        var browserCrypto = root && (root.crypto || root.msCrypto);
        if (browserCrypto) {
            return function () {
                var buffer = new Uint8Array(1);
                browserCrypto.getRandomValues(buffer);
                return buffer[0] / 0xff;
            };
        } else {
            try {
                var nodeCrypto = require("crypto");
                return function () {
                    return nodeCrypto.randomBytes(1).readUInt8() / 0xff;
                };
            } catch (e) {}
        }
        if (allowInsecure) {
            return function () {
                return Math.random();
            };
        }
        throw createError("secure crypto unusable, insecure Math.random not allowed");
    }
    function factory(currPrng) {
        if (!currPrng) {
            currPrng = detectPrng();
        }
        return function ulid(seedTime) {
            if (isNaN(seedTime)) {
                seedTime = Date.now();
            }
            return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);
        };
    }
    var ulid = factory();

    var main$2 = createCommonjsModule(function (module, exports) {

    const mod = {

    	OLSKRemoteStorageChangeDelegateConflictSelectRecent (inputData) {
    		if (inputData.origin !== 'conflict') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (Object.entries(inputData.oldValue).filter(function (e) {
    			if (!e[0].match('ModificationDate')) {
    				return false;
    			}

    			return e[1] > inputData.newValue[e[0]];
    		}).length) {
    			return inputData.oldValue;
    		}

    		return inputData.newValue;
    	},

    	OLSKRemoteStorageIsCollection (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionName !== 'string') {
    			return false;
    		}

    		if (!inputData.OLSKRemoteStorageCollectionName.trim()) {
    			return false;
    		}

    		if (typeof inputData.OLSKRemoteStorageCollectionExports !== 'object' || inputData.OLSKRemoteStorageCollectionExports === null) {
    			return false;
    		}

    		return true;
    	},

    	OLSKRemoteStorageDataModuleGenerator (kModuleName) {
    		if (typeof kModuleName !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!kModuleName.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _this = this;

    		return function (inputData) {
    			if (!Array.isArray(inputData)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return {
    				name: kModuleName,
    				builder (privateClient, publicClient) {
    					return {
    						exports: inputData.reduce(function (coll, item) {
    							const collection = item(privateClient, publicClient);

    							if (!mod.OLSKRemoteStorageIsCollection(collection)) {
    								throw new Error('OLSKErrorInputNotValid');
    							}

    							coll[collection.OLSKRemoteStorageCollectionName] = collection.OLSKRemoteStorageCollectionExports;

    							return coll;
    						}, Object.assign({
    							OLSKRemoteStorageEnableCrypto () {
    								return _this._OLSKRemoteStorageEnableCrypto(...[privateClient].concat(...arguments));
    							},
    						})),
    					};
    				},
    			};
    		};
    	},

    	_OLSKRemoteStorageIsPath (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return !!inputData.trim();
    	},

    	OLSKRemoteStorageSafeCopy (inputData) {
    		return Object.keys(inputData).reduce(function (coll, item) {
    			if (item[0] !== '$') {
    				coll[item] = inputData[item];
    			}

    			return coll
    		}, {});
    	},

    	OLSKRemoteStoragePostJSONParse (inputData) {
    		if (!inputData) {
    			return inputData;
    		}

    		if (Array.isArray(inputData)) {
    			return inputData.map(mod.OLSKRemoteStoragePostJSONParse);
    		}

    		for (const key in inputData) {
    			if (key.slice(-4) === 'Date') {
    				inputData[key] = new Date(inputData[key]);
    			} else if (Array.isArray(inputData[key])) {
    				inputData[key].map(mod.OLSKRemoteStoragePostJSONParse);
    			} else if (typeof inputData[key] === 'object') {
    				mod.OLSKRemoteStoragePostJSONParse(inputData[key]);
    			}
    		}

    		return inputData;
    	},

    	OLSKRemoteStorageQueryFunction (param1, param2, param3, param4) {
    		if (typeof param1 !== 'function' || !param1.prototype) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null || !param2.name) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (inputData) {
    			if (typeof inputData !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    			const storageClient = new (param1)({
    				cache: false,
    				modules: [param2],
    			});

    			storageClient.access.claim(param2.name, 'rw');

    			storageClient.stopSync();

    			return new Promise(function (res, rej) {
    				let didReject, outputData;

    				storageClient.on('error', function (err) {
    					if (didReject) {
    						return;
    					}

    					didReject = true;
    					return rej(err);
    				});

    				storageClient.on('connected', async function () {
    					try {
    						outputData = await inputData(storageClient);
    					} catch (e) {
    						didReject = true;
    						return rej(e);
    					}

    					res(outputData);
    					
    					return storageClient.disconnect();
    				});

    				storageClient.connect(param3, param4);
    			});
    		};
    	},

    	_OLSKRemoteStorageEnableCrypto (privateClient, encrypt, decrypt) {
    		if (!privateClient.storeFile) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof encrypt !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof decrypt !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return Object.assign(privateClient, {
    			_OLSKBackupStoreFile: privateClient.storeFile,
    			_OLSKBackupGetFile: privateClient.getFile,
    			_OLSKBackupStoreObject: privateClient.storeObject,
    			_OLSKBackupGetObject: privateClient.getObject,
    			_OLSKBackupGetAll: privateClient.getAll,

    			storeFile (mimetype, path, body) {
    				return privateClient._OLSKBackupStoreFile('multipart/encrypted', path, encrypt(JSON.stringify({
    					type: mimetype,
    					data: body,
    				})));
    			},

    			async getFile () {
    				const item = await privateClient._OLSKBackupGetFile(...arguments);

    				const decrypted = item.contentType !== 'multipart/encrypted' ? {} : JSON.parse(decrypt(item.data));

    				return Object.assign(item, {
    					contentType: decrypted.type,
    					data: decrypted.data,
    				})
    			},

    			storeObject (type, path, data) {
    				return privateClient._OLSKBackupStoreFile('multipart/encrypted', path, encrypt(JSON.stringify({
    					type,
    					data: JSON.stringify(data),
    				})));
    			},

    			async getObject () {
    				const item = await privateClient._OLSKBackupGetFile(...arguments);

    				const decrypted = item.contentType !== 'multipart/encrypted' ? {} : JSON.parse(decrypt(item.data));

    				return !decrypted.data ? null : JSON.parse(decrypted.data);
    			},

    			async getAll () {
    				const item = await privateClient._OLSKBackupGetAll(...arguments);

    				return Object.entries(item).reduce(function (coll, [key, value]) {
    					if (value === true) {
    						return coll;
    					}

    					return Object.assign(coll, {
    						[key]: value,
    					});
    				}, {})

    				const decrypted = item.contentType !== 'multipart/encrypted' ? {} : JSON.parse(decrypt(item.data));

    				return decrypted.data;
    			},

    		});
    	},

    	OLSKRemoteStorageLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKRemoteStorageLauncherItemFakeFlipConnected (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKRemoteStorageLauncherItemFakeFlipConnected',
    			LCHRecipeCallback () {
    				if (inputData.__ValueOLSKRemoteStorage) {
    					inputData._ValueOLSKRemoteStorage = inputData.__ValueOLSKRemoteStorage;
    					
    					delete inputData.__ValueOLSKRemoteStorage;

    					return inputData.OLSKRemoteStorageLauncherItemFakeFlipConnectedDidFinish();
    				}
    				inputData.__ValueOLSKRemoteStorage = inputData._ValueOLSKRemoteStorage;

    				inputData._ValueOLSKRemoteStorage = (inputData.__ValueOLSKRemoteStorage.access.scopes || []).reduce(function (coll, item) {
    					return Object.assign(coll, {
    						[item.name]: inputData.__ValueOLSKRemoteStorage[item.name],
    					});
    				}, Object.assign({}, inputData.__ValueOLSKRemoteStorage));
    				inputData._ValueOLSKRemoteStorage.connected = true;
    				inputData._ValueOLSKRemoteStorage.remote = Object.assign(inputData._ValueOLSKRemoteStorage.remote, {
    					userAddress: 'OLSK_REMOTE_STORAGE_FAKE_REMOTE_ADDRESS',
    					token: 'OLSK_REMOTE_STORAGE_FAKE_REMOTE_TOKEN',
    				});

    				inputData.OLSKRemoteStorageLauncherItemFakeFlipConnectedDidFinish();

    				if (typeof window !== 'undefined') {
    					window.FakeOLSKConnected = true;
    				}
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemOpenLoginLink (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemOpenLoginLink',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkText'),
    			LCHRecipeCallback () {
    				const item = (debug.DebugWindow || window).prompt(params.OLSKLocalized('OLSKRemoteStorageLauncherItemOpenLoginLinkPromptText'));

    				if (!item) {
    					return;
    				}

    				(debug.DebugWindow || window).location.href = item;
    				(debug.DebugWindow || window).location.reload();
    			},
    			LCHRecipeIsExcluded () {
    				return !!params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemCopyLoginLink (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemCopyLoginLink',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemCopyLoginLinkText'),
    			LCHRecipeCallback () {
    				return this.api.LCHCopyToClipboard(`${ (debug.DebugWindow || window).location.href }#remotestorage=${ params.ParamStorage.remote.userAddress }&access_token=${ params.ParamStorage.remote.token }`.replace(/#+/g, '#'));
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageLauncherItemDebugFlushData (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!params.ParamStorage.remote) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKRemoteStorageLauncherItemDebugFlushData',
    			LCHRecipeName: params.OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataText'),
    			async LCHRecipeCallback () {
    				if (!(debug.DebugWindow || window).confirm(params.OLSKLocalized('OLSKRemoteStorageLauncherItemDebugFlushDataConfirmText'))) {
    					return;
    				}

    				await Promise.all(Object.getOwnPropertyNames(params.ParamStorage).filter(function (e) {
    					return params.ParamStorage[e].__HOTFIX;
    				}).map(function (e) {
    					return params.ParamStorage[e].__HOTFIX.__OLSKRemoteStorageHotfixFlushData();
    				}));

    				return new Promise(function (res, rej) {
    					setTimeout(function() {
    						res((debug.DebugWindow || window).location.reload());
    					}, 1000);
    				});
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamStorage.connected;
    			},
    		};
    	},

    	OLSKRemoteStorageRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKRemoteStorageLauncherFakeItemProxy(),
    			mod.OLSKRemoteStorageLauncherItemFakeFlipConnected(params.ParamMod),
    			mod.OLSKRemoteStorageLauncherItemOpenLoginLink(params),
    			mod.OLSKRemoteStorageLauncherItemCopyLoginLink(params),
    			mod.OLSKRemoteStorageLauncherItemDebugFlushData(params),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    const uniqueID = factory();

    const mod$1 = {

    	LCHDocumentErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const errors = mod.LCHFormulaTo(mod.LCHFormulaErrors(mod.LCHFormulaFrom(inputData)) || {}, 'LCHDocument');

    		if (typeof inputData.LCHDocumentID !== 'string') {
    			errors.LCHDocumentID = [
    				'LCHErrorNotString',
    			];
    		} else if (!inputData.LCHDocumentID.trim()) {
    			errors.LCHDocumentID = [
    				'LCHErrorNotFilled',
    			];
    		}

    		if (typeof inputData.LCHDocumentCallbackBody !== 'string') {
    			errors.LCHDocumentCallbackBody = [
    				'LCHErrorNotString',
    			];
    		}

    		if (!(inputData.LCHDocumentCreationDate instanceof Date) || Number.isNaN(inputData.LCHDocumentCreationDate.getTime())) {
    			errors.LCHDocumentCreationDate = [
    				'LCHErrorNotDate',
    			];
    		}

    		if (!(inputData.LCHDocumentModificationDate instanceof Date) || Number.isNaN(inputData.LCHDocumentModificationDate.getTime())) {
    			errors.LCHDocumentModificationDate = [
    				'LCHErrorNotDate',
    			];
    		}

    		if (inputData.LCHDocumentCallbackArgs !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHDocumentCallbackArgs !== 'string') {
    				errors.LCHDocumentCallbackArgs = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHDocumentSyntaxErrorMessage !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHDocumentSyntaxErrorMessage !== 'string') {
    				errors.LCHDocumentSyntaxErrorMessage = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		if (inputData.LCHDocumentCanonicalExampleCallbackBody !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHDocumentCanonicalExampleCallbackBody !== 'string') {
    				errors.LCHDocumentCanonicalExampleCallbackBody = [
    					'LCHErrorNotString',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	LCHDocumentDirectory () {
    		return 'lch_documents';
    	},

    	LCHDocumentObjectPath (inputData) {
    		return `${ mod$1.LCHDocumentDirectory() }/${ inputData.LCHDocumentID }`;
    	},

    	LCHDocumentStub (inputData) {
    		return {
    			LCHDocumentID: inputData.split('/').pop(),
    		};
    	},

    };

    var LCHDocument = Object.assign(mod$1, {
    	ZDRSchemaKey: 'LCHDocument',
    	ZDRSchemaDispatchValidate: mod$1.LCHDocumentErrors,
    	ZDRSchemaPath: mod$1.LCHDocumentObjectPath,
    	ZDRSchemaStub: mod$1.LCHDocumentStub,
    	ZDRSchemaMethods: {
    		
    		LCHDocumentCreate (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('LCHErrorInputNotValid');
    			}

    			const LCHDocumentCreationDate = new Date();

    			return this.App.LCHDocument.ZDRModelWriteObject(Object.assign(inputData, Object.assign({
    				LCHDocumentID: uniqueID(),
    				LCHDocumentCreationDate,
    				LCHDocumentModificationDate: LCHDocumentCreationDate,
    			}, inputData)));
    		},

    		LCHDocumentUpdate (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('LCHErrorInputNotValid');
    			}

    			return this.App.LCHDocument.ZDRModelWriteObject(Object.assign(inputData, {
    				LCHDocumentModificationDate: new Date(),
    			}));
    		},

    		async LCHDocumentList () {
    			return Object.values(await this.App.LCHDocument.ZDRModelListObjects()).map(main$2.OLSKRemoteStoragePostJSONParse);
    		},

    	},
    });

    const mod$2 = {

    	LCHSettingErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.LCHSettingKey !== 'string') {
    			errors.LCHSettingKey = [
    				'LCHErrorNotString',
    			];
    		} else if (!inputData.LCHSettingKey.trim()) {
    			errors.LCHSettingKey = [
    				'LCHErrorNotFilled',
    			];
    		}

    		if (typeof inputData.LCHSettingValue !== 'string') {
    			errors.LCHSettingValue = [
    				'LCHErrorNotString',
    			];
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	LCHSettingDirectory () {
    		return 'lch_settings';
    	},

    	LCHSettingObjectPath (inputData) {
    		return `${ mod$2.LCHSettingDirectory() }/${ inputData.LCHSettingKey }`;
    	},

    	LCHSettingStub (inputData) {
    		return {
    			LCHSettingKey: inputData.split('/').pop(),
    		};
    	},

    };

    var LCHSetting = Object.assign(mod$2, {
    	ZDRSchemaKey: 'LCHSetting',
    	ZDRSchemaDispatchValidate: mod$2.LCHSettingErrors,
    	ZDRSchemaPath: mod$2.LCHSettingObjectPath,
    	ZDRSchemaStub: mod$2.LCHSettingStub,
    	ZDRSchemaMethods: {
    		
    		async LCHSettingList () {
    			return Object.values(await this.App.LCHSetting.ZDRModelListObjects());
    		},

    	},
    });

    var LCHTransport = {
    	ZDRSchemaKey: 'LCHTransport',
    	ZDRSchemaDispatchValidate: (function () {}),
    	ZDRSchemaPath: (function () {}),
    	ZDRSchemaStub: (function () {}),
    	ZDRSchemaMethods: {

    		async LCHTransportImport (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('LCHErrorInputNotValid');
    			}

    			const _this = this;

    			return Object.fromEntries(await Promise.all(Object.entries(inputData).map(async function ([key, value]) {
    				if (!Array.isArray(value)) {
    					throw new Error('LCHErrorInputNotValid');
    				}

    				return [key, await ({
    					LCHDocument: (function () {
    						return Promise.all(value.map(function (e) {
    							return _this.App.LCHDocument.LCHDocumentCreate(e).catch(function () {
    								throw new Error('LCHErrorInputNotValid');
    							});
    						}));
    					}),
    					LCHSetting: (function () {
    						return Promise.all(value.map(function (e) {
    							return _this.App.LCHSetting.ZDRModelWriteObject(e).catch(function () {
    								throw new Error('LCHErrorInputNotValid');
    							});
    						}));
    					}),
    				}[key]())];
    			})));
    		},

    		LCHTransportExport (inputData) {
    			if (typeof inputData !== 'object' || inputData === null) {
    				throw new Error('LCHErrorInputNotValid');
    			}

    			return Object.entries(inputData).reduce(function (coll, [key, value]) {
    				if (!Array.isArray(value)) {
    					throw new Error('LCHErrorInputNotValid');
    				}

    				if (!value.length) {
    					return coll;
    				}
    				
    				return Object.assign(coll, {
    					[key]: value.map(main$2.OLSKRemoteStorageSafeCopy),
    				});
    			}, {});
    		},

    	},
    };

    var main$3 = createCommonjsModule(function (module, exports) {
    const _require = commonjsRequire;

    const mod = {

    	OLSKSpecUIArguments (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return inputData.map(function (e) {
    			if (e.match(/^match=/)) {
    				return e.replace(/^match=/, '-os-match=');
    			}

    			if (e.match(/^skip=/)) {
    				return e.replace(/^skip=/, '-os-skip=');
    			}

    			return e;
    		});
    	},

    	OLSKSpecUITestPaths (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!_require().OLSKDiskIsRealFolderPath(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return _require().sync('**/ui-test-*.js', {
    			cwd: inputData,
    			realpath: true,
    		}).filter(function (e) {
    			return !e.match(_require().OLSKDiskStandardIgnorePattern());
    		});
    	},

    	OLSKSpecUISourcePaths (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!_require().OLSKDiskIsRealFolderPath(inputData)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return _require().sync('**/+(ui-behaviour.js|*.ejs|*.md|*.html)', {
    			cwd: inputData,
    			realpath: true,
    		}).filter(function (e) {
    			if (e.match('__compiled')) {
    				return true;
    			}
    			
    			return !e.match(_require().OLSKDiskStandardIgnorePattern());
    		});
    	},

    	OLSKSpecMochaPaths (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.ParamPackageDirectory !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof inputData.ParamWorkingDirectory !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			_require().join(inputData.ParamPackageDirectory, './node_modules/.bin/mocha'),
    			_require().join(inputData.ParamPackageDirectory, '../.bin/mocha'),
    			_require().join(inputData.ParamWorkingDirectory, './node_modules/.bin/mocha'),
    			];
    	},

    	_OLSKSpecMochaReplaceES6Import (inputData) {
    		const exportable = [];
    		
    		inputData = inputData
    			.replace(/^import \* as (\w+) from ['"]([^'"]+)['"];?/gm, 'var $1 = require("$2");')
    			// .replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var {default: $1} = require("$2");')
    			.replace(/^import (\w+) from ['"]([^'"]+)['"];?/gm, 'var _$1 = require("$2"); const $1 = _$1.default || _$1')
    			.replace(/^import {([^}]+)} from ['"](.+)['"];?/gm, 'var {$1} = require("$2");')
    			.replace(/^export default /gm, 'exports.default = ')
    			.replace(/^export (const|let|var|class|function) (\w+)/gm, (match, type, name) => {
    				exportable.push(name);
    				return `${type} ${name}`;
    			})
    			.replace(/^export \{([^}]+)\}(?: from ['"]([^'"]+)['"];?)?/gm, (match, names, source) => {
    				names.split(',').filter(Boolean).forEach(name => {
    					exportable.push(name);
    				});

    				return source ? `const { ${names} } = require("${source}");` : '';
    			})
    			.replace(/^export function (\w+)/gm, 'exports.$1 = function $1');

    		exportable.forEach(name => {
    			inputData += `\nexports.${name} = ${name};`;
    		});

    		return inputData;
    	},
    	
    };

    Object.assign(exports, mod);

    {
    	exports.OLSK_SPEC_UI = function () {
    		if (typeof navigator === 'undefined') {
    			return false;
    		}

    		if (typeof window !== 'undefined' && window.location.hostname === 'loc.tests') {
    			return true;
    		}

    		return navigator.appName === 'Zombie';
    	};
    }
    });
    var main_1$1 = main$3.OLSK_SPEC_UI;

    const mod$3 = {

    	OLSKObjectSafeCopy (inputData) {
    		return Object.keys(inputData).reduce(function (coll, item) {
    			if (item[0] !== '$') {
    				coll[item] = inputData[item];
    			}

    			return coll
    		}, {});
    	},

    	_OLSKObjectInferredType (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return inputData.replace(/\w+ErrorNot/, '').toLowerCase();
    	},

    	OLSKObjectJSONSchema (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			type: 'object',
    			properties: Object.entries(inputData).reduce(function (coll, [key, val]) {
    				coll[key] = {};

    				coll[key].type = mod$3._OLSKObjectInferredType([...val].shift()).replace('filled', 'string');

    				if (coll[key].type === 'date') {
    					coll[key].type = 'string';
    					coll[key].format = 'date-time';
    				}

    				return coll;
    			}, {}),
    			required: Object.entries(inputData).filter(function ([key, val]) {
    				return !val.includes('__RSOptional');
    			}).map(function ([key, val]) {
    				return key;
    			}),
    		};
    	},

    	OLSKObjectRemap (param1, param2, param3 = false) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return Object.entries(param2).reduce(function (coll, item) {
    			if (param3) {
    				item = item.reverse();
    			}
    			
    			return !param1[item[0]] ? coll : Object.assign(coll, {
    				[item[1]]: param1[item[0]],
    			});
    		}, {});
    	},

    	OLSKObjectPostJSONParse (inputData) {
    		if (!inputData) {
    			return inputData;
    		}

    		if (Array.isArray(inputData)) {
    			return inputData.map(mod$3.OLSKObjectPostJSONParse);
    		}

    		for (const key in inputData) {
    			if (key.slice(-4) === 'Date') {
    				inputData[key] = new Date(inputData[key]);
    			} else if (Array.isArray(inputData[key])) {
    				inputData[key].map(mod$3.OLSKObjectPostJSONParse);
    			} else if (typeof inputData[key] === 'object') {
    				mod$3.OLSKObjectPostJSONParse(inputData[key]);
    			}
    		}

    		return inputData;
    	},
    	
    };

    var main_1$2 = createCommonjsModule(function (module, exports) {
    const main = {

    	OLSKServiceWorkerModule (param1, param2, param3, param4) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.keys !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const mod = {

    			// VALUE

    			_ValueSelf: param1,
    			_ValueCaches: param2,
    			_ValueFetch: param3,
    			_ValuePersistenceCacheURLs: [],

    			// DATA

    			_DataVersionCacheName: 'OLSKServiceWorkerVersionCache-VERSION_ID_TOKEN',
    			_DataPersistenceCacheName: 'OLSKServiceWorkerPersistenceCache',
    			_DataOriginPage: 'ORIGIN_PAGE_PATH_TOKEN',

    			// CONTROL

    			async ControlClearCache () {
    				return Promise.all(
    					(await mod._ValueCaches.keys()).filter(function (e) {
    						return e !== mod._DataPersistenceCacheName;
    					}).map(function (e) {
    						return mod._ValueCaches.delete(e);
    					})
    				);
    			},

    			ControlAddPersistenceCacheURL (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				if (mod._ValuePersistenceCacheURLs.includes(inputData)) {
    					return;
    				}

    				mod._ValuePersistenceCacheURLs.push(inputData);
    			},

    			// MESSAGE

    			OLSKServiceWorkerDidActivate (event) {
    				event.waitUntil(mod.ControlClearCache());
    			},

    			async OLSKServiceWorkerDidFetch (event) {
    				if (event.request.method !== 'GET') {
    					return;
    				}

    				if (event.request.url.match('sw.js')) {
    					return;
    				}

    				if (event.request.mode === 'cors' && !mod._ValuePersistenceCacheURLs.includes(event.request.url)) {
    					return;
    				}

    				if (event.request.mode === 'navigate' && !event.request.url.includes(mod._DataOriginPage)) {
    					return;
    				}

    				if (event.request.mode !== 'navigate' && !event.request.referrer.includes(mod._DataOriginPage)) {
    					return;
    				}

    				// if (!(event.request.referrer.match(/ORIGIN_PAGE_PATH_TOKEN/) && event.request.mode === 'no-cors') && !event.request.url.match(/ORIGIN_PAGE_PATH_TOKEN/)) {
    				// 	return console.log('ignoring referrer', event.request);
    				// };

    				return event.respondWith(async function() {
    					const cacheResponse = await mod._ValueCaches.match(event.request);

    					if (cacheResponse) {
    						return cacheResponse;
    					}

    					const networkResponse = param4 ? await fetch(event.request) : await mod._ValueFetch(event.request);

    					if (networkResponse.status === 200) {
    						(await mod._ValueCaches.open(mod._ValuePersistenceCacheURLs.includes(event.request.url) ? mod._DataPersistenceCacheName : mod._DataVersionCacheName)).put(event.request, networkResponse.clone());
    					}

    					return networkResponse;
    				}());
    			},

    			async OLSKServiceWorkerDidReceiveMessage (event) {
    				const OLSKMessageSignature = event.data.OLSKMessageSignature || event.data;

    				if (typeof OLSKMessageSignature !== 'string') {
    					return;
    				}

    				if (!OLSKMessageSignature.startsWith('OLSKServiceWorker_')) {
    					return;
    				}

    				return event.source.postMessage({
    					OLSKMessageSignature,
    					OLSKMessageArguments: event.data.OLSKMessageArguments,
    					OLSKMessageResponse: await mod[OLSKMessageSignature](...[].concat(event.data.OLSKMessageArguments || [])),
    				});
    			},

    			OLSKServiceWorker_ClearVersionCache () {
    				return mod.ControlClearCache();
    			},

    			OLSKServiceWorker_SkipWaiting () {
    				return mod._ValueSelf.skipWaiting();
    			},

    			OLSKServiceWorker_AddPersistenceCacheURL (inputData) {
    				return mod.ControlAddPersistenceCacheURL(inputData);
    			},
    		
    		};
    		
    		return mod;
    	},

    	OLSKServiceWorkerInitialization (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.addEventListener !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'object' || param2 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2.OLSKServiceWorkerDidReceiveMessage !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param1.addEventListener('activate', param2.OLSKServiceWorkerDidActivate);
    		param1.addEventListener('fetch', param2.OLSKServiceWorkerDidFetch);
    		param1.addEventListener('message', param2.OLSKServiceWorkerDidReceiveMessage);
    	},

    	OLSKServiceWorkerViewTemplate () {
    		return `(function() {
			const mod = (function ${ main.OLSKServiceWorkerModule.toString() })(self, caches, fetch, true);

			(function ${ main.OLSKServiceWorkerInitialization.toString() })(self, mod);
		})();`;
    	},

    	OLSKServiceWorkerView (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.VERSION_ID_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.VERSION_ID_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData.VERSION_ID_TOKEN.match(/\s/)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof inputData.ORIGIN_PAGE_PATH_TOKEN !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.ORIGIN_PAGE_PATH_TOKEN) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return main.OLSKServiceWorkerViewTemplate()
    			.split('VERSION_ID_TOKEN').join(inputData.VERSION_ID_TOKEN)
    			.split('ORIGIN_PAGE_PATH_TOKEN').join(inputData.ORIGIN_PAGE_PATH_TOKEN);
    	},

    	OLSKServiceWorkerLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKServiceWorkerLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKServiceWorkerLauncherItemReload (param1, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKServiceWorkerLauncherItemReload',
    			LCHRecipeName: OLSKLocalized('OLSKServiceWorkerLauncherItemReloadText'),
    			LCHRecipeCallback () {
    				return param1.location.reload();
    			},
    		};
    	},

    	OLSKServiceWorkerLauncherItemDebugForceUpdate (param1, param2, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKServiceWorkerLauncherItemDebugForceUpdate',
    			LCHRecipeName: OLSKLocalized('OLSKServiceWorkerLauncherItemDebugForceUpdateText'),
    			async LCHRecipeCallback () {
    				const item = await param2.serviceWorker.getRegistration();

    				if (item.waiting) {
    					return item.waiting.postMessage('OLSKServiceWorker_SkipWaiting');
    				}

    				param2.serviceWorker.controller.postMessage('OLSKServiceWorker_ClearVersionCache');

    				param1.location.reload();
    			},
    		};
    	},

    	OLSKServiceWorkerRecipes (param1, param2, param3, param4) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (!param2.serviceWorker) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param4 !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			main.OLSKServiceWorkerLauncherFakeItemProxy(),
    			main.OLSKServiceWorkerLauncherItemReload(param1, param3),
    			main.OLSKServiceWorkerLauncherItemDebugForceUpdate(param1, param2, param3),
    		].filter(function (e) {
    			if (param4) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},
    	
    };

    Object.assign(exports, main);
    });

    var main$4 = createCommonjsModule(function (module, exports) {
    (function(global, factory) {
    	 factory(exports) ;
    }(commonjsGlobal, (function(exports) {
    	const mod = {

    		OLSKStringFormatted (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			var substitutions = Object.values(arguments).slice(1);

    			if (!substitutions.length) {
    				return inputData;
    			}

    			var formattedString = inputData;

    			(inputData.match(/%@/g) || []).forEach(function(e, i) {
    				formattedString = formattedString.replace(e, substitutions[i]);
    			});

    			mod._OLSKStringAllMatches(/%\$(\d*)@/g, inputData).forEach(function(e) {
    				formattedString = formattedString.replace(e[0], substitutions[e[1] - 1]);
    			});

    			return formattedString;
    		},

    		_OLSKStringAllMatches (regex, string) {
    			var matches = [];

    			var match = regex.exec(string);

    			while (match != null) {
    				matches.push(match);

    				match = regex.exec(string);
    			}

    			return matches;
    		},

    		OLSKStringReplaceTokens (param1, param2) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'object' || param2 === null) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return Object.entries(param2).reduce(function (coll, item) {
    				return coll.replace(new RegExp(item.shift(), 'g'), item.pop());
    			}, param1);
    		},

    		OLSKStringPatch (param1, param2, param3) {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (!param1.includes(param2) && !param1.includes(param3)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (param3.includes(param2)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return param1.split(param2).join(param3);
    		},

    		OLSKStringMatch (param1, param2, param3 = 'includes') {
    			if (typeof param1 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param2 !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			if (typeof param3 !== 'undefined') {
    				if (typeof param3 !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}
    			}

    			// Searching and sorting text with diacritical marks in JavaScript | Thread Engineering https://thread.engineering/2018-08-29-searching-and-sorting-text-with-diacritical-marks-in-javascript/
    			return param2.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '')[param3](param1.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, ''));
    		},

    		OLSKStringSnippet (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return inputData.length <= 100 ? inputData : inputData.slice(0, 100).split(' ').slice(0, -1).join(' ').concat('…');
    		},

    		OLSKStringEncode (inputData) {
    			if (typeof inputData !== 'string') {
    				throw new Error('OLSKErrorInputNotValid');
    			}

    			return mod.OLSKStringReplaceTokens(encodeURIComponent(inputData), {
    				'\\(': '%28',
    				'\\)': '%29',
    			});
    		},

    	};

    	Object.assign(exports, mod);

    	Object.defineProperty(exports, '__esModule', {
    		value: true
    	});

    })));

    {
    	exports.OLSKFormatted = exports.OLSKStringFormatted;
    }
    });

    var OLSKString = unwrapExports(main$4);
    var main_1$3 = main$4.OLSKFormatted;

    const uDescending = function (a, b) {
      return (a > b) ? -1 : ((a < b) ? 1 : 0);
    };

    const mod$4 = {

    	LCHComposeAccessibilitySummary (inputData, OLSKLocalized) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return OLSKString.OLSKStringSnippet(inputData.LCHDocumentName || inputData.LCHDocumentSignature || (inputData.LCHDocumentIsFlagged ? [OLSKLocalized('LCHComposeListItemFlaggedAlertText')] : []).concat(OLSKLocalized('LCHComposeListItemUntitledText')).join(' '));
    	},

    	LCHComposeSortFunction (a, b) {
    		return (function(e) {
    			return uDescending(a[e], b[e]);
    		})(['LCHDocumentModificationDate', 'LCHDocumentCreationDate'].filter(function (e) {
    			return a[e] && b[e];
    		}).shift());
    	},

    	LCHComposeIsMatch (param1, param2) {
    		if (typeof param2 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return [param1.LCHDocumentName, param1.LCHDocumentSignature, param1.LCHDocumentURLFilter].filter(function (e) {
    			if (!e) {
    				return false;
    			}

    			return OLSKString.OLSKStringMatch(param2, e);
    		}).length;
    	},

    	LCHComposeExactSortFunction (needle, a, b) {
    		if (typeof needle !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return ['LCHDocumentName', 'LCHDocumentSignature'].reduce(function (coll, item) {
    			return coll.concat(uDescending(OLSKString.OLSKStringMatch(needle, a[item] || '', 'startsWith'), OLSKString.OLSKStringMatch(needle, b[item] || '', 'startsWith')));
    		}, []).filter(function (e) {
    			return e !== 0;
    		}).shift() || 0;
    	},

    	LCHComposePublicKeyIsValid (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (inputData[0] !== '{') {
    			return false;
    		}

    		if (inputData.slice(-1) !== '}') {
    			return false;
    		}

    		return true;
    	},

    	LBXResponseIsValid (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof inputData.LBXResponseHash !== 'string') {
    			return false;
    		}
    		
    		if (typeof inputData.LBXResponseError !== 'undefined') {
    			if (typeof inputData.LBXResponseError !== 'string') {
    				return false;
    			}

    			if (!inputData.LBXResponseError.trim()) {
    				return false;
    			}
    		}
    		
    		return true;
    	},

    };

    // Reserved word lists for various dialects of the language

    var reservedWords = {
      3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
      5: "class enum extends super const export import",
      6: "enum",
      strict: "implements interface let package private protected public static yield",
      strictBind: "eval arguments"
    };

    // And the keywords

    var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

    var keywords = {
      5: ecma5AndLessKeywords,
      "5module": ecma5AndLessKeywords + " export import",
      6: ecma5AndLessKeywords + " const class extends export import super"
    };

    var keywordRelationalOperator = /^in(stanceof)?$/;

    // ## Character categories

    // Big ugly regular expressions that match characters in the
    // whitespace, identifier, and identifier-start categories. These
    // are only applied when a character is found to actually have a
    // code point above 128.
    // Generated by `bin/generate-identifier-regex.js`.
    var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
    var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

    nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

    // These are a run-length and offset encoded representation of the
    // >0xffff code points that are a valid part of identifiers. The
    // offset starts at 0x10000, and each pair of numbers represents an
    // offset to the next range, and then a size of the range. They were
    // generated by bin/generate-identifier-regex.js

    // eslint-disable-next-line comma-spacing
    var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];

    // eslint-disable-next-line comma-spacing
    var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];

    // This has a complexity linear to the value of the code. The
    // assumption is that looking up astral identifier characters is
    // rare.
    function isInAstralSet(code, set) {
      var pos = 0x10000;
      for (var i = 0; i < set.length; i += 2) {
        pos += set[i];
        if (pos > code) { return false }
        pos += set[i + 1];
        if (pos >= code) { return true }
      }
    }

    // Test whether a given character code starts an identifier.

    function isIdentifierStart(code, astral) {
      if (code < 65) { return code === 36 }
      if (code < 91) { return true }
      if (code < 97) { return code === 95 }
      if (code < 123) { return true }
      if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }
      if (astral === false) { return false }
      return isInAstralSet(code, astralIdentifierStartCodes)
    }

    // Test whether a given character is part of an identifier.

    function isIdentifierChar(code, astral) {
      if (code < 48) { return code === 36 }
      if (code < 58) { return true }
      if (code < 65) { return false }
      if (code < 91) { return true }
      if (code < 97) { return code === 95 }
      if (code < 123) { return true }
      if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }
      if (astral === false) { return false }
      return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
    }

    // ## Token types

    // The assignment of fine-grained, information-carrying type objects
    // allows the tokenizer to store the information it has about a
    // token in a way that is very cheap for the parser to look up.

    // All token type variables start with an underscore, to make them
    // easy to recognize.

    // The `beforeExpr` property is used to disambiguate between regular
    // expressions and divisions. It is set on all token types that can
    // be followed by an expression (thus, a slash after them would be a
    // regular expression).
    //
    // The `startsExpr` property is used to check if the token ends a
    // `yield` expression. It is set on all token types that either can
    // directly start an expression (like a quotation mark) or can
    // continue an expression (like the body of a string).
    //
    // `isLoop` marks a keyword as starting a loop, which is important
    // to know when parsing a label, in order to allow or disallow
    // continue jumps to that label.

    var TokenType = function TokenType(label, conf) {
      if ( conf === void 0 ) conf = {};

      this.label = label;
      this.keyword = conf.keyword;
      this.beforeExpr = !!conf.beforeExpr;
      this.startsExpr = !!conf.startsExpr;
      this.isLoop = !!conf.isLoop;
      this.isAssign = !!conf.isAssign;
      this.prefix = !!conf.prefix;
      this.postfix = !!conf.postfix;
      this.binop = conf.binop || null;
      this.updateContext = null;
    };

    function binop(name, prec) {
      return new TokenType(name, {beforeExpr: true, binop: prec})
    }
    var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};

    // Map keyword names to token types.

    var keywords$1 = {};

    // Succinct definitions of keyword token types
    function kw(name, options) {
      if ( options === void 0 ) options = {};

      options.keyword = name;
      return keywords$1[name] = new TokenType(name, options)
    }

    var types = {
      num: new TokenType("num", startsExpr),
      regexp: new TokenType("regexp", startsExpr),
      string: new TokenType("string", startsExpr),
      name: new TokenType("name", startsExpr),
      eof: new TokenType("eof"),

      // Punctuation token types.
      bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
      bracketR: new TokenType("]"),
      braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
      braceR: new TokenType("}"),
      parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
      parenR: new TokenType(")"),
      comma: new TokenType(",", beforeExpr),
      semi: new TokenType(";", beforeExpr),
      colon: new TokenType(":", beforeExpr),
      dot: new TokenType("."),
      question: new TokenType("?", beforeExpr),
      questionDot: new TokenType("?."),
      arrow: new TokenType("=>", beforeExpr),
      template: new TokenType("template"),
      invalidTemplate: new TokenType("invalidTemplate"),
      ellipsis: new TokenType("...", beforeExpr),
      backQuote: new TokenType("`", startsExpr),
      dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

      // Operators. These carry several kinds of properties to help the
      // parser use them properly (the presence of these properties is
      // what categorizes them as operators).
      //
      // `binop`, when present, specifies that this operator is a binary
      // operator, and will refer to its precedence.
      //
      // `prefix` and `postfix` mark the operator as a prefix or postfix
      // unary operator.
      //
      // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
      // binary operators with a very low precedence, that should result
      // in AssignmentExpression nodes.

      eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
      assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
      incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
      prefix: new TokenType("!/~", {beforeExpr: true, prefix: true, startsExpr: true}),
      logicalOR: binop("||", 1),
      logicalAND: binop("&&", 2),
      bitwiseOR: binop("|", 3),
      bitwiseXOR: binop("^", 4),
      bitwiseAND: binop("&", 5),
      equality: binop("==/!=/===/!==", 6),
      relational: binop("</>/<=/>=", 7),
      bitShift: binop("<</>>/>>>", 8),
      plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
      modulo: binop("%", 10),
      star: binop("*", 10),
      slash: binop("/", 10),
      starstar: new TokenType("**", {beforeExpr: true}),
      coalesce: binop("??", 1),

      // Keyword token types.
      _break: kw("break"),
      _case: kw("case", beforeExpr),
      _catch: kw("catch"),
      _continue: kw("continue"),
      _debugger: kw("debugger"),
      _default: kw("default", beforeExpr),
      _do: kw("do", {isLoop: true, beforeExpr: true}),
      _else: kw("else", beforeExpr),
      _finally: kw("finally"),
      _for: kw("for", {isLoop: true}),
      _function: kw("function", startsExpr),
      _if: kw("if"),
      _return: kw("return", beforeExpr),
      _switch: kw("switch"),
      _throw: kw("throw", beforeExpr),
      _try: kw("try"),
      _var: kw("var"),
      _const: kw("const"),
      _while: kw("while", {isLoop: true}),
      _with: kw("with"),
      _new: kw("new", {beforeExpr: true, startsExpr: true}),
      _this: kw("this", startsExpr),
      _super: kw("super", startsExpr),
      _class: kw("class", startsExpr),
      _extends: kw("extends", beforeExpr),
      _export: kw("export"),
      _import: kw("import", startsExpr),
      _null: kw("null", startsExpr),
      _true: kw("true", startsExpr),
      _false: kw("false", startsExpr),
      _in: kw("in", {beforeExpr: true, binop: 7}),
      _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
      _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
      _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
      _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
    };

    // Matches a whole line break (where CRLF is considered a single
    // line break). Used to count lines.

    var lineBreak = /\r\n?|\n|\u2028|\u2029/;
    var lineBreakG = new RegExp(lineBreak.source, "g");

    function isNewLine(code, ecma2019String) {
      return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))
    }

    var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

    var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

    var ref = Object.prototype;
    var hasOwnProperty = ref.hasOwnProperty;
    var toString = ref.toString;

    // Checks if an object has a property.

    function has(obj, propName) {
      return hasOwnProperty.call(obj, propName)
    }

    var isArray = Array.isArray || (function (obj) { return (
      toString.call(obj) === "[object Array]"
    ); });

    function wordsRegexp(words) {
      return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$")
    }

    // These are used when `options.locations` is on, for the
    // `startLoc` and `endLoc` properties.

    var Position = function Position(line, col) {
      this.line = line;
      this.column = col;
    };

    Position.prototype.offset = function offset (n) {
      return new Position(this.line, this.column + n)
    };

    var SourceLocation = function SourceLocation(p, start, end) {
      this.start = start;
      this.end = end;
      if (p.sourceFile !== null) { this.source = p.sourceFile; }
    };

    // The `getLineInfo` function is mostly useful when the
    // `locations` option is off (for performance reasons) and you
    // want to find the line/column position for a given character
    // offset. `input` should be the code string that the offset refers
    // into.

    function getLineInfo(input, offset) {
      for (var line = 1, cur = 0;;) {
        lineBreakG.lastIndex = cur;
        var match = lineBreakG.exec(input);
        if (match && match.index < offset) {
          ++line;
          cur = match.index + match[0].length;
        } else {
          return new Position(line, offset - cur)
        }
      }
    }

    // A second optional argument can be given to further configure
    // the parser process. These options are recognized:

    var defaultOptions = {
      // `ecmaVersion` indicates the ECMAScript version to parse. Must be
      // either 3, 5, 6 (2015), 7 (2016), 8 (2017), 9 (2018), or 10
      // (2019). This influences support for strict mode, the set of
      // reserved words, and support for new syntax features. The default
      // is 10.
      ecmaVersion: 10,
      // `sourceType` indicates the mode the code should be parsed in.
      // Can be either `"script"` or `"module"`. This influences global
      // strict mode and parsing of `import` and `export` declarations.
      sourceType: "script",
      // `onInsertedSemicolon` can be a callback that will be called
      // when a semicolon is automatically inserted. It will be passed
      // the position of the comma as an offset, and if `locations` is
      // enabled, it is given the location as a `{line, column}` object
      // as second argument.
      onInsertedSemicolon: null,
      // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
      // trailing commas.
      onTrailingComma: null,
      // By default, reserved words are only enforced if ecmaVersion >= 5.
      // Set `allowReserved` to a boolean value to explicitly turn this on
      // an off. When this option has the value "never", reserved words
      // and keywords can also not be used as property names.
      allowReserved: null,
      // When enabled, a return at the top level is not considered an
      // error.
      allowReturnOutsideFunction: false,
      // When enabled, import/export statements are not constrained to
      // appearing at the top of the program.
      allowImportExportEverywhere: false,
      // When enabled, await identifiers are allowed to appear at the top-level scope,
      // but they are still not allowed in non-async functions.
      allowAwaitOutsideFunction: false,
      // When enabled, hashbang directive in the beginning of file
      // is allowed and treated as a line comment.
      allowHashBang: false,
      // When `locations` is on, `loc` properties holding objects with
      // `start` and `end` properties in `{line, column}` form (with
      // line being 1-based and column 0-based) will be attached to the
      // nodes.
      locations: false,
      // A function can be passed as `onToken` option, which will
      // cause Acorn to call that function with object in the same
      // format as tokens returned from `tokenizer().getToken()`. Note
      // that you are not allowed to call the parser from the
      // callback—that will corrupt its internal state.
      onToken: null,
      // A function can be passed as `onComment` option, which will
      // cause Acorn to call that function with `(block, text, start,
      // end)` parameters whenever a comment is skipped. `block` is a
      // boolean indicating whether this is a block (`/* */`) comment,
      // `text` is the content of the comment, and `start` and `end` are
      // character offsets that denote the start and end of the comment.
      // When the `locations` option is on, two more parameters are
      // passed, the full `{line, column}` locations of the start and
      // end of the comments. Note that you are not allowed to call the
      // parser from the callback—that will corrupt its internal state.
      onComment: null,
      // Nodes have their start and end characters offsets recorded in
      // `start` and `end` properties (directly on the node, rather than
      // the `loc` object, which holds line/column data. To also add a
      // [semi-standardized][range] `range` property holding a `[start,
      // end]` array with the same numbers, set the `ranges` option to
      // `true`.
      //
      // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
      ranges: false,
      // It is possible to parse multiple files into a single AST by
      // passing the tree produced by parsing the first file as
      // `program` option in subsequent parses. This will add the
      // toplevel forms of the parsed file to the `Program` (top) node
      // of an existing parse tree.
      program: null,
      // When `locations` is on, you can pass this to record the source
      // file in every node's `loc` object.
      sourceFile: null,
      // This value, if given, is stored in every node, whether
      // `locations` is on or off.
      directSourceFile: null,
      // When enabled, parenthesized expressions are represented by
      // (non-standard) ParenthesizedExpression nodes
      preserveParens: false
    };

    // Interpret and default an options object

    function getOptions(opts) {
      var options = {};

      for (var opt in defaultOptions)
        { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }

      if (options.ecmaVersion >= 2015)
        { options.ecmaVersion -= 2009; }

      if (options.allowReserved == null)
        { options.allowReserved = options.ecmaVersion < 5; }

      if (isArray(options.onToken)) {
        var tokens = options.onToken;
        options.onToken = function (token) { return tokens.push(token); };
      }
      if (isArray(options.onComment))
        { options.onComment = pushComment(options, options.onComment); }

      return options
    }

    function pushComment(options, array) {
      return function(block, text, start, end, startLoc, endLoc) {
        var comment = {
          type: block ? "Block" : "Line",
          value: text,
          start: start,
          end: end
        };
        if (options.locations)
          { comment.loc = new SourceLocation(this, startLoc, endLoc); }
        if (options.ranges)
          { comment.range = [start, end]; }
        array.push(comment);
      }
    }

    // Each scope gets a bitset that may contain these flags
    var
        SCOPE_TOP = 1,
        SCOPE_FUNCTION = 2,
        SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
        SCOPE_ASYNC = 4,
        SCOPE_GENERATOR = 8,
        SCOPE_ARROW = 16,
        SCOPE_SIMPLE_CATCH = 32,
        SCOPE_SUPER = 64,
        SCOPE_DIRECT_SUPER = 128;

    function functionFlags(async, generator) {
      return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)
    }

    // Used in checkLVal and declareName to determine the type of a binding
    var
        BIND_NONE = 0, // Not a binding
        BIND_VAR = 1, // Var-style binding
        BIND_LEXICAL = 2, // Let- or const-style binding
        BIND_FUNCTION = 3, // Function declaration
        BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding
        BIND_OUTSIDE = 5; // Special case for function names as bound inside the function

    var Parser = function Parser(options, input, startPos) {
      this.options = options = getOptions(options);
      this.sourceFile = options.sourceFile;
      this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
      var reserved = "";
      if (options.allowReserved !== true) {
        for (var v = options.ecmaVersion;; v--)
          { if (reserved = reservedWords[v]) { break } }
        if (options.sourceType === "module") { reserved += " await"; }
      }
      this.reservedWords = wordsRegexp(reserved);
      var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
      this.reservedWordsStrict = wordsRegexp(reservedStrict);
      this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
      this.input = String(input);

      // Used to signal to callers of `readWord1` whether the word
      // contained any escape sequences. This is needed because words with
      // escape sequences must not be interpreted as keywords.
      this.containsEsc = false;

      // Set up token state

      // The current position of the tokenizer in the input.
      if (startPos) {
        this.pos = startPos;
        this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
        this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
      } else {
        this.pos = this.lineStart = 0;
        this.curLine = 1;
      }

      // Properties of the current token:
      // Its type
      this.type = types.eof;
      // For tokens that include more information than their type, the value
      this.value = null;
      // Its start and end offset
      this.start = this.end = this.pos;
      // And, if locations are used, the {line, column} object
      // corresponding to those offsets
      this.startLoc = this.endLoc = this.curPosition();

      // Position information for the previous token
      this.lastTokEndLoc = this.lastTokStartLoc = null;
      this.lastTokStart = this.lastTokEnd = this.pos;

      // The context stack is used to superficially track syntactic
      // context to predict whether a regular expression is allowed in a
      // given position.
      this.context = this.initialContext();
      this.exprAllowed = true;

      // Figure out if it's a module code.
      this.inModule = options.sourceType === "module";
      this.strict = this.inModule || this.strictDirective(this.pos);

      // Used to signify the start of a potential arrow function
      this.potentialArrowAt = -1;

      // Positions to delayed-check that yield/await does not exist in default parameters.
      this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
      // Labels in scope.
      this.labels = [];
      // Thus-far undefined exports.
      this.undefinedExports = {};

      // If enabled, skip leading hashbang line.
      if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!")
        { this.skipLineComment(2); }

      // Scope tracking for duplicate variable names (see scope.js)
      this.scopeStack = [];
      this.enterScope(SCOPE_TOP);

      // For RegExp validation
      this.regexpState = null;
    };

    var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true } };

    Parser.prototype.parse = function parse () {
      var node = this.options.program || this.startNode();
      this.nextToken();
      return this.parseTopLevel(node)
    };

    prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };
    prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 };
    prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 };
    prototypeAccessors.allowSuper.get = function () { return (this.currentThisScope().flags & SCOPE_SUPER) > 0 };
    prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };
    prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };

    // Switch to a getter for 7.0.0.
    Parser.prototype.inNonArrowFunction = function inNonArrowFunction () { return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0 };

    Parser.extend = function extend () {
        var plugins = [], len = arguments.length;
        while ( len-- ) plugins[ len ] = arguments[ len ];

      var cls = this;
      for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }
      return cls
    };

    Parser.parse = function parse (input, options) {
      return new this(options, input).parse()
    };

    Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {
      var parser = new this(options, input, pos);
      parser.nextToken();
      return parser.parseExpression()
    };

    Parser.tokenizer = function tokenizer (input, options) {
      return new this(options, input)
    };

    Object.defineProperties( Parser.prototype, prototypeAccessors );

    var pp = Parser.prototype;

    // ## Parser utilities

    var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
    pp.strictDirective = function(start) {
      for (;;) {
        // Try to find string literal.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        var match = literal.exec(this.input.slice(start));
        if (!match) { return false }
        if ((match[1] || match[2]) === "use strict") {
          skipWhiteSpace.lastIndex = start + match[0].length;
          var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
          var next = this.input.charAt(end);
          return next === ";" || next === "}" ||
            (lineBreak.test(spaceAfter[0]) &&
             !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "="))
        }
        start += match[0].length;

        // Skip semicolon, if any.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        if (this.input[start] === ";")
          { start++; }
      }
    };

    // Predicate that tests whether the next token is of the given
    // type, and if yes, consumes it as a side effect.

    pp.eat = function(type) {
      if (this.type === type) {
        this.next();
        return true
      } else {
        return false
      }
    };

    // Tests whether parsed token is a contextual keyword.

    pp.isContextual = function(name) {
      return this.type === types.name && this.value === name && !this.containsEsc
    };

    // Consumes contextual keyword if possible.

    pp.eatContextual = function(name) {
      if (!this.isContextual(name)) { return false }
      this.next();
      return true
    };

    // Asserts that following token is given contextual keyword.

    pp.expectContextual = function(name) {
      if (!this.eatContextual(name)) { this.unexpected(); }
    };

    // Test whether a semicolon can be inserted at the current position.

    pp.canInsertSemicolon = function() {
      return this.type === types.eof ||
        this.type === types.braceR ||
        lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    };

    pp.insertSemicolon = function() {
      if (this.canInsertSemicolon()) {
        if (this.options.onInsertedSemicolon)
          { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }
        return true
      }
    };

    // Consume a semicolon, or, failing that, see if we are allowed to
    // pretend that there is a semicolon at this position.

    pp.semicolon = function() {
      if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }
    };

    pp.afterTrailingComma = function(tokType, notNext) {
      if (this.type === tokType) {
        if (this.options.onTrailingComma)
          { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }
        if (!notNext)
          { this.next(); }
        return true
      }
    };

    // Expect a token of a given type. If found, consume it, otherwise,
    // raise an unexpected token error.

    pp.expect = function(type) {
      this.eat(type) || this.unexpected();
    };

    // Raise an unexpected token error.

    pp.unexpected = function(pos) {
      this.raise(pos != null ? pos : this.start, "Unexpected token");
    };

    function DestructuringErrors() {
      this.shorthandAssign =
      this.trailingComma =
      this.parenthesizedAssign =
      this.parenthesizedBind =
      this.doubleProto =
        -1;
    }

    pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
      if (!refDestructuringErrors) { return }
      if (refDestructuringErrors.trailingComma > -1)
        { this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element"); }
      var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
      if (parens > -1) { this.raiseRecoverable(parens, "Parenthesized pattern"); }
    };

    pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
      if (!refDestructuringErrors) { return false }
      var shorthandAssign = refDestructuringErrors.shorthandAssign;
      var doubleProto = refDestructuringErrors.doubleProto;
      if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }
      if (shorthandAssign >= 0)
        { this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"); }
      if (doubleProto >= 0)
        { this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property"); }
    };

    pp.checkYieldAwaitInDefaultParams = function() {
      if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
        { this.raise(this.yieldPos, "Yield expression cannot be a default value"); }
      if (this.awaitPos)
        { this.raise(this.awaitPos, "Await expression cannot be a default value"); }
    };

    pp.isSimpleAssignTarget = function(expr) {
      if (expr.type === "ParenthesizedExpression")
        { return this.isSimpleAssignTarget(expr.expression) }
      return expr.type === "Identifier" || expr.type === "MemberExpression"
    };

    var pp$1 = Parser.prototype;

    // ### Statement parsing

    // Parse a program. Initializes the parser, reads any number of
    // statements, and wraps them in a Program node.  Optionally takes a
    // `program` argument.  If present, the statements will be appended
    // to its body instead of creating a new node.

    pp$1.parseTopLevel = function(node) {
      var exports = {};
      if (!node.body) { node.body = []; }
      while (this.type !== types.eof) {
        var stmt = this.parseStatement(null, true, exports);
        node.body.push(stmt);
      }
      if (this.inModule)
        { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)
          {
            var name = list[i];

            this.raiseRecoverable(this.undefinedExports[name].start, ("Export '" + name + "' is not defined"));
          } }
      this.adaptDirectivePrologue(node.body);
      this.next();
      node.sourceType = this.options.sourceType;
      return this.finishNode(node, "Program")
    };

    var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

    pp$1.isLet = function(context) {
      if (this.options.ecmaVersion < 6 || !this.isContextual("let")) { return false }
      skipWhiteSpace.lastIndex = this.pos;
      var skip = skipWhiteSpace.exec(this.input);
      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
      // For ambiguous cases, determine if a LexicalDeclaration (or only a
      // Statement) is allowed here. If context is not empty then only a Statement
      // is allowed. However, `let [` is an explicit negative lookahead for
      // ExpressionStatement, so special-case it first.
      if (nextCh === 91) { return true } // '['
      if (context) { return false }

      if (nextCh === 123) { return true } // '{'
      if (isIdentifierStart(nextCh, true)) {
        var pos = next + 1;
        while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }
        var ident = this.input.slice(next, pos);
        if (!keywordRelationalOperator.test(ident)) { return true }
      }
      return false
    };

    // check 'async [no LineTerminator here] function'
    // - 'async /*foo*/ function' is OK.
    // - 'async /*\n*/ function' is invalid.
    pp$1.isAsyncFunction = function() {
      if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
        { return false }

      skipWhiteSpace.lastIndex = this.pos;
      var skip = skipWhiteSpace.exec(this.input);
      var next = this.pos + skip[0].length;
      return !lineBreak.test(this.input.slice(this.pos, next)) &&
        this.input.slice(next, next + 8) === "function" &&
        (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
    };

    // Parse a single statement.
    //
    // If expecting a statement and finding a slash operator, parse a
    // regular expression literal. This is to handle cases like
    // `if (foo) /blah/.exec(foo)`, where looking at the previous token
    // does not help.

    pp$1.parseStatement = function(context, topLevel, exports) {
      var starttype = this.type, node = this.startNode(), kind;

      if (this.isLet(context)) {
        starttype = types._var;
        kind = "let";
      }

      // Most types of statements are recognized by the keyword they
      // start with. Many are trivial to parse, some require a bit of
      // complexity.

      switch (starttype) {
      case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
      case types._debugger: return this.parseDebuggerStatement(node)
      case types._do: return this.parseDoStatement(node)
      case types._for: return this.parseForStatement(node)
      case types._function:
        // Function as sole body of either an if statement or a labeled statement
        // works, but not when it is part of a labeled statement that is the sole
        // body of an if statement.
        if ((context && (this.strict || context !== "if" && context !== "label")) && this.options.ecmaVersion >= 6) { this.unexpected(); }
        return this.parseFunctionStatement(node, false, !context)
      case types._class:
        if (context) { this.unexpected(); }
        return this.parseClass(node, true)
      case types._if: return this.parseIfStatement(node)
      case types._return: return this.parseReturnStatement(node)
      case types._switch: return this.parseSwitchStatement(node)
      case types._throw: return this.parseThrowStatement(node)
      case types._try: return this.parseTryStatement(node)
      case types._const: case types._var:
        kind = kind || this.value;
        if (context && kind !== "var") { this.unexpected(); }
        return this.parseVarStatement(node, kind)
      case types._while: return this.parseWhileStatement(node)
      case types._with: return this.parseWithStatement(node)
      case types.braceL: return this.parseBlock(true, node)
      case types.semi: return this.parseEmptyStatement(node)
      case types._export:
      case types._import:
        if (this.options.ecmaVersion > 10 && starttype === types._import) {
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (nextCh === 40 || nextCh === 46) // '(' or '.'
            { return this.parseExpressionStatement(node, this.parseExpression()) }
        }

        if (!this.options.allowImportExportEverywhere) {
          if (!topLevel)
            { this.raise(this.start, "'import' and 'export' may only appear at the top level"); }
          if (!this.inModule)
            { this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'"); }
        }
        return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)

        // If the statement does not start with a statement keyword or a
        // brace, it's an ExpressionStatement or LabeledStatement. We
        // simply start parsing an expression, and afterwards, if the
        // next token is a colon and the expression was a simple
        // Identifier node, we switch to interpreting it as a label.
      default:
        if (this.isAsyncFunction()) {
          if (context) { this.unexpected(); }
          this.next();
          return this.parseFunctionStatement(node, true, !context)
        }

        var maybeName = this.value, expr = this.parseExpression();
        if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon))
          { return this.parseLabeledStatement(node, maybeName, expr, context) }
        else { return this.parseExpressionStatement(node, expr) }
      }
    };

    pp$1.parseBreakContinueStatement = function(node, keyword) {
      var isBreak = keyword === "break";
      this.next();
      if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }
      else if (this.type !== types.name) { this.unexpected(); }
      else {
        node.label = this.parseIdent();
        this.semicolon();
      }

      // Verify that there is an actual destination to break or
      // continue to.
      var i = 0;
      for (; i < this.labels.length; ++i) {
        var lab = this.labels[i];
        if (node.label == null || lab.name === node.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === "loop")) { break }
          if (node.label && isBreak) { break }
        }
      }
      if (i === this.labels.length) { this.raise(node.start, "Unsyntactic " + keyword); }
      return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
    };

    pp$1.parseDebuggerStatement = function(node) {
      this.next();
      this.semicolon();
      return this.finishNode(node, "DebuggerStatement")
    };

    pp$1.parseDoStatement = function(node) {
      this.next();
      this.labels.push(loopLabel);
      node.body = this.parseStatement("do");
      this.labels.pop();
      this.expect(types._while);
      node.test = this.parseParenExpression();
      if (this.options.ecmaVersion >= 6)
        { this.eat(types.semi); }
      else
        { this.semicolon(); }
      return this.finishNode(node, "DoWhileStatement")
    };

    // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
    // loop is non-trivial. Basically, we have to parse the init `var`
    // statement or expression, disallowing the `in` operator (see
    // the second parameter to `parseExpression`), and then check
    // whether the next token is `in` or `of`. When there is no init
    // part (semicolon immediately after the opening parenthesis), it
    // is a regular `for` loop.

    pp$1.parseForStatement = function(node) {
      this.next();
      var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual("await")) ? this.lastTokStart : -1;
      this.labels.push(loopLabel);
      this.enterScope(0);
      this.expect(types.parenL);
      if (this.type === types.semi) {
        if (awaitAt > -1) { this.unexpected(awaitAt); }
        return this.parseFor(node, null)
      }
      var isLet = this.isLet();
      if (this.type === types._var || this.type === types._const || isLet) {
        var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
        this.next();
        this.parseVar(init$1, true, kind);
        this.finishNode(init$1, "VariableDeclaration");
        if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types._in) {
              if (awaitAt > -1) { this.unexpected(awaitAt); }
            } else { node.await = awaitAt > -1; }
          }
          return this.parseForIn(node, init$1)
        }
        if (awaitAt > -1) { this.unexpected(awaitAt); }
        return this.parseFor(node, init$1)
      }
      var refDestructuringErrors = new DestructuringErrors;
      var init = this.parseExpression(true, refDestructuringErrors);
      if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
        if (this.options.ecmaVersion >= 9) {
          if (this.type === types._in) {
            if (awaitAt > -1) { this.unexpected(awaitAt); }
          } else { node.await = awaitAt > -1; }
        }
        this.toAssignable(init, false, refDestructuringErrors);
        this.checkLVal(init);
        return this.parseForIn(node, init)
      } else {
        this.checkExpressionErrors(refDestructuringErrors, true);
      }
      if (awaitAt > -1) { this.unexpected(awaitAt); }
      return this.parseFor(node, init)
    };

    pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
      this.next();
      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)
    };

    pp$1.parseIfStatement = function(node) {
      this.next();
      node.test = this.parseParenExpression();
      // allow function declarations in branches, but only in non-strict mode
      node.consequent = this.parseStatement("if");
      node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
      return this.finishNode(node, "IfStatement")
    };

    pp$1.parseReturnStatement = function(node) {
      if (!this.inFunction && !this.options.allowReturnOutsideFunction)
        { this.raise(this.start, "'return' outside of function"); }
      this.next();

      // In `return` (and `break`/`continue`), the keywords with
      // optional arguments, we eagerly look for a semicolon or the
      // possibility to insert one.

      if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }
      else { node.argument = this.parseExpression(); this.semicolon(); }
      return this.finishNode(node, "ReturnStatement")
    };

    pp$1.parseSwitchStatement = function(node) {
      this.next();
      node.discriminant = this.parseParenExpression();
      node.cases = [];
      this.expect(types.braceL);
      this.labels.push(switchLabel);
      this.enterScope(0);

      // Statements under must be grouped (by label) in SwitchCase
      // nodes. `cur` is used to keep the node that we are currently
      // adding statements to.

      var cur;
      for (var sawDefault = false; this.type !== types.braceR;) {
        if (this.type === types._case || this.type === types._default) {
          var isCase = this.type === types._case;
          if (cur) { this.finishNode(cur, "SwitchCase"); }
          node.cases.push(cur = this.startNode());
          cur.consequent = [];
          this.next();
          if (isCase) {
            cur.test = this.parseExpression();
          } else {
            if (sawDefault) { this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"); }
            sawDefault = true;
            cur.test = null;
          }
          this.expect(types.colon);
        } else {
          if (!cur) { this.unexpected(); }
          cur.consequent.push(this.parseStatement(null));
        }
      }
      this.exitScope();
      if (cur) { this.finishNode(cur, "SwitchCase"); }
      this.next(); // Closing brace
      this.labels.pop();
      return this.finishNode(node, "SwitchStatement")
    };

    pp$1.parseThrowStatement = function(node) {
      this.next();
      if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
        { this.raise(this.lastTokEnd, "Illegal newline after throw"); }
      node.argument = this.parseExpression();
      this.semicolon();
      return this.finishNode(node, "ThrowStatement")
    };

    // Reused empty array added for node fields that are always empty.

    var empty$1 = [];

    pp$1.parseTryStatement = function(node) {
      this.next();
      node.block = this.parseBlock();
      node.handler = null;
      if (this.type === types._catch) {
        var clause = this.startNode();
        this.next();
        if (this.eat(types.parenL)) {
          clause.param = this.parseBindingAtom();
          var simple = clause.param.type === "Identifier";
          this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
          this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
          this.expect(types.parenR);
        } else {
          if (this.options.ecmaVersion < 10) { this.unexpected(); }
          clause.param = null;
          this.enterScope(0);
        }
        clause.body = this.parseBlock(false);
        this.exitScope();
        node.handler = this.finishNode(clause, "CatchClause");
      }
      node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
      if (!node.handler && !node.finalizer)
        { this.raise(node.start, "Missing catch or finally clause"); }
      return this.finishNode(node, "TryStatement")
    };

    pp$1.parseVarStatement = function(node, kind) {
      this.next();
      this.parseVar(node, false, kind);
      this.semicolon();
      return this.finishNode(node, "VariableDeclaration")
    };

    pp$1.parseWhileStatement = function(node) {
      this.next();
      node.test = this.parseParenExpression();
      this.labels.push(loopLabel);
      node.body = this.parseStatement("while");
      this.labels.pop();
      return this.finishNode(node, "WhileStatement")
    };

    pp$1.parseWithStatement = function(node) {
      if (this.strict) { this.raise(this.start, "'with' in strict mode"); }
      this.next();
      node.object = this.parseParenExpression();
      node.body = this.parseStatement("with");
      return this.finishNode(node, "WithStatement")
    };

    pp$1.parseEmptyStatement = function(node) {
      this.next();
      return this.finishNode(node, "EmptyStatement")
    };

    pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
      for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)
        {
        var label = list[i$1];

        if (label.name === maybeName)
          { this.raise(expr.start, "Label '" + maybeName + "' is already declared");
      } }
      var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
      for (var i = this.labels.length - 1; i >= 0; i--) {
        var label$1 = this.labels[i];
        if (label$1.statementStart === node.start) {
          // Update information about previous labels on this node
          label$1.statementStart = this.start;
          label$1.kind = kind;
        } else { break }
      }
      this.labels.push({name: maybeName, kind: kind, statementStart: this.start});
      node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
      this.labels.pop();
      node.label = expr;
      return this.finishNode(node, "LabeledStatement")
    };

    pp$1.parseExpressionStatement = function(node, expr) {
      node.expression = expr;
      this.semicolon();
      return this.finishNode(node, "ExpressionStatement")
    };

    // Parse a semicolon-enclosed block of statements, handling `"use
    // strict"` declarations when `allowStrict` is true (used for
    // function bodies).

    pp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {
      if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;
      if ( node === void 0 ) node = this.startNode();

      node.body = [];
      this.expect(types.braceL);
      if (createNewLexicalScope) { this.enterScope(0); }
      while (this.type !== types.braceR) {
        var stmt = this.parseStatement(null);
        node.body.push(stmt);
      }
      if (exitStrict) { this.strict = false; }
      this.next();
      if (createNewLexicalScope) { this.exitScope(); }
      return this.finishNode(node, "BlockStatement")
    };

    // Parse a regular `for` loop. The disambiguation code in
    // `parseStatement` will already have parsed the init statement or
    // expression.

    pp$1.parseFor = function(node, init) {
      node.init = init;
      this.expect(types.semi);
      node.test = this.type === types.semi ? null : this.parseExpression();
      this.expect(types.semi);
      node.update = this.type === types.parenR ? null : this.parseExpression();
      this.expect(types.parenR);
      node.body = this.parseStatement("for");
      this.exitScope();
      this.labels.pop();
      return this.finishNode(node, "ForStatement")
    };

    // Parse a `for`/`in` and `for`/`of` loop, which are almost
    // same from parser's perspective.

    pp$1.parseForIn = function(node, init) {
      var isForIn = this.type === types._in;
      this.next();

      if (
        init.type === "VariableDeclaration" &&
        init.declarations[0].init != null &&
        (
          !isForIn ||
          this.options.ecmaVersion < 8 ||
          this.strict ||
          init.kind !== "var" ||
          init.declarations[0].id.type !== "Identifier"
        )
      ) {
        this.raise(
          init.start,
          ((isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer")
        );
      } else if (init.type === "AssignmentPattern") {
        this.raise(init.start, "Invalid left-hand side in for-loop");
      }
      node.left = init;
      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
      this.expect(types.parenR);
      node.body = this.parseStatement("for");
      this.exitScope();
      this.labels.pop();
      return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement")
    };

    // Parse a list of variable declarations.

    pp$1.parseVar = function(node, isFor, kind) {
      node.declarations = [];
      node.kind = kind;
      for (;;) {
        var decl = this.startNode();
        this.parseVarId(decl, kind);
        if (this.eat(types.eq)) {
          decl.init = this.parseMaybeAssign(isFor);
        } else if (kind === "const" && !(this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual("of")))) {
          this.unexpected();
        } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
          this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
        } else {
          decl.init = null;
        }
        node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(types.comma)) { break }
      }
      return node
    };

    pp$1.parseVarId = function(decl, kind) {
      decl.id = this.parseBindingAtom();
      this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
    };

    var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;

    // Parse a function declaration or literal (depending on the
    // `statement & FUNC_STATEMENT`).

    // Remove `allowExpressionBody` for 7.0.0, as it is only called with false
    pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
      this.initFunction(node);
      if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
        if (this.type === types.star && (statement & FUNC_HANGING_STATEMENT))
          { this.unexpected(); }
        node.generator = this.eat(types.star);
      }
      if (this.options.ecmaVersion >= 8)
        { node.async = !!isAsync; }

      if (statement & FUNC_STATEMENT) {
        node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types.name ? null : this.parseIdent();
        if (node.id && !(statement & FUNC_HANGING_STATEMENT))
          // If it is a regular function declaration in sloppy mode, then it is
          // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding
          // mode depends on properties of the current scope (see
          // treatFunctionsAsVar).
          { this.checkLVal(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }
      }

      var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      this.enterScope(functionFlags(node.async, node.generator));

      if (!(statement & FUNC_STATEMENT))
        { node.id = this.type === types.name ? this.parseIdent() : null; }

      this.parseFunctionParams(node);
      this.parseFunctionBody(node, allowExpressionBody, false);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, (statement & FUNC_STATEMENT) ? "FunctionDeclaration" : "FunctionExpression")
    };

    pp$1.parseFunctionParams = function(node) {
      this.expect(types.parenL);
      node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
      this.checkYieldAwaitInDefaultParams();
    };

    // Parse a class declaration or literal (depending on the
    // `isStatement` parameter).

    pp$1.parseClass = function(node, isStatement) {
      this.next();

      // ecma-262 14.6 Class Definitions
      // A class definition is always strict mode code.
      var oldStrict = this.strict;
      this.strict = true;

      this.parseClassId(node, isStatement);
      this.parseClassSuper(node);
      var classBody = this.startNode();
      var hadConstructor = false;
      classBody.body = [];
      this.expect(types.braceL);
      while (this.type !== types.braceR) {
        var element = this.parseClassElement(node.superClass !== null);
        if (element) {
          classBody.body.push(element);
          if (element.type === "MethodDefinition" && element.kind === "constructor") {
            if (hadConstructor) { this.raise(element.start, "Duplicate constructor in the same class"); }
            hadConstructor = true;
          }
        }
      }
      this.strict = oldStrict;
      this.next();
      node.body = this.finishNode(classBody, "ClassBody");
      return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
    };

    pp$1.parseClassElement = function(constructorAllowsSuper) {
      var this$1 = this;

      if (this.eat(types.semi)) { return null }

      var method = this.startNode();
      var tryContextual = function (k, noLineBreak) {
        if ( noLineBreak === void 0 ) noLineBreak = false;

        var start = this$1.start, startLoc = this$1.startLoc;
        if (!this$1.eatContextual(k)) { return false }
        if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }
        if (method.key) { this$1.unexpected(); }
        method.computed = false;
        method.key = this$1.startNodeAt(start, startLoc);
        method.key.name = k;
        this$1.finishNode(method.key, "Identifier");
        return false
      };

      method.kind = "method";
      method.static = tryContextual("static");
      var isGenerator = this.eat(types.star);
      var isAsync = false;
      if (!isGenerator) {
        if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
        } else if (tryContextual("get")) {
          method.kind = "get";
        } else if (tryContextual("set")) {
          method.kind = "set";
        }
      }
      if (!method.key) { this.parsePropertyName(method); }
      var key = method.key;
      var allowsDirectSuper = false;
      if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" ||
          key.type === "Literal" && key.value === "constructor")) {
        if (method.kind !== "method") { this.raise(key.start, "Constructor can't have get/set modifier"); }
        if (isGenerator) { this.raise(key.start, "Constructor can't be a generator"); }
        if (isAsync) { this.raise(key.start, "Constructor can't be an async method"); }
        method.kind = "constructor";
        allowsDirectSuper = constructorAllowsSuper;
      } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
        this.raise(key.start, "Classes may not have a static property named prototype");
      }
      this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
      if (method.kind === "get" && method.value.params.length !== 0)
        { this.raiseRecoverable(method.value.start, "getter should have no params"); }
      if (method.kind === "set" && method.value.params.length !== 1)
        { this.raiseRecoverable(method.value.start, "setter should have exactly one param"); }
      if (method.kind === "set" && method.value.params[0].type === "RestElement")
        { this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params"); }
      return method
    };

    pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
      method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
      return this.finishNode(method, "MethodDefinition")
    };

    pp$1.parseClassId = function(node, isStatement) {
      if (this.type === types.name) {
        node.id = this.parseIdent();
        if (isStatement)
          { this.checkLVal(node.id, BIND_LEXICAL, false); }
      } else {
        if (isStatement === true)
          { this.unexpected(); }
        node.id = null;
      }
    };

    pp$1.parseClassSuper = function(node) {
      node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
    };

    // Parses module export declaration.

    pp$1.parseExport = function(node, exports) {
      this.next();
      // export * from '...'
      if (this.eat(types.star)) {
        if (this.options.ecmaVersion >= 11) {
          if (this.eatContextual("as")) {
            node.exported = this.parseIdent(true);
            this.checkExport(exports, node.exported.name, this.lastTokStart);
          } else {
            node.exported = null;
          }
        }
        this.expectContextual("from");
        if (this.type !== types.string) { this.unexpected(); }
        node.source = this.parseExprAtom();
        this.semicolon();
        return this.finishNode(node, "ExportAllDeclaration")
      }
      if (this.eat(types._default)) { // export default ...
        this.checkExport(exports, "default", this.lastTokStart);
        var isAsync;
        if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          this.next();
          if (isAsync) { this.next(); }
          node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
        } else if (this.type === types._class) {
          var cNode = this.startNode();
          node.declaration = this.parseClass(cNode, "nullableID");
        } else {
          node.declaration = this.parseMaybeAssign();
          this.semicolon();
        }
        return this.finishNode(node, "ExportDefaultDeclaration")
      }
      // export var|const|let|function|class ...
      if (this.shouldParseExportStatement()) {
        node.declaration = this.parseStatement(null);
        if (node.declaration.type === "VariableDeclaration")
          { this.checkVariableExport(exports, node.declaration.declarations); }
        else
          { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }
        node.specifiers = [];
        node.source = null;
      } else { // export { x, y as z } [from '...']
        node.declaration = null;
        node.specifiers = this.parseExportSpecifiers(exports);
        if (this.eatContextual("from")) {
          if (this.type !== types.string) { this.unexpected(); }
          node.source = this.parseExprAtom();
        } else {
          for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
            // check for keywords used as local names
            var spec = list[i];

            this.checkUnreserved(spec.local);
            // check if export is defined
            this.checkLocalExport(spec.local);
          }

          node.source = null;
        }
        this.semicolon();
      }
      return this.finishNode(node, "ExportNamedDeclaration")
    };

    pp$1.checkExport = function(exports, name, pos) {
      if (!exports) { return }
      if (has(exports, name))
        { this.raiseRecoverable(pos, "Duplicate export '" + name + "'"); }
      exports[name] = true;
    };

    pp$1.checkPatternExport = function(exports, pat) {
      var type = pat.type;
      if (type === "Identifier")
        { this.checkExport(exports, pat.name, pat.start); }
      else if (type === "ObjectPattern")
        { for (var i = 0, list = pat.properties; i < list.length; i += 1)
          {
            var prop = list[i];

            this.checkPatternExport(exports, prop);
          } }
      else if (type === "ArrayPattern")
        { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
          var elt = list$1[i$1];

            if (elt) { this.checkPatternExport(exports, elt); }
        } }
      else if (type === "Property")
        { this.checkPatternExport(exports, pat.value); }
      else if (type === "AssignmentPattern")
        { this.checkPatternExport(exports, pat.left); }
      else if (type === "RestElement")
        { this.checkPatternExport(exports, pat.argument); }
      else if (type === "ParenthesizedExpression")
        { this.checkPatternExport(exports, pat.expression); }
    };

    pp$1.checkVariableExport = function(exports, decls) {
      if (!exports) { return }
      for (var i = 0, list = decls; i < list.length; i += 1)
        {
        var decl = list[i];

        this.checkPatternExport(exports, decl.id);
      }
    };

    pp$1.shouldParseExportStatement = function() {
      return this.type.keyword === "var" ||
        this.type.keyword === "const" ||
        this.type.keyword === "class" ||
        this.type.keyword === "function" ||
        this.isLet() ||
        this.isAsyncFunction()
    };

    // Parses a comma-separated list of module exports.

    pp$1.parseExportSpecifiers = function(exports) {
      var nodes = [], first = true;
      // export { x, y as z } [from '...']
      this.expect(types.braceL);
      while (!this.eat(types.braceR)) {
        if (!first) {
          this.expect(types.comma);
          if (this.afterTrailingComma(types.braceR)) { break }
        } else { first = false; }

        var node = this.startNode();
        node.local = this.parseIdent(true);
        node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
        this.checkExport(exports, node.exported.name, node.exported.start);
        nodes.push(this.finishNode(node, "ExportSpecifier"));
      }
      return nodes
    };

    // Parses import declaration.

    pp$1.parseImport = function(node) {
      this.next();
      // import '...'
      if (this.type === types.string) {
        node.specifiers = empty$1;
        node.source = this.parseExprAtom();
      } else {
        node.specifiers = this.parseImportSpecifiers();
        this.expectContextual("from");
        node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
      }
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration")
    };

    // Parses a comma-separated list of module imports.

    pp$1.parseImportSpecifiers = function() {
      var nodes = [], first = true;
      if (this.type === types.name) {
        // import defaultObj, { x, y as z } from '...'
        var node = this.startNode();
        node.local = this.parseIdent();
        this.checkLVal(node.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
        if (!this.eat(types.comma)) { return nodes }
      }
      if (this.type === types.star) {
        var node$1 = this.startNode();
        this.next();
        this.expectContextual("as");
        node$1.local = this.parseIdent();
        this.checkLVal(node$1.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
        return nodes
      }
      this.expect(types.braceL);
      while (!this.eat(types.braceR)) {
        if (!first) {
          this.expect(types.comma);
          if (this.afterTrailingComma(types.braceR)) { break }
        } else { first = false; }

        var node$2 = this.startNode();
        node$2.imported = this.parseIdent(true);
        if (this.eatContextual("as")) {
          node$2.local = this.parseIdent();
        } else {
          this.checkUnreserved(node$2.imported);
          node$2.local = node$2.imported;
        }
        this.checkLVal(node$2.local, BIND_LEXICAL);
        nodes.push(this.finishNode(node$2, "ImportSpecifier"));
      }
      return nodes
    };

    // Set `ExpressionStatement#directive` property for directive prologues.
    pp$1.adaptDirectivePrologue = function(statements) {
      for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
        statements[i].directive = statements[i].expression.raw.slice(1, -1);
      }
    };
    pp$1.isDirectiveCandidate = function(statement) {
      return (
        statement.type === "ExpressionStatement" &&
        statement.expression.type === "Literal" &&
        typeof statement.expression.value === "string" &&
        // Reject parenthesized strings.
        (this.input[statement.start] === "\"" || this.input[statement.start] === "'")
      )
    };

    var pp$2 = Parser.prototype;

    // Convert existing expression atom to assignable pattern
    // if possible.

    pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
      if (this.options.ecmaVersion >= 6 && node) {
        switch (node.type) {
        case "Identifier":
          if (this.inAsync && node.name === "await")
            { this.raise(node.start, "Cannot use 'await' as identifier inside an async function"); }
          break

        case "ObjectPattern":
        case "ArrayPattern":
        case "RestElement":
          break

        case "ObjectExpression":
          node.type = "ObjectPattern";
          if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
          for (var i = 0, list = node.properties; i < list.length; i += 1) {
            var prop = list[i];

          this.toAssignable(prop, isBinding);
            // Early error:
            //   AssignmentRestProperty[Yield, Await] :
            //     `...` DestructuringAssignmentTarget[Yield, Await]
            //
            //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
            if (
              prop.type === "RestElement" &&
              (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")
            ) {
              this.raise(prop.argument.start, "Unexpected token");
            }
          }
          break

        case "Property":
          // AssignmentProperty has type === "Property"
          if (node.kind !== "init") { this.raise(node.key.start, "Object pattern can't contain getter or setter"); }
          this.toAssignable(node.value, isBinding);
          break

        case "ArrayExpression":
          node.type = "ArrayPattern";
          if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
          this.toAssignableList(node.elements, isBinding);
          break

        case "SpreadElement":
          node.type = "RestElement";
          this.toAssignable(node.argument, isBinding);
          if (node.argument.type === "AssignmentPattern")
            { this.raise(node.argument.start, "Rest elements cannot have a default value"); }
          break

        case "AssignmentExpression":
          if (node.operator !== "=") { this.raise(node.left.end, "Only '=' operator can be used for specifying default value."); }
          node.type = "AssignmentPattern";
          delete node.operator;
          this.toAssignable(node.left, isBinding);
          // falls through to AssignmentPattern

        case "AssignmentPattern":
          break

        case "ParenthesizedExpression":
          this.toAssignable(node.expression, isBinding, refDestructuringErrors);
          break

        case "ChainExpression":
          this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
          break

        case "MemberExpression":
          if (!isBinding) { break }

        default:
          this.raise(node.start, "Assigning to rvalue");
        }
      } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }
      return node
    };

    // Convert list of expression atoms to binding list.

    pp$2.toAssignableList = function(exprList, isBinding) {
      var end = exprList.length;
      for (var i = 0; i < end; i++) {
        var elt = exprList[i];
        if (elt) { this.toAssignable(elt, isBinding); }
      }
      if (end) {
        var last = exprList[end - 1];
        if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
          { this.unexpected(last.argument.start); }
      }
      return exprList
    };

    // Parses spread element.

    pp$2.parseSpread = function(refDestructuringErrors) {
      var node = this.startNode();
      this.next();
      node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
      return this.finishNode(node, "SpreadElement")
    };

    pp$2.parseRestBinding = function() {
      var node = this.startNode();
      this.next();

      // RestElement inside of a function parameter must be an identifier
      if (this.options.ecmaVersion === 6 && this.type !== types.name)
        { this.unexpected(); }

      node.argument = this.parseBindingAtom();

      return this.finishNode(node, "RestElement")
    };

    // Parses lvalue (assignable) atom.

    pp$2.parseBindingAtom = function() {
      if (this.options.ecmaVersion >= 6) {
        switch (this.type) {
        case types.bracketL:
          var node = this.startNode();
          this.next();
          node.elements = this.parseBindingList(types.bracketR, true, true);
          return this.finishNode(node, "ArrayPattern")

        case types.braceL:
          return this.parseObj(true)
        }
      }
      return this.parseIdent()
    };

    pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
      var elts = [], first = true;
      while (!this.eat(close)) {
        if (first) { first = false; }
        else { this.expect(types.comma); }
        if (allowEmpty && this.type === types.comma) {
          elts.push(null);
        } else if (allowTrailingComma && this.afterTrailingComma(close)) {
          break
        } else if (this.type === types.ellipsis) {
          var rest = this.parseRestBinding();
          this.parseBindingListItem(rest);
          elts.push(rest);
          if (this.type === types.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
          this.expect(close);
          break
        } else {
          var elem = this.parseMaybeDefault(this.start, this.startLoc);
          this.parseBindingListItem(elem);
          elts.push(elem);
        }
      }
      return elts
    };

    pp$2.parseBindingListItem = function(param) {
      return param
    };

    // Parses assignment pattern around given atom if possible.

    pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
      left = left || this.parseBindingAtom();
      if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }
      var node = this.startNodeAt(startPos, startLoc);
      node.left = left;
      node.right = this.parseMaybeAssign();
      return this.finishNode(node, "AssignmentPattern")
    };

    // Verify that a node is an lval — something that can be assigned
    // to.
    // bindingType can be either:
    // 'var' indicating that the lval creates a 'var' binding
    // 'let' indicating that the lval creates a lexical ('let' or 'const') binding
    // 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references

    pp$2.checkLVal = function(expr, bindingType, checkClashes) {
      if ( bindingType === void 0 ) bindingType = BIND_NONE;

      switch (expr.type) {
      case "Identifier":
        if (bindingType === BIND_LEXICAL && expr.name === "let")
          { this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"); }
        if (this.strict && this.reservedWordsStrictBind.test(expr.name))
          { this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode"); }
        if (checkClashes) {
          if (has(checkClashes, expr.name))
            { this.raiseRecoverable(expr.start, "Argument name clash"); }
          checkClashes[expr.name] = true;
        }
        if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }
        break

      case "ChainExpression":
        this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
        break

      case "MemberExpression":
        if (bindingType) { this.raiseRecoverable(expr.start, "Binding member expression"); }
        break

      case "ObjectPattern":
        for (var i = 0, list = expr.properties; i < list.length; i += 1)
          {
        var prop = list[i];

        this.checkLVal(prop, bindingType, checkClashes);
      }
        break

      case "Property":
        // AssignmentProperty has type === "Property"
        this.checkLVal(expr.value, bindingType, checkClashes);
        break

      case "ArrayPattern":
        for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
          var elem = list$1[i$1];

        if (elem) { this.checkLVal(elem, bindingType, checkClashes); }
        }
        break

      case "AssignmentPattern":
        this.checkLVal(expr.left, bindingType, checkClashes);
        break

      case "RestElement":
        this.checkLVal(expr.argument, bindingType, checkClashes);
        break

      case "ParenthesizedExpression":
        this.checkLVal(expr.expression, bindingType, checkClashes);
        break

      default:
        this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
      }
    };

    // A recursive descent parser operates by defining functions for all

    var pp$3 = Parser.prototype;

    // Check if property name clashes with already added.
    // Object/class getters and setters are not allowed to clash —
    // either with each other or with an init property — and in
    // strict mode, init properties are also not allowed to be repeated.

    pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
      if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement")
        { return }
      if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
        { return }
      var key = prop.key;
      var name;
      switch (key.type) {
      case "Identifier": name = key.name; break
      case "Literal": name = String(key.value); break
      default: return
      }
      var kind = prop.kind;
      if (this.options.ecmaVersion >= 6) {
        if (name === "__proto__" && kind === "init") {
          if (propHash.proto) {
            if (refDestructuringErrors) {
              if (refDestructuringErrors.doubleProto < 0)
                { refDestructuringErrors.doubleProto = key.start; }
              // Backwards-compat kludge. Can be removed in version 6.0
            } else { this.raiseRecoverable(key.start, "Redefinition of __proto__ property"); }
          }
          propHash.proto = true;
        }
        return
      }
      name = "$" + name;
      var other = propHash[name];
      if (other) {
        var redefinition;
        if (kind === "init") {
          redefinition = this.strict && other.init || other.get || other.set;
        } else {
          redefinition = other.init || other[kind];
        }
        if (redefinition)
          { this.raiseRecoverable(key.start, "Redefinition of property"); }
      } else {
        other = propHash[name] = {
          init: false,
          get: false,
          set: false
        };
      }
      other[kind] = true;
    };

    // ### Expression parsing

    // These nest, from the most general expression type at the top to
    // 'atomic', nondivisible expression types at the bottom. Most of
    // the functions will simply let the function(s) below them parse,
    // and, *if* the syntactic construct they handle is present, wrap
    // the AST node that the inner parser gave them in another node.

    // Parse a full expression. The optional arguments are used to
    // forbid the `in` operator (in for loops initalization expressions)
    // and provide reference for storing '=' operator inside shorthand
    // property assignment in contexts where both object expression
    // and object pattern might appear (so it's possible to raise
    // delayed syntax error at correct position).

    pp$3.parseExpression = function(noIn, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
      if (this.type === types.comma) {
        var node = this.startNodeAt(startPos, startLoc);
        node.expressions = [expr];
        while (this.eat(types.comma)) { node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors)); }
        return this.finishNode(node, "SequenceExpression")
      }
      return expr
    };

    // Parse an assignment expression. This includes applications of
    // operators like `+=`.

    pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
      if (this.isContextual("yield")) {
        if (this.inGenerator) { return this.parseYield(noIn) }
        // The tokenizer will assume an expression is allowed after
        // `yield`, but this isn't that kind of yield
        else { this.exprAllowed = false; }
      }

      var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
      if (refDestructuringErrors) {
        oldParenAssign = refDestructuringErrors.parenthesizedAssign;
        oldTrailingComma = refDestructuringErrors.trailingComma;
        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
      } else {
        refDestructuringErrors = new DestructuringErrors;
        ownDestructuringErrors = true;
      }

      var startPos = this.start, startLoc = this.startLoc;
      if (this.type === types.parenL || this.type === types.name)
        { this.potentialArrowAt = this.start; }
      var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
      if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }
      if (this.type.isAssign) {
        var node = this.startNodeAt(startPos, startLoc);
        node.operator = this.value;
        node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
        if (!ownDestructuringErrors) {
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
        }
        if (refDestructuringErrors.shorthandAssign >= node.left.start)
          { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly
        this.checkLVal(left);
        this.next();
        node.right = this.parseMaybeAssign(noIn);
        return this.finishNode(node, "AssignmentExpression")
      } else {
        if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }
      }
      if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }
      if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }
      return left
    };

    // Parse a ternary conditional (`?:`) operator.

    pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseExprOps(noIn, refDestructuringErrors);
      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
      if (this.eat(types.question)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.test = expr;
        node.consequent = this.parseMaybeAssign();
        this.expect(types.colon);
        node.alternate = this.parseMaybeAssign(noIn);
        return this.finishNode(node, "ConditionalExpression")
      }
      return expr
    };

    // Start the precedence parser.

    pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseMaybeUnary(refDestructuringErrors, false);
      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
      return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)
    };

    // Parse binary operators with the operator precedence parsing
    // algorithm. `left` is the left-hand side of the operator.
    // `minPrec` provides context that allows the function to stop and
    // defer further parser to one of its callers when it encounters an
    // operator that has a lower precedence than the set it is parsing.

    pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
      var prec = this.type.binop;
      if (prec != null && (!noIn || this.type !== types._in)) {
        if (prec > minPrec) {
          var logical = this.type === types.logicalOR || this.type === types.logicalAND;
          var coalesce = this.type === types.coalesce;
          if (coalesce) {
            // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
            // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
            prec = types.logicalAND.binop;
          }
          var op = this.value;
          this.next();
          var startPos = this.start, startLoc = this.startLoc;
          var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
          var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
          if ((logical && this.type === types.coalesce) || (coalesce && (this.type === types.logicalOR || this.type === types.logicalAND))) {
            this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
          }
          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
        }
      }
      return left
    };

    pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
      var node = this.startNodeAt(startPos, startLoc);
      node.left = left;
      node.operator = op;
      node.right = right;
      return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
    };

    // Parse unary operators, both prefix and postfix.

    pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
      var startPos = this.start, startLoc = this.startLoc, expr;
      if (this.isContextual("await") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {
        expr = this.parseAwait();
        sawUnary = true;
      } else if (this.type.prefix) {
        var node = this.startNode(), update = this.type === types.incDec;
        node.operator = this.value;
        node.prefix = true;
        this.next();
        node.argument = this.parseMaybeUnary(null, true);
        this.checkExpressionErrors(refDestructuringErrors, true);
        if (update) { this.checkLVal(node.argument); }
        else if (this.strict && node.operator === "delete" &&
                 node.argument.type === "Identifier")
          { this.raiseRecoverable(node.start, "Deleting local variable in strict mode"); }
        else { sawUnary = true; }
        expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
      } else {
        expr = this.parseExprSubscripts(refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }
        while (this.type.postfix && !this.canInsertSemicolon()) {
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.operator = this.value;
          node$1.prefix = false;
          node$1.argument = expr;
          this.checkLVal(expr);
          this.next();
          expr = this.finishNode(node$1, "UpdateExpression");
        }
      }

      if (!sawUnary && this.eat(types.starstar))
        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false) }
      else
        { return expr }
    };

    // Parse call, dot, and `[]`-subscript expressions.

    pp$3.parseExprSubscripts = function(refDestructuringErrors) {
      var startPos = this.start, startLoc = this.startLoc;
      var expr = this.parseExprAtom(refDestructuringErrors);
      if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
        { return expr }
      var result = this.parseSubscripts(expr, startPos, startLoc);
      if (refDestructuringErrors && result.type === "MemberExpression") {
        if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }
        if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }
      }
      return result
    };

    pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
      var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
          this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&
          this.potentialArrowAt === base.start;
      var optionalChained = false;

      while (true) {
        var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);

        if (element.optional) { optionalChained = true; }
        if (element === base || element.type === "ArrowFunctionExpression") {
          if (optionalChained) {
            var chainNode = this.startNodeAt(startPos, startLoc);
            chainNode.expression = element;
            element = this.finishNode(chainNode, "ChainExpression");
          }
          return element
        }

        base = element;
      }
    };

    pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
      var optionalSupported = this.options.ecmaVersion >= 11;
      var optional = optionalSupported && this.eat(types.questionDot);
      if (noCalls && optional) { this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions"); }

      var computed = this.eat(types.bracketL);
      if (computed || (optional && this.type !== types.parenL && this.type !== types.backQuote) || this.eat(types.dot)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
        node.computed = !!computed;
        if (computed) { this.expect(types.bracketR); }
        if (optionalSupported) {
          node.optional = optional;
        }
        base = this.finishNode(node, "MemberExpression");
      } else if (!noCalls && this.eat(types.parenL)) {
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
        if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
          this.checkPatternErrors(refDestructuringErrors, false);
          this.checkYieldAwaitInDefaultParams();
          if (this.awaitIdentPos > 0)
            { this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"); }
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true)
        }
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;
        this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
        var node$1 = this.startNodeAt(startPos, startLoc);
        node$1.callee = base;
        node$1.arguments = exprList;
        if (optionalSupported) {
          node$1.optional = optional;
        }
        base = this.finishNode(node$1, "CallExpression");
      } else if (this.type === types.backQuote) {
        if (optional || optionalChained) {
          this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
        }
        var node$2 = this.startNodeAt(startPos, startLoc);
        node$2.tag = base;
        node$2.quasi = this.parseTemplate({isTagged: true});
        base = this.finishNode(node$2, "TaggedTemplateExpression");
      }
      return base
    };

    // Parse an atomic expression — either a single token that is an
    // expression, an expression started by a keyword like `function` or
    // `new`, or an expression wrapped in punctuation like `()`, `[]`,
    // or `{}`.

    pp$3.parseExprAtom = function(refDestructuringErrors) {
      // If a division operator appears in an expression position, the
      // tokenizer got confused, and we force it to read a regexp instead.
      if (this.type === types.slash) { this.readRegexp(); }

      var node, canBeArrow = this.potentialArrowAt === this.start;
      switch (this.type) {
      case types._super:
        if (!this.allowSuper)
          { this.raise(this.start, "'super' keyword outside a method"); }
        node = this.startNode();
        this.next();
        if (this.type === types.parenL && !this.allowDirectSuper)
          { this.raise(node.start, "super() call outside constructor of a subclass"); }
        // The `super` keyword can appear at below:
        // SuperProperty:
        //     super [ Expression ]
        //     super . IdentifierName
        // SuperCall:
        //     super ( Arguments )
        if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)
          { this.unexpected(); }
        return this.finishNode(node, "Super")

      case types._this:
        node = this.startNode();
        this.next();
        return this.finishNode(node, "ThisExpression")

      case types.name:
        var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
        var id = this.parseIdent(false);
        if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function))
          { return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true) }
        if (canBeArrow && !this.canInsertSemicolon()) {
          if (this.eat(types.arrow))
            { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }
          if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
            id = this.parseIdent(false);
            if (this.canInsertSemicolon() || !this.eat(types.arrow))
              { this.unexpected(); }
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
          }
        }
        return id

      case types.regexp:
        var value = this.value;
        node = this.parseLiteral(value.value);
        node.regex = {pattern: value.pattern, flags: value.flags};
        return node

      case types.num: case types.string:
        return this.parseLiteral(this.value)

      case types._null: case types._true: case types._false:
        node = this.startNode();
        node.value = this.type === types._null ? null : this.type === types._true;
        node.raw = this.type.keyword;
        this.next();
        return this.finishNode(node, "Literal")

      case types.parenL:
        var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
        if (refDestructuringErrors) {
          if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
            { refDestructuringErrors.parenthesizedAssign = start; }
          if (refDestructuringErrors.parenthesizedBind < 0)
            { refDestructuringErrors.parenthesizedBind = start; }
        }
        return expr

      case types.bracketL:
        node = this.startNode();
        this.next();
        node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
        return this.finishNode(node, "ArrayExpression")

      case types.braceL:
        return this.parseObj(false, refDestructuringErrors)

      case types._function:
        node = this.startNode();
        this.next();
        return this.parseFunction(node, 0)

      case types._class:
        return this.parseClass(this.startNode(), false)

      case types._new:
        return this.parseNew()

      case types.backQuote:
        return this.parseTemplate()

      case types._import:
        if (this.options.ecmaVersion >= 11) {
          return this.parseExprImport()
        } else {
          return this.unexpected()
        }

      default:
        this.unexpected();
      }
    };

    pp$3.parseExprImport = function() {
      var node = this.startNode();

      // Consume `import` as an identifier for `import.meta`.
      // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
      if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword import"); }
      var meta = this.parseIdent(true);

      switch (this.type) {
      case types.parenL:
        return this.parseDynamicImport(node)
      case types.dot:
        node.meta = meta;
        return this.parseImportMeta(node)
      default:
        this.unexpected();
      }
    };

    pp$3.parseDynamicImport = function(node) {
      this.next(); // skip `(`

      // Parse node.source.
      node.source = this.parseMaybeAssign();

      // Verify ending.
      if (!this.eat(types.parenR)) {
        var errorPos = this.start;
        if (this.eat(types.comma) && this.eat(types.parenR)) {
          this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
        } else {
          this.unexpected(errorPos);
        }
      }

      return this.finishNode(node, "ImportExpression")
    };

    pp$3.parseImportMeta = function(node) {
      this.next(); // skip `.`

      var containsEsc = this.containsEsc;
      node.property = this.parseIdent(true);

      if (node.property.name !== "meta")
        { this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"); }
      if (containsEsc)
        { this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"); }
      if (this.options.sourceType !== "module")
        { this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"); }

      return this.finishNode(node, "MetaProperty")
    };

    pp$3.parseLiteral = function(value) {
      var node = this.startNode();
      node.value = value;
      node.raw = this.input.slice(this.start, this.end);
      if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, ""); }
      this.next();
      return this.finishNode(node, "Literal")
    };

    pp$3.parseParenExpression = function() {
      this.expect(types.parenL);
      var val = this.parseExpression();
      this.expect(types.parenR);
      return val
    };

    pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
      var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
      if (this.options.ecmaVersion >= 6) {
        this.next();

        var innerStartPos = this.start, innerStartLoc = this.startLoc;
        var exprList = [], first = true, lastIsComma = false;
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
        this.yieldPos = 0;
        this.awaitPos = 0;
        // Do not save awaitIdentPos to allow checking awaits nested in parameters
        while (this.type !== types.parenR) {
          first ? first = false : this.expect(types.comma);
          if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
            lastIsComma = true;
            break
          } else if (this.type === types.ellipsis) {
            spreadStart = this.start;
            exprList.push(this.parseParenItem(this.parseRestBinding()));
            if (this.type === types.comma) { this.raise(this.start, "Comma is not permitted after the rest element"); }
            break
          } else {
            exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
          }
        }
        var innerEndPos = this.start, innerEndLoc = this.startLoc;
        this.expect(types.parenR);

        if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
          this.checkPatternErrors(refDestructuringErrors, false);
          this.checkYieldAwaitInDefaultParams();
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          return this.parseParenArrowList(startPos, startLoc, exprList)
        }

        if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }
        if (spreadStart) { this.unexpected(spreadStart); }
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;

        if (exprList.length > 1) {
          val = this.startNodeAt(innerStartPos, innerStartLoc);
          val.expressions = exprList;
          this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
        } else {
          val = exprList[0];
        }
      } else {
        val = this.parseParenExpression();
      }

      if (this.options.preserveParens) {
        var par = this.startNodeAt(startPos, startLoc);
        par.expression = val;
        return this.finishNode(par, "ParenthesizedExpression")
      } else {
        return val
      }
    };

    pp$3.parseParenItem = function(item) {
      return item
    };

    pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
    };

    // New's precedence is slightly tricky. It must allow its argument to
    // be a `[]` or dot subscript expression, but not a call — at least,
    // not without wrapping it in parentheses. Thus, it uses the noCalls
    // argument to parseSubscripts to prevent it from consuming the
    // argument list.

    var empty$1$1 = [];

    pp$3.parseNew = function() {
      if (this.containsEsc) { this.raiseRecoverable(this.start, "Escape sequence in keyword new"); }
      var node = this.startNode();
      var meta = this.parseIdent(true);
      if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
        node.meta = meta;
        var containsEsc = this.containsEsc;
        node.property = this.parseIdent(true);
        if (node.property.name !== "target")
          { this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"); }
        if (containsEsc)
          { this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"); }
        if (!this.inNonArrowFunction())
          { this.raiseRecoverable(node.start, "'new.target' can only be used in functions"); }
        return this.finishNode(node, "MetaProperty")
      }
      var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;
      node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
      if (isImport && node.callee.type === "ImportExpression") {
        this.raise(startPos, "Cannot use new with import()");
      }
      if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }
      else { node.arguments = empty$1$1; }
      return this.finishNode(node, "NewExpression")
    };

    // Parse template expression.

    pp$3.parseTemplateElement = function(ref) {
      var isTagged = ref.isTagged;

      var elem = this.startNode();
      if (this.type === types.invalidTemplate) {
        if (!isTagged) {
          this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
        }
        elem.value = {
          raw: this.value,
          cooked: null
        };
      } else {
        elem.value = {
          raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
          cooked: this.value
        };
      }
      this.next();
      elem.tail = this.type === types.backQuote;
      return this.finishNode(elem, "TemplateElement")
    };

    pp$3.parseTemplate = function(ref) {
      if ( ref === void 0 ) ref = {};
      var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;

      var node = this.startNode();
      this.next();
      node.expressions = [];
      var curElt = this.parseTemplateElement({isTagged: isTagged});
      node.quasis = [curElt];
      while (!curElt.tail) {
        if (this.type === types.eof) { this.raise(this.pos, "Unterminated template literal"); }
        this.expect(types.dollarBraceL);
        node.expressions.push(this.parseExpression());
        this.expect(types.braceR);
        node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));
      }
      this.next();
      return this.finishNode(node, "TemplateLiteral")
    };

    pp$3.isAsyncProp = function(prop) {
      return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" &&
        (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&
        !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
    };

    // Parse an object literal or binding pattern.

    pp$3.parseObj = function(isPattern, refDestructuringErrors) {
      var node = this.startNode(), first = true, propHash = {};
      node.properties = [];
      this.next();
      while (!this.eat(types.braceR)) {
        if (!first) {
          this.expect(types.comma);
          if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) { break }
        } else { first = false; }

        var prop = this.parseProperty(isPattern, refDestructuringErrors);
        if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }
        node.properties.push(prop);
      }
      return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
    };

    pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
      var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
      if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
        if (isPattern) {
          prop.argument = this.parseIdent(false);
          if (this.type === types.comma) {
            this.raise(this.start, "Comma is not permitted after the rest element");
          }
          return this.finishNode(prop, "RestElement")
        }
        // To disallow parenthesized identifier via `this.toAssignable()`.
        if (this.type === types.parenL && refDestructuringErrors) {
          if (refDestructuringErrors.parenthesizedAssign < 0) {
            refDestructuringErrors.parenthesizedAssign = this.start;
          }
          if (refDestructuringErrors.parenthesizedBind < 0) {
            refDestructuringErrors.parenthesizedBind = this.start;
          }
        }
        // Parse argument.
        prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        // To disallow trailing comma via `this.toAssignable()`.
        if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
          refDestructuringErrors.trailingComma = this.start;
        }
        // Finish
        return this.finishNode(prop, "SpreadElement")
      }
      if (this.options.ecmaVersion >= 6) {
        prop.method = false;
        prop.shorthand = false;
        if (isPattern || refDestructuringErrors) {
          startPos = this.start;
          startLoc = this.startLoc;
        }
        if (!isPattern)
          { isGenerator = this.eat(types.star); }
      }
      var containsEsc = this.containsEsc;
      this.parsePropertyName(prop);
      if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
        isAsync = true;
        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
        this.parsePropertyName(prop, refDestructuringErrors);
      } else {
        isAsync = false;
      }
      this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
      return this.finishNode(prop, "Property")
    };

    pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
      if ((isGenerator || isAsync) && this.type === types.colon)
        { this.unexpected(); }

      if (this.eat(types.colon)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
        prop.kind = "init";
      } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
        if (isPattern) { this.unexpected(); }
        prop.kind = "init";
        prop.method = true;
        prop.value = this.parseMethod(isGenerator, isAsync);
      } else if (!isPattern && !containsEsc &&
                 this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
                 (prop.key.name === "get" || prop.key.name === "set") &&
                 (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {
        if (isGenerator || isAsync) { this.unexpected(); }
        prop.kind = prop.key.name;
        this.parsePropertyName(prop);
        prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          if (prop.kind === "get")
            { this.raiseRecoverable(start, "getter should have no params"); }
          else
            { this.raiseRecoverable(start, "setter should have exactly one param"); }
        } else {
          if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
            { this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params"); }
        }
      } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
        if (isGenerator || isAsync) { this.unexpected(); }
        this.checkUnreserved(prop.key);
        if (prop.key.name === "await" && !this.awaitIdentPos)
          { this.awaitIdentPos = startPos; }
        prop.kind = "init";
        if (isPattern) {
          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
        } else if (this.type === types.eq && refDestructuringErrors) {
          if (refDestructuringErrors.shorthandAssign < 0)
            { refDestructuringErrors.shorthandAssign = this.start; }
          prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
        } else {
          prop.value = prop.key;
        }
        prop.shorthand = true;
      } else { this.unexpected(); }
    };

    pp$3.parsePropertyName = function(prop) {
      if (this.options.ecmaVersion >= 6) {
        if (this.eat(types.bracketL)) {
          prop.computed = true;
          prop.key = this.parseMaybeAssign();
          this.expect(types.bracketR);
          return prop.key
        } else {
          prop.computed = false;
        }
      }
      return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never")
    };

    // Initialize empty function node.

    pp$3.initFunction = function(node) {
      node.id = null;
      if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }
      if (this.options.ecmaVersion >= 8) { node.async = false; }
    };

    // Parse object or class method.

    pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
      var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

      this.initFunction(node);
      if (this.options.ecmaVersion >= 6)
        { node.generator = isGenerator; }
      if (this.options.ecmaVersion >= 8)
        { node.async = !!isAsync; }

      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;
      this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));

      this.expect(types.parenL);
      node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
      this.checkYieldAwaitInDefaultParams();
      this.parseFunctionBody(node, false, true);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, "FunctionExpression")
    };

    // Parse arrow function expression with given parameters.

    pp$3.parseArrowExpression = function(node, params, isAsync) {
      var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;

      this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
      this.initFunction(node);
      if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }

      this.yieldPos = 0;
      this.awaitPos = 0;
      this.awaitIdentPos = 0;

      node.params = this.toAssignableList(params, true);
      this.parseFunctionBody(node, true, false);

      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.finishNode(node, "ArrowFunctionExpression")
    };

    // Parse function body and check parameters.

    pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
      var isExpression = isArrowFunction && this.type !== types.braceL;
      var oldStrict = this.strict, useStrict = false;

      if (isExpression) {
        node.body = this.parseMaybeAssign();
        node.expression = true;
        this.checkParams(node, false);
      } else {
        var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
        if (!oldStrict || nonSimple) {
          useStrict = this.strictDirective(this.end);
          // If this is a strict mode function, verify that argument names
          // are not repeated, and it does not try to bind the words `eval`
          // or `arguments`.
          if (useStrict && nonSimple)
            { this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list"); }
        }
        // Start a new scope with regard to labels and the `inFunction`
        // flag (restore them to their old value afterwards).
        var oldLabels = this.labels;
        this.labels = [];
        if (useStrict) { this.strict = true; }

        // Add the params to varDeclaredNames to ensure that an error is thrown
        // if a let/const declaration in the function clashes with one of the params.
        this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
        // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
        if (this.strict && node.id) { this.checkLVal(node.id, BIND_OUTSIDE); }
        node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
        node.expression = false;
        this.adaptDirectivePrologue(node.body.body);
        this.labels = oldLabels;
      }
      this.exitScope();
    };

    pp$3.isSimpleParamList = function(params) {
      for (var i = 0, list = params; i < list.length; i += 1)
        {
        var param = list[i];

        if (param.type !== "Identifier") { return false
      } }
      return true
    };

    // Checks function params for various disallowed patterns such as using "eval"
    // or "arguments" and duplicate parameters.

    pp$3.checkParams = function(node, allowDuplicates) {
      var nameHash = {};
      for (var i = 0, list = node.params; i < list.length; i += 1)
        {
        var param = list[i];

        this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
      }
    };

    // Parses a comma-separated list of expressions, and returns them as
    // an array. `close` is the token type that ends the list, and
    // `allowEmpty` can be turned on to allow subsequent commas with
    // nothing in between them to be parsed as `null` (which is needed
    // for array literals).

    pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
      var elts = [], first = true;
      while (!this.eat(close)) {
        if (!first) {
          this.expect(types.comma);
          if (allowTrailingComma && this.afterTrailingComma(close)) { break }
        } else { first = false; }

        var elt = (void 0);
        if (allowEmpty && this.type === types.comma)
          { elt = null; }
        else if (this.type === types.ellipsis) {
          elt = this.parseSpread(refDestructuringErrors);
          if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0)
            { refDestructuringErrors.trailingComma = this.start; }
        } else {
          elt = this.parseMaybeAssign(false, refDestructuringErrors);
        }
        elts.push(elt);
      }
      return elts
    };

    pp$3.checkUnreserved = function(ref) {
      var start = ref.start;
      var end = ref.end;
      var name = ref.name;

      if (this.inGenerator && name === "yield")
        { this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"); }
      if (this.inAsync && name === "await")
        { this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"); }
      if (this.keywords.test(name))
        { this.raise(start, ("Unexpected keyword '" + name + "'")); }
      if (this.options.ecmaVersion < 6 &&
        this.input.slice(start, end).indexOf("\\") !== -1) { return }
      var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
      if (re.test(name)) {
        if (!this.inAsync && name === "await")
          { this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"); }
        this.raiseRecoverable(start, ("The keyword '" + name + "' is reserved"));
      }
    };

    // Parse the next token as an identifier. If `liberal` is true (used
    // when parsing properties), it will also convert keywords into
    // identifiers.

    pp$3.parseIdent = function(liberal, isBinding) {
      var node = this.startNode();
      if (this.type === types.name) {
        node.name = this.value;
      } else if (this.type.keyword) {
        node.name = this.type.keyword;

        // To fix https://github.com/acornjs/acorn/issues/575
        // `class` and `function` keywords push new context into this.context.
        // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
        // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
        if ((node.name === "class" || node.name === "function") &&
            (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
          this.context.pop();
        }
      } else {
        this.unexpected();
      }
      this.next(!!liberal);
      this.finishNode(node, "Identifier");
      if (!liberal) {
        this.checkUnreserved(node);
        if (node.name === "await" && !this.awaitIdentPos)
          { this.awaitIdentPos = node.start; }
      }
      return node
    };

    // Parses yield expression inside generator.

    pp$3.parseYield = function(noIn) {
      if (!this.yieldPos) { this.yieldPos = this.start; }

      var node = this.startNode();
      this.next();
      if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {
        node.delegate = false;
        node.argument = null;
      } else {
        node.delegate = this.eat(types.star);
        node.argument = this.parseMaybeAssign(noIn);
      }
      return this.finishNode(node, "YieldExpression")
    };

    pp$3.parseAwait = function() {
      if (!this.awaitPos) { this.awaitPos = this.start; }

      var node = this.startNode();
      this.next();
      node.argument = this.parseMaybeUnary(null, false);
      return this.finishNode(node, "AwaitExpression")
    };

    var pp$4 = Parser.prototype;

    // This function is used to raise exceptions on parse errors. It
    // takes an offset integer (into the current `input`) to indicate
    // the location of the error, attaches the position to the end
    // of the error message, and then raises a `SyntaxError` with that
    // message.

    pp$4.raise = function(pos, message) {
      var loc = getLineInfo(this.input, pos);
      message += " (" + loc.line + ":" + loc.column + ")";
      var err = new SyntaxError(message);
      err.pos = pos; err.loc = loc; err.raisedAt = this.pos;
      throw err
    };

    pp$4.raiseRecoverable = pp$4.raise;

    pp$4.curPosition = function() {
      if (this.options.locations) {
        return new Position(this.curLine, this.pos - this.lineStart)
      }
    };

    var pp$5 = Parser.prototype;

    var Scope = function Scope(flags) {
      this.flags = flags;
      // A list of var-declared names in the current lexical scope
      this.var = [];
      // A list of lexically-declared names in the current lexical scope
      this.lexical = [];
      // A list of lexically-declared FunctionDeclaration names in the current lexical scope
      this.functions = [];
    };

    // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.

    pp$5.enterScope = function(flags) {
      this.scopeStack.push(new Scope(flags));
    };

    pp$5.exitScope = function() {
      this.scopeStack.pop();
    };

    // The spec says:
    // > At the top level of a function, or script, function declarations are
    // > treated like var declarations rather than like lexical declarations.
    pp$5.treatFunctionsAsVarInScope = function(scope) {
      return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)
    };

    pp$5.declareName = function(name, bindingType, pos) {
      var redeclared = false;
      if (bindingType === BIND_LEXICAL) {
        var scope = this.currentScope();
        redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
        scope.lexical.push(name);
        if (this.inModule && (scope.flags & SCOPE_TOP))
          { delete this.undefinedExports[name]; }
      } else if (bindingType === BIND_SIMPLE_CATCH) {
        var scope$1 = this.currentScope();
        scope$1.lexical.push(name);
      } else if (bindingType === BIND_FUNCTION) {
        var scope$2 = this.currentScope();
        if (this.treatFunctionsAsVar)
          { redeclared = scope$2.lexical.indexOf(name) > -1; }
        else
          { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }
        scope$2.functions.push(name);
      } else {
        for (var i = this.scopeStack.length - 1; i >= 0; --i) {
          var scope$3 = this.scopeStack[i];
          if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||
              !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
            redeclared = true;
            break
          }
          scope$3.var.push(name);
          if (this.inModule && (scope$3.flags & SCOPE_TOP))
            { delete this.undefinedExports[name]; }
          if (scope$3.flags & SCOPE_VAR) { break }
        }
      }
      if (redeclared) { this.raiseRecoverable(pos, ("Identifier '" + name + "' has already been declared")); }
    };

    pp$5.checkLocalExport = function(id) {
      // scope.functions must be empty as Module code is always strict.
      if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&
          this.scopeStack[0].var.indexOf(id.name) === -1) {
        this.undefinedExports[id.name] = id;
      }
    };

    pp$5.currentScope = function() {
      return this.scopeStack[this.scopeStack.length - 1]
    };

    pp$5.currentVarScope = function() {
      for (var i = this.scopeStack.length - 1;; i--) {
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR) { return scope }
      }
    };

    // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
    pp$5.currentThisScope = function() {
      for (var i = this.scopeStack.length - 1;; i--) {
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }
      }
    };

    var Node = function Node(parser, pos, loc) {
      this.type = "";
      this.start = pos;
      this.end = 0;
      if (parser.options.locations)
        { this.loc = new SourceLocation(parser, loc); }
      if (parser.options.directSourceFile)
        { this.sourceFile = parser.options.directSourceFile; }
      if (parser.options.ranges)
        { this.range = [pos, 0]; }
    };

    // Start an AST node, attaching a start offset.

    var pp$6 = Parser.prototype;

    pp$6.startNode = function() {
      return new Node(this, this.start, this.startLoc)
    };

    pp$6.startNodeAt = function(pos, loc) {
      return new Node(this, pos, loc)
    };

    // Finish an AST node, adding `type` and `end` properties.

    function finishNodeAt(node, type, pos, loc) {
      node.type = type;
      node.end = pos;
      if (this.options.locations)
        { node.loc.end = loc; }
      if (this.options.ranges)
        { node.range[1] = pos; }
      return node
    }

    pp$6.finishNode = function(node, type) {
      return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
    };

    // Finish node at given position

    pp$6.finishNodeAt = function(node, type, pos, loc) {
      return finishNodeAt.call(this, node, type, pos, loc)
    };

    // The algorithm used to determine whether a regexp can appear at a

    var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
      this.token = token;
      this.isExpr = !!isExpr;
      this.preserveSpace = !!preserveSpace;
      this.override = override;
      this.generator = !!generator;
    };

    var types$1 = {
      b_stat: new TokContext("{", false),
      b_expr: new TokContext("{", true),
      b_tmpl: new TokContext("${", false),
      p_stat: new TokContext("(", false),
      p_expr: new TokContext("(", true),
      q_tmpl: new TokContext("`", true, true, function (p) { return p.tryReadTemplateToken(); }),
      f_stat: new TokContext("function", false),
      f_expr: new TokContext("function", true),
      f_expr_gen: new TokContext("function", true, false, null, true),
      f_gen: new TokContext("function", false, false, null, true)
    };

    var pp$7 = Parser.prototype;

    pp$7.initialContext = function() {
      return [types$1.b_stat]
    };

    pp$7.braceIsBlock = function(prevType) {
      var parent = this.curContext();
      if (parent === types$1.f_expr || parent === types$1.f_stat)
        { return true }
      if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))
        { return !parent.isExpr }

      // The check for `tt.name && exprAllowed` detects whether we are
      // after a `yield` or `of` construct. See the `updateContext` for
      // `tt.name`.
      if (prevType === types._return || prevType === types.name && this.exprAllowed)
        { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }
      if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)
        { return true }
      if (prevType === types.braceL)
        { return parent === types$1.b_stat }
      if (prevType === types._var || prevType === types._const || prevType === types.name)
        { return false }
      return !this.exprAllowed
    };

    pp$7.inGeneratorContext = function() {
      for (var i = this.context.length - 1; i >= 1; i--) {
        var context = this.context[i];
        if (context.token === "function")
          { return context.generator }
      }
      return false
    };

    pp$7.updateContext = function(prevType) {
      var update, type = this.type;
      if (type.keyword && prevType === types.dot)
        { this.exprAllowed = false; }
      else if (update = type.updateContext)
        { update.call(this, prevType); }
      else
        { this.exprAllowed = type.beforeExpr; }
    };

    // Token-specific context update code

    types.parenR.updateContext = types.braceR.updateContext = function() {
      if (this.context.length === 1) {
        this.exprAllowed = true;
        return
      }
      var out = this.context.pop();
      if (out === types$1.b_stat && this.curContext().token === "function") {
        out = this.context.pop();
      }
      this.exprAllowed = !out.isExpr;
    };

    types.braceL.updateContext = function(prevType) {
      this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
      this.exprAllowed = true;
    };

    types.dollarBraceL.updateContext = function() {
      this.context.push(types$1.b_tmpl);
      this.exprAllowed = true;
    };

    types.parenL.updateContext = function(prevType) {
      var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
      this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
      this.exprAllowed = true;
    };

    types.incDec.updateContext = function() {
      // tokExprAllowed stays unchanged
    };

    types._function.updateContext = types._class.updateContext = function(prevType) {
      if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&
          !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&
          !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))
        { this.context.push(types$1.f_expr); }
      else
        { this.context.push(types$1.f_stat); }
      this.exprAllowed = false;
    };

    types.backQuote.updateContext = function() {
      if (this.curContext() === types$1.q_tmpl)
        { this.context.pop(); }
      else
        { this.context.push(types$1.q_tmpl); }
      this.exprAllowed = false;
    };

    types.star.updateContext = function(prevType) {
      if (prevType === types._function) {
        var index = this.context.length - 1;
        if (this.context[index] === types$1.f_expr)
          { this.context[index] = types$1.f_expr_gen; }
        else
          { this.context[index] = types$1.f_gen; }
      }
      this.exprAllowed = true;
    };

    types.name.updateContext = function(prevType) {
      var allowed = false;
      if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
        if (this.value === "of" && !this.exprAllowed ||
            this.value === "yield" && this.inGeneratorContext())
          { allowed = true; }
      }
      this.exprAllowed = allowed;
    };

    // This file contains Unicode properties extracted from the ECMAScript
    // specification. The lists are extracted like so:
    // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)

    // #table-binary-unicode-properties
    var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
    var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
    var ecma11BinaryProperties = ecma10BinaryProperties;
    var unicodeBinaryProperties = {
      9: ecma9BinaryProperties,
      10: ecma10BinaryProperties,
      11: ecma11BinaryProperties
    };

    // #table-unicode-general-category-values
    var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";

    // #table-unicode-script-values
    var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
    var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
    var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
    var unicodeScriptValues = {
      9: ecma9ScriptValues,
      10: ecma10ScriptValues,
      11: ecma11ScriptValues
    };

    var data = {};
    function buildUnicodeData(ecmaVersion) {
      var d = data[ecmaVersion] = {
        binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
        nonBinary: {
          General_Category: wordsRegexp(unicodeGeneralCategoryValues),
          Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
        }
      };
      d.nonBinary.Script_Extensions = d.nonBinary.Script;

      d.nonBinary.gc = d.nonBinary.General_Category;
      d.nonBinary.sc = d.nonBinary.Script;
      d.nonBinary.scx = d.nonBinary.Script_Extensions;
    }
    buildUnicodeData(9);
    buildUnicodeData(10);
    buildUnicodeData(11);

    var pp$8 = Parser.prototype;

    var RegExpValidationState = function RegExpValidationState(parser) {
      this.parser = parser;
      this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
      this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
      this.source = "";
      this.flags = "";
      this.start = 0;
      this.switchU = false;
      this.switchN = false;
      this.pos = 0;
      this.lastIntValue = 0;
      this.lastStringValue = "";
      this.lastAssertionIsQuantifiable = false;
      this.numCapturingParens = 0;
      this.maxBackReference = 0;
      this.groupNames = [];
      this.backReferenceNames = [];
    };

    RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {
      var unicode = flags.indexOf("u") !== -1;
      this.start = start | 0;
      this.source = pattern + "";
      this.flags = flags;
      this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
      this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
    };

    RegExpValidationState.prototype.raise = function raise (message) {
      this.parser.raiseRecoverable(this.start, ("Invalid regular expression: /" + (this.source) + "/: " + message));
    };

    // If u flag is given, this returns the code point at the index (it combines a surrogate pair).
    // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
    RegExpValidationState.prototype.at = function at (i, forceU) {
        if ( forceU === void 0 ) forceU = false;

      var s = this.source;
      var l = s.length;
      if (i >= l) {
        return -1
      }
      var c = s.charCodeAt(i);
      if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
        return c
      }
      var next = s.charCodeAt(i + 1);
      return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c
    };

    RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {
        if ( forceU === void 0 ) forceU = false;

      var s = this.source;
      var l = s.length;
      if (i >= l) {
        return l
      }
      var c = s.charCodeAt(i), next;
      if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||
          (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
        return i + 1
      }
      return i + 2
    };

    RegExpValidationState.prototype.current = function current (forceU) {
        if ( forceU === void 0 ) forceU = false;

      return this.at(this.pos, forceU)
    };

    RegExpValidationState.prototype.lookahead = function lookahead (forceU) {
        if ( forceU === void 0 ) forceU = false;

      return this.at(this.nextIndex(this.pos, forceU), forceU)
    };

    RegExpValidationState.prototype.advance = function advance (forceU) {
        if ( forceU === void 0 ) forceU = false;

      this.pos = this.nextIndex(this.pos, forceU);
    };

    RegExpValidationState.prototype.eat = function eat (ch, forceU) {
        if ( forceU === void 0 ) forceU = false;

      if (this.current(forceU) === ch) {
        this.advance(forceU);
        return true
      }
      return false
    };

    function codePointToString(ch) {
      if (ch <= 0xFFFF) { return String.fromCharCode(ch) }
      ch -= 0x10000;
      return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)
    }

    /**
     * Validate the flags part of a given RegExpLiteral.
     *
     * @param {RegExpValidationState} state The state to validate RegExp.
     * @returns {void}
     */
    pp$8.validateRegExpFlags = function(state) {
      var validFlags = state.validFlags;
      var flags = state.flags;

      for (var i = 0; i < flags.length; i++) {
        var flag = flags.charAt(i);
        if (validFlags.indexOf(flag) === -1) {
          this.raise(state.start, "Invalid regular expression flag");
        }
        if (flags.indexOf(flag, i + 1) > -1) {
          this.raise(state.start, "Duplicate regular expression flag");
        }
      }
    };

    /**
     * Validate the pattern part of a given RegExpLiteral.
     *
     * @param {RegExpValidationState} state The state to validate RegExp.
     * @returns {void}
     */
    pp$8.validateRegExpPattern = function(state) {
      this.regexp_pattern(state);

      // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
      // parsing contains a |GroupName|, reparse with the goal symbol
      // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
      // exception if _P_ did not conform to the grammar, if any elements of _P_
      // were not matched by the parse, or if any Early Error conditions exist.
      if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
        state.switchN = true;
        this.regexp_pattern(state);
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
    pp$8.regexp_pattern = function(state) {
      state.pos = 0;
      state.lastIntValue = 0;
      state.lastStringValue = "";
      state.lastAssertionIsQuantifiable = false;
      state.numCapturingParens = 0;
      state.maxBackReference = 0;
      state.groupNames.length = 0;
      state.backReferenceNames.length = 0;

      this.regexp_disjunction(state);

      if (state.pos !== state.source.length) {
        // Make the same messages as V8.
        if (state.eat(0x29 /* ) */)) {
          state.raise("Unmatched ')'");
        }
        if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {
          state.raise("Lone quantifier brackets");
        }
      }
      if (state.maxBackReference > state.numCapturingParens) {
        state.raise("Invalid escape");
      }
      for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
        var name = list[i];

        if (state.groupNames.indexOf(name) === -1) {
          state.raise("Invalid named capture referenced");
        }
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
    pp$8.regexp_disjunction = function(state) {
      this.regexp_alternative(state);
      while (state.eat(0x7C /* | */)) {
        this.regexp_alternative(state);
      }

      // Make the same message as V8.
      if (this.regexp_eatQuantifier(state, true)) {
        state.raise("Nothing to repeat");
      }
      if (state.eat(0x7B /* { */)) {
        state.raise("Lone quantifier brackets");
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
    pp$8.regexp_alternative = function(state) {
      while (state.pos < state.source.length && this.regexp_eatTerm(state))
        { }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
    pp$8.regexp_eatTerm = function(state) {
      if (this.regexp_eatAssertion(state)) {
        // Handle `QuantifiableAssertion Quantifier` alternative.
        // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
        // is a QuantifiableAssertion.
        if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
          // Make the same message as V8.
          if (state.switchU) {
            state.raise("Invalid quantifier");
          }
        }
        return true
      }

      if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
        this.regexp_eatQuantifier(state);
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
    pp$8.regexp_eatAssertion = function(state) {
      var start = state.pos;
      state.lastAssertionIsQuantifiable = false;

      // ^, $
      if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {
        return true
      }

      // \b \B
      if (state.eat(0x5C /* \ */)) {
        if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {
          return true
        }
        state.pos = start;
      }

      // Lookahead / Lookbehind
      if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {
        var lookbehind = false;
        if (this.options.ecmaVersion >= 9) {
          lookbehind = state.eat(0x3C /* < */);
        }
        if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {
          this.regexp_disjunction(state);
          if (!state.eat(0x29 /* ) */)) {
            state.raise("Unterminated group");
          }
          state.lastAssertionIsQuantifiable = !lookbehind;
          return true
        }
      }

      state.pos = start;
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
    pp$8.regexp_eatQuantifier = function(state, noError) {
      if ( noError === void 0 ) noError = false;

      if (this.regexp_eatQuantifierPrefix(state, noError)) {
        state.eat(0x3F /* ? */);
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
    pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
      return (
        state.eat(0x2A /* * */) ||
        state.eat(0x2B /* + */) ||
        state.eat(0x3F /* ? */) ||
        this.regexp_eatBracedQuantifier(state, noError)
      )
    };
    pp$8.regexp_eatBracedQuantifier = function(state, noError) {
      var start = state.pos;
      if (state.eat(0x7B /* { */)) {
        var min = 0, max = -1;
        if (this.regexp_eatDecimalDigits(state)) {
          min = state.lastIntValue;
          if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {
            max = state.lastIntValue;
          }
          if (state.eat(0x7D /* } */)) {
            // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
            if (max !== -1 && max < min && !noError) {
              state.raise("numbers out of order in {} quantifier");
            }
            return true
          }
        }
        if (state.switchU && !noError) {
          state.raise("Incomplete quantifier");
        }
        state.pos = start;
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
    pp$8.regexp_eatAtom = function(state) {
      return (
        this.regexp_eatPatternCharacters(state) ||
        state.eat(0x2E /* . */) ||
        this.regexp_eatReverseSolidusAtomEscape(state) ||
        this.regexp_eatCharacterClass(state) ||
        this.regexp_eatUncapturingGroup(state) ||
        this.regexp_eatCapturingGroup(state)
      )
    };
    pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
      var start = state.pos;
      if (state.eat(0x5C /* \ */)) {
        if (this.regexp_eatAtomEscape(state)) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$8.regexp_eatUncapturingGroup = function(state) {
      var start = state.pos;
      if (state.eat(0x28 /* ( */)) {
        if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {
          this.regexp_disjunction(state);
          if (state.eat(0x29 /* ) */)) {
            return true
          }
          state.raise("Unterminated group");
        }
        state.pos = start;
      }
      return false
    };
    pp$8.regexp_eatCapturingGroup = function(state) {
      if (state.eat(0x28 /* ( */)) {
        if (this.options.ecmaVersion >= 9) {
          this.regexp_groupSpecifier(state);
        } else if (state.current() === 0x3F /* ? */) {
          state.raise("Invalid group");
        }
        this.regexp_disjunction(state);
        if (state.eat(0x29 /* ) */)) {
          state.numCapturingParens += 1;
          return true
        }
        state.raise("Unterminated group");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
    pp$8.regexp_eatExtendedAtom = function(state) {
      return (
        state.eat(0x2E /* . */) ||
        this.regexp_eatReverseSolidusAtomEscape(state) ||
        this.regexp_eatCharacterClass(state) ||
        this.regexp_eatUncapturingGroup(state) ||
        this.regexp_eatCapturingGroup(state) ||
        this.regexp_eatInvalidBracedQuantifier(state) ||
        this.regexp_eatExtendedPatternCharacter(state)
      )
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
    pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
      if (this.regexp_eatBracedQuantifier(state, true)) {
        state.raise("Nothing to repeat");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
    pp$8.regexp_eatSyntaxCharacter = function(state) {
      var ch = state.current();
      if (isSyntaxCharacter(ch)) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }
      return false
    };
    function isSyntaxCharacter(ch) {
      return (
        ch === 0x24 /* $ */ ||
        ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||
        ch === 0x2E /* . */ ||
        ch === 0x3F /* ? */ ||
        ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||
        ch >= 0x7B /* { */ && ch <= 0x7D /* } */
      )
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
    // But eat eager.
    pp$8.regexp_eatPatternCharacters = function(state) {
      var start = state.pos;
      var ch = 0;
      while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
        state.advance();
      }
      return state.pos !== start
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
    pp$8.regexp_eatExtendedPatternCharacter = function(state) {
      var ch = state.current();
      if (
        ch !== -1 &&
        ch !== 0x24 /* $ */ &&
        !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&
        ch !== 0x2E /* . */ &&
        ch !== 0x3F /* ? */ &&
        ch !== 0x5B /* [ */ &&
        ch !== 0x5E /* ^ */ &&
        ch !== 0x7C /* | */
      ) {
        state.advance();
        return true
      }
      return false
    };

    // GroupSpecifier ::
    //   [empty]
    //   `?` GroupName
    pp$8.regexp_groupSpecifier = function(state) {
      if (state.eat(0x3F /* ? */)) {
        if (this.regexp_eatGroupName(state)) {
          if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
            state.raise("Duplicate capture group name");
          }
          state.groupNames.push(state.lastStringValue);
          return
        }
        state.raise("Invalid group");
      }
    };

    // GroupName ::
    //   `<` RegExpIdentifierName `>`
    // Note: this updates `state.lastStringValue` property with the eaten name.
    pp$8.regexp_eatGroupName = function(state) {
      state.lastStringValue = "";
      if (state.eat(0x3C /* < */)) {
        if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {
          return true
        }
        state.raise("Invalid capture group name");
      }
      return false
    };

    // RegExpIdentifierName ::
    //   RegExpIdentifierStart
    //   RegExpIdentifierName RegExpIdentifierPart
    // Note: this updates `state.lastStringValue` property with the eaten name.
    pp$8.regexp_eatRegExpIdentifierName = function(state) {
      state.lastStringValue = "";
      if (this.regexp_eatRegExpIdentifierStart(state)) {
        state.lastStringValue += codePointToString(state.lastIntValue);
        while (this.regexp_eatRegExpIdentifierPart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
        }
        return true
      }
      return false
    };

    // RegExpIdentifierStart ::
    //   UnicodeIDStart
    //   `$`
    //   `_`
    //   `\` RegExpUnicodeEscapeSequence[+U]
    pp$8.regexp_eatRegExpIdentifierStart = function(state) {
      var start = state.pos;
      var forceU = this.options.ecmaVersion >= 11;
      var ch = state.current(forceU);
      state.advance(forceU);

      if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
        ch = state.lastIntValue;
      }
      if (isRegExpIdentifierStart(ch)) {
        state.lastIntValue = ch;
        return true
      }

      state.pos = start;
      return false
    };
    function isRegExpIdentifierStart(ch) {
      return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */
    }

    // RegExpIdentifierPart ::
    //   UnicodeIDContinue
    //   `$`
    //   `_`
    //   `\` RegExpUnicodeEscapeSequence[+U]
    //   <ZWNJ>
    //   <ZWJ>
    pp$8.regexp_eatRegExpIdentifierPart = function(state) {
      var start = state.pos;
      var forceU = this.options.ecmaVersion >= 11;
      var ch = state.current(forceU);
      state.advance(forceU);

      if (ch === 0x5C /* \ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
        ch = state.lastIntValue;
      }
      if (isRegExpIdentifierPart(ch)) {
        state.lastIntValue = ch;
        return true
      }

      state.pos = start;
      return false
    };
    function isRegExpIdentifierPart(ch) {
      return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
    pp$8.regexp_eatAtomEscape = function(state) {
      if (
        this.regexp_eatBackReference(state) ||
        this.regexp_eatCharacterClassEscape(state) ||
        this.regexp_eatCharacterEscape(state) ||
        (state.switchN && this.regexp_eatKGroupName(state))
      ) {
        return true
      }
      if (state.switchU) {
        // Make the same message as V8.
        if (state.current() === 0x63 /* c */) {
          state.raise("Invalid unicode escape");
        }
        state.raise("Invalid escape");
      }
      return false
    };
    pp$8.regexp_eatBackReference = function(state) {
      var start = state.pos;
      if (this.regexp_eatDecimalEscape(state)) {
        var n = state.lastIntValue;
        if (state.switchU) {
          // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
          if (n > state.maxBackReference) {
            state.maxBackReference = n;
          }
          return true
        }
        if (n <= state.numCapturingParens) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$8.regexp_eatKGroupName = function(state) {
      if (state.eat(0x6B /* k */)) {
        if (this.regexp_eatGroupName(state)) {
          state.backReferenceNames.push(state.lastStringValue);
          return true
        }
        state.raise("Invalid named reference");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
    pp$8.regexp_eatCharacterEscape = function(state) {
      return (
        this.regexp_eatControlEscape(state) ||
        this.regexp_eatCControlLetter(state) ||
        this.regexp_eatZero(state) ||
        this.regexp_eatHexEscapeSequence(state) ||
        this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||
        (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||
        this.regexp_eatIdentityEscape(state)
      )
    };
    pp$8.regexp_eatCControlLetter = function(state) {
      var start = state.pos;
      if (state.eat(0x63 /* c */)) {
        if (this.regexp_eatControlLetter(state)) {
          return true
        }
        state.pos = start;
      }
      return false
    };
    pp$8.regexp_eatZero = function(state) {
      if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {
        state.lastIntValue = 0;
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
    pp$8.regexp_eatControlEscape = function(state) {
      var ch = state.current();
      if (ch === 0x74 /* t */) {
        state.lastIntValue = 0x09; /* \t */
        state.advance();
        return true
      }
      if (ch === 0x6E /* n */) {
        state.lastIntValue = 0x0A; /* \n */
        state.advance();
        return true
      }
      if (ch === 0x76 /* v */) {
        state.lastIntValue = 0x0B; /* \v */
        state.advance();
        return true
      }
      if (ch === 0x66 /* f */) {
        state.lastIntValue = 0x0C; /* \f */
        state.advance();
        return true
      }
      if (ch === 0x72 /* r */) {
        state.lastIntValue = 0x0D; /* \r */
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
    pp$8.regexp_eatControlLetter = function(state) {
      var ch = state.current();
      if (isControlLetter(ch)) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true
      }
      return false
    };
    function isControlLetter(ch) {
      return (
        (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||
        (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)
      )
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
    pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
      if ( forceU === void 0 ) forceU = false;

      var start = state.pos;
      var switchU = forceU || state.switchU;

      if (state.eat(0x75 /* u */)) {
        if (this.regexp_eatFixedHexDigits(state, 4)) {
          var lead = state.lastIntValue;
          if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
            var leadSurrogateEnd = state.pos;
            if (state.eat(0x5C /* \ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {
              var trail = state.lastIntValue;
              if (trail >= 0xDC00 && trail <= 0xDFFF) {
                state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                return true
              }
            }
            state.pos = leadSurrogateEnd;
            state.lastIntValue = lead;
          }
          return true
        }
        if (
          switchU &&
          state.eat(0x7B /* { */) &&
          this.regexp_eatHexDigits(state) &&
          state.eat(0x7D /* } */) &&
          isValidUnicode(state.lastIntValue)
        ) {
          return true
        }
        if (switchU) {
          state.raise("Invalid unicode escape");
        }
        state.pos = start;
      }

      return false
    };
    function isValidUnicode(ch) {
      return ch >= 0 && ch <= 0x10FFFF
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
    pp$8.regexp_eatIdentityEscape = function(state) {
      if (state.switchU) {
        if (this.regexp_eatSyntaxCharacter(state)) {
          return true
        }
        if (state.eat(0x2F /* / */)) {
          state.lastIntValue = 0x2F; /* / */
          return true
        }
        return false
      }

      var ch = state.current();
      if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
    pp$8.regexp_eatDecimalEscape = function(state) {
      state.lastIntValue = 0;
      var ch = state.current();
      if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {
        do {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
          state.advance();
        } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
    pp$8.regexp_eatCharacterClassEscape = function(state) {
      var ch = state.current();

      if (isCharacterClassEscape(ch)) {
        state.lastIntValue = -1;
        state.advance();
        return true
      }

      if (
        state.switchU &&
        this.options.ecmaVersion >= 9 &&
        (ch === 0x50 /* P */ || ch === 0x70 /* p */)
      ) {
        state.lastIntValue = -1;
        state.advance();
        if (
          state.eat(0x7B /* { */) &&
          this.regexp_eatUnicodePropertyValueExpression(state) &&
          state.eat(0x7D /* } */)
        ) {
          return true
        }
        state.raise("Invalid property name");
      }

      return false
    };
    function isCharacterClassEscape(ch) {
      return (
        ch === 0x64 /* d */ ||
        ch === 0x44 /* D */ ||
        ch === 0x73 /* s */ ||
        ch === 0x53 /* S */ ||
        ch === 0x77 /* w */ ||
        ch === 0x57 /* W */
      )
    }

    // UnicodePropertyValueExpression ::
    //   UnicodePropertyName `=` UnicodePropertyValue
    //   LoneUnicodePropertyNameOrValue
    pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
      var start = state.pos;

      // UnicodePropertyName `=` UnicodePropertyValue
      if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {
        var name = state.lastStringValue;
        if (this.regexp_eatUnicodePropertyValue(state)) {
          var value = state.lastStringValue;
          this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
          return true
        }
      }
      state.pos = start;

      // LoneUnicodePropertyNameOrValue
      if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
        var nameOrValue = state.lastStringValue;
        this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        return true
      }
      return false
    };
    pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
      if (!has(state.unicodeProperties.nonBinary, name))
        { state.raise("Invalid property name"); }
      if (!state.unicodeProperties.nonBinary[name].test(value))
        { state.raise("Invalid property value"); }
    };
    pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
      if (!state.unicodeProperties.binary.test(nameOrValue))
        { state.raise("Invalid property name"); }
    };

    // UnicodePropertyName ::
    //   UnicodePropertyNameCharacters
    pp$8.regexp_eatUnicodePropertyName = function(state) {
      var ch = 0;
      state.lastStringValue = "";
      while (isUnicodePropertyNameCharacter(ch = state.current())) {
        state.lastStringValue += codePointToString(ch);
        state.advance();
      }
      return state.lastStringValue !== ""
    };
    function isUnicodePropertyNameCharacter(ch) {
      return isControlLetter(ch) || ch === 0x5F /* _ */
    }

    // UnicodePropertyValue ::
    //   UnicodePropertyValueCharacters
    pp$8.regexp_eatUnicodePropertyValue = function(state) {
      var ch = 0;
      state.lastStringValue = "";
      while (isUnicodePropertyValueCharacter(ch = state.current())) {
        state.lastStringValue += codePointToString(ch);
        state.advance();
      }
      return state.lastStringValue !== ""
    };
    function isUnicodePropertyValueCharacter(ch) {
      return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)
    }

    // LoneUnicodePropertyNameOrValue ::
    //   UnicodePropertyValueCharacters
    pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
      return this.regexp_eatUnicodePropertyValue(state)
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
    pp$8.regexp_eatCharacterClass = function(state) {
      if (state.eat(0x5B /* [ */)) {
        state.eat(0x5E /* ^ */);
        this.regexp_classRanges(state);
        if (state.eat(0x5D /* ] */)) {
          return true
        }
        // Unreachable since it threw "unterminated regular expression" error before.
        state.raise("Unterminated character class");
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
    pp$8.regexp_classRanges = function(state) {
      while (this.regexp_eatClassAtom(state)) {
        var left = state.lastIntValue;
        if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {
          var right = state.lastIntValue;
          if (state.switchU && (left === -1 || right === -1)) {
            state.raise("Invalid character class");
          }
          if (left !== -1 && right !== -1 && left > right) {
            state.raise("Range out of order in character class");
          }
        }
      }
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
    pp$8.regexp_eatClassAtom = function(state) {
      var start = state.pos;

      if (state.eat(0x5C /* \ */)) {
        if (this.regexp_eatClassEscape(state)) {
          return true
        }
        if (state.switchU) {
          // Make the same message as V8.
          var ch$1 = state.current();
          if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {
            state.raise("Invalid class escape");
          }
          state.raise("Invalid escape");
        }
        state.pos = start;
      }

      var ch = state.current();
      if (ch !== 0x5D /* ] */) {
        state.lastIntValue = ch;
        state.advance();
        return true
      }

      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
    pp$8.regexp_eatClassEscape = function(state) {
      var start = state.pos;

      if (state.eat(0x62 /* b */)) {
        state.lastIntValue = 0x08; /* <BS> */
        return true
      }

      if (state.switchU && state.eat(0x2D /* - */)) {
        state.lastIntValue = 0x2D; /* - */
        return true
      }

      if (!state.switchU && state.eat(0x63 /* c */)) {
        if (this.regexp_eatClassControlLetter(state)) {
          return true
        }
        state.pos = start;
      }

      return (
        this.regexp_eatCharacterClassEscape(state) ||
        this.regexp_eatCharacterEscape(state)
      )
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
    pp$8.regexp_eatClassControlLetter = function(state) {
      var ch = state.current();
      if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
    pp$8.regexp_eatHexEscapeSequence = function(state) {
      var start = state.pos;
      if (state.eat(0x78 /* x */)) {
        if (this.regexp_eatFixedHexDigits(state, 2)) {
          return true
        }
        if (state.switchU) {
          state.raise("Invalid escape");
        }
        state.pos = start;
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
    pp$8.regexp_eatDecimalDigits = function(state) {
      var start = state.pos;
      var ch = 0;
      state.lastIntValue = 0;
      while (isDecimalDigit(ch = state.current())) {
        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);
        state.advance();
      }
      return state.pos !== start
    };
    function isDecimalDigit(ch) {
      return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
    pp$8.regexp_eatHexDigits = function(state) {
      var start = state.pos;
      var ch = 0;
      state.lastIntValue = 0;
      while (isHexDigit(ch = state.current())) {
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
      }
      return state.pos !== start
    };
    function isHexDigit(ch) {
      return (
        (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||
        (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||
        (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)
      )
    }
    function hexToInt(ch) {
      if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {
        return 10 + (ch - 0x41 /* A */)
      }
      if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {
        return 10 + (ch - 0x61 /* a */)
      }
      return ch - 0x30 /* 0 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
    // Allows only 0-377(octal) i.e. 0-255(decimal).
    pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
      if (this.regexp_eatOctalDigit(state)) {
        var n1 = state.lastIntValue;
        if (this.regexp_eatOctalDigit(state)) {
          var n2 = state.lastIntValue;
          if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
            state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
          } else {
            state.lastIntValue = n1 * 8 + n2;
          }
        } else {
          state.lastIntValue = n1;
        }
        return true
      }
      return false
    };

    // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
    pp$8.regexp_eatOctalDigit = function(state) {
      var ch = state.current();
      if (isOctalDigit(ch)) {
        state.lastIntValue = ch - 0x30; /* 0 */
        state.advance();
        return true
      }
      state.lastIntValue = 0;
      return false
    };
    function isOctalDigit(ch) {
      return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */
    }

    // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
    // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
    pp$8.regexp_eatFixedHexDigits = function(state, length) {
      var start = state.pos;
      state.lastIntValue = 0;
      for (var i = 0; i < length; ++i) {
        var ch = state.current();
        if (!isHexDigit(ch)) {
          state.pos = start;
          return false
        }
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
      }
      return true
    };

    // Object type used to represent tokens. Note that normally, tokens
    // simply exist as properties on the parser object. This is only
    // used for the onToken callback and the external tokenizer.

    var Token = function Token(p) {
      this.type = p.type;
      this.value = p.value;
      this.start = p.start;
      this.end = p.end;
      if (p.options.locations)
        { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }
      if (p.options.ranges)
        { this.range = [p.start, p.end]; }
    };

    // ## Tokenizer

    var pp$9 = Parser.prototype;

    // Move to the next token

    pp$9.next = function(ignoreEscapeSequenceInKeyword) {
      if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)
        { this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword); }
      if (this.options.onToken)
        { this.options.onToken(new Token(this)); }

      this.lastTokEnd = this.end;
      this.lastTokStart = this.start;
      this.lastTokEndLoc = this.endLoc;
      this.lastTokStartLoc = this.startLoc;
      this.nextToken();
    };

    pp$9.getToken = function() {
      this.next();
      return new Token(this)
    };

    // If we're in an ES6 environment, make parsers iterable
    if (typeof Symbol !== "undefined")
      { pp$9[Symbol.iterator] = function() {
        var this$1 = this;

        return {
          next: function () {
            var token = this$1.getToken();
            return {
              done: token.type === types.eof,
              value: token
            }
          }
        }
      }; }

    // Toggle strict mode. Re-reads the next number or string to please
    // pedantic tests (`"use strict"; 010;` should fail).

    pp$9.curContext = function() {
      return this.context[this.context.length - 1]
    };

    // Read a single token, updating the parser object's token-related
    // properties.

    pp$9.nextToken = function() {
      var curContext = this.curContext();
      if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }

      this.start = this.pos;
      if (this.options.locations) { this.startLoc = this.curPosition(); }
      if (this.pos >= this.input.length) { return this.finishToken(types.eof) }

      if (curContext.override) { return curContext.override(this) }
      else { this.readToken(this.fullCharCodeAtPos()); }
    };

    pp$9.readToken = function(code) {
      // Identifier or keyword. '\uXXXX' sequences are allowed in
      // identifiers, so '\' also dispatches to that.
      if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
        { return this.readWord() }

      return this.getTokenFromCode(code)
    };

    pp$9.fullCharCodeAtPos = function() {
      var code = this.input.charCodeAt(this.pos);
      if (code <= 0xd7ff || code >= 0xe000) { return code }
      var next = this.input.charCodeAt(this.pos + 1);
      return (code << 10) + next - 0x35fdc00
    };

    pp$9.skipBlockComment = function() {
      var startLoc = this.options.onComment && this.curPosition();
      var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
      if (end === -1) { this.raise(this.pos - 2, "Unterminated comment"); }
      this.pos = end + 2;
      if (this.options.locations) {
        lineBreakG.lastIndex = start;
        var match;
        while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
          ++this.curLine;
          this.lineStart = match.index + match[0].length;
        }
      }
      if (this.options.onComment)
        { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                               startLoc, this.curPosition()); }
    };

    pp$9.skipLineComment = function(startSkip) {
      var start = this.pos;
      var startLoc = this.options.onComment && this.curPosition();
      var ch = this.input.charCodeAt(this.pos += startSkip);
      while (this.pos < this.input.length && !isNewLine(ch)) {
        ch = this.input.charCodeAt(++this.pos);
      }
      if (this.options.onComment)
        { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                               startLoc, this.curPosition()); }
    };

    // Called at the start of the parse and after every token. Skips
    // whitespace and comments, and.

    pp$9.skipSpace = function() {
      loop: while (this.pos < this.input.length) {
        var ch = this.input.charCodeAt(this.pos);
        switch (ch) {
        case 32: case 160: // ' '
          ++this.pos;
          break
        case 13:
          if (this.input.charCodeAt(this.pos + 1) === 10) {
            ++this.pos;
          }
        case 10: case 8232: case 8233:
          ++this.pos;
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          break
        case 47: // '/'
          switch (this.input.charCodeAt(this.pos + 1)) {
          case 42: // '*'
            this.skipBlockComment();
            break
          case 47:
            this.skipLineComment(2);
            break
          default:
            break loop
          }
          break
        default:
          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
            ++this.pos;
          } else {
            break loop
          }
        }
      }
    };

    // Called at the end of every token. Sets `end`, `val`, and
    // maintains `context` and `exprAllowed`, and skips the space after
    // the token, so that the next one's `start` will point at the
    // right position.

    pp$9.finishToken = function(type, val) {
      this.end = this.pos;
      if (this.options.locations) { this.endLoc = this.curPosition(); }
      var prevType = this.type;
      this.type = type;
      this.value = val;

      this.updateContext(prevType);
    };

    // ### Token reading

    // This is the function that is called to fetch the next token. It
    // is somewhat obscure, because it works in character codes rather
    // than characters, and because operator parsing has been inlined
    // into it.
    //
    // All in the name of speed.
    //
    pp$9.readToken_dot = function() {
      var next = this.input.charCodeAt(this.pos + 1);
      if (next >= 48 && next <= 57) { return this.readNumber(true) }
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
        this.pos += 3;
        return this.finishToken(types.ellipsis)
      } else {
        ++this.pos;
        return this.finishToken(types.dot)
      }
    };

    pp$9.readToken_slash = function() { // '/'
      var next = this.input.charCodeAt(this.pos + 1);
      if (this.exprAllowed) { ++this.pos; return this.readRegexp() }
      if (next === 61) { return this.finishOp(types.assign, 2) }
      return this.finishOp(types.slash, 1)
    };

    pp$9.readToken_mult_modulo_exp = function(code) { // '%*'
      var next = this.input.charCodeAt(this.pos + 1);
      var size = 1;
      var tokentype = code === 42 ? types.star : types.modulo;

      // exponentiation operator ** and **=
      if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
        ++size;
        tokentype = types.starstar;
        next = this.input.charCodeAt(this.pos + 2);
      }

      if (next === 61) { return this.finishOp(types.assign, size + 1) }
      return this.finishOp(tokentype, size)
    };

    pp$9.readToken_pipe_amp = function(code) { // '|&'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === code) {
        if (this.options.ecmaVersion >= 12) {
          var next2 = this.input.charCodeAt(this.pos + 2);
          if (next2 === 61) { return this.finishOp(types.assign, 3) }
        }
        return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2)
      }
      if (next === 61) { return this.finishOp(types.assign, 2) }
      return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)
    };

    pp$9.readToken_caret = function() { // '^'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 61) { return this.finishOp(types.assign, 2) }
      return this.finishOp(types.bitwiseXOR, 1)
    };

    pp$9.readToken_plus_min = function(code) { // '+-'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === code) {
        if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&
            (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
          // A `-->` line comment
          this.skipLineComment(3);
          this.skipSpace();
          return this.nextToken()
        }
        return this.finishOp(types.incDec, 2)
      }
      if (next === 61) { return this.finishOp(types.assign, 2) }
      return this.finishOp(types.plusMin, 1)
    };

    pp$9.readToken_lt_gt = function(code) { // '<>'
      var next = this.input.charCodeAt(this.pos + 1);
      var size = 1;
      if (next === code) {
        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }
        return this.finishOp(types.bitShift, size)
      }
      if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&
          this.input.charCodeAt(this.pos + 3) === 45) {
        // `<!--`, an XML-style comment that should be interpreted as a line comment
        this.skipLineComment(4);
        this.skipSpace();
        return this.nextToken()
      }
      if (next === 61) { size = 2; }
      return this.finishOp(types.relational, size)
    };

    pp$9.readToken_eq_excl = function(code) { // '=!'
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }
      if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
        this.pos += 2;
        return this.finishToken(types.arrow)
      }
      return this.finishOp(code === 61 ? types.eq : types.prefix, 1)
    };

    pp$9.readToken_question = function() { // '?'
      var ecmaVersion = this.options.ecmaVersion;
      if (ecmaVersion >= 11) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 46) {
          var next2 = this.input.charCodeAt(this.pos + 2);
          if (next2 < 48 || next2 > 57) { return this.finishOp(types.questionDot, 2) }
        }
        if (next === 63) {
          if (ecmaVersion >= 12) {
            var next2$1 = this.input.charCodeAt(this.pos + 2);
            if (next2$1 === 61) { return this.finishOp(types.assign, 3) }
          }
          return this.finishOp(types.coalesce, 2)
        }
      }
      return this.finishOp(types.question, 1)
    };

    pp$9.getTokenFromCode = function(code) {
      switch (code) {
      // The interpretation of a dot depends on whether it is followed
      // by a digit or another two dots.
      case 46: // '.'
        return this.readToken_dot()

      // Punctuation tokens.
      case 40: ++this.pos; return this.finishToken(types.parenL)
      case 41: ++this.pos; return this.finishToken(types.parenR)
      case 59: ++this.pos; return this.finishToken(types.semi)
      case 44: ++this.pos; return this.finishToken(types.comma)
      case 91: ++this.pos; return this.finishToken(types.bracketL)
      case 93: ++this.pos; return this.finishToken(types.bracketR)
      case 123: ++this.pos; return this.finishToken(types.braceL)
      case 125: ++this.pos; return this.finishToken(types.braceR)
      case 58: ++this.pos; return this.finishToken(types.colon)

      case 96: // '`'
        if (this.options.ecmaVersion < 6) { break }
        ++this.pos;
        return this.finishToken(types.backQuote)

      case 48: // '0'
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number
        if (this.options.ecmaVersion >= 6) {
          if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number
          if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number
        }

      // Anything else beginning with a digit is an integer, octal
      // number, or float.
      case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
        return this.readNumber(false)

      // Quotes produce strings.
      case 34: case 39: // '"', "'"
        return this.readString(code)

      // Operators are parsed inline in tiny state machines. '=' (61) is
      // often referred to. `finishOp` simply skips the amount of
      // characters it is given as second argument, and returns a token
      // of the type given by its first argument.

      case 47: // '/'
        return this.readToken_slash()

      case 37: case 42: // '%*'
        return this.readToken_mult_modulo_exp(code)

      case 124: case 38: // '|&'
        return this.readToken_pipe_amp(code)

      case 94: // '^'
        return this.readToken_caret()

      case 43: case 45: // '+-'
        return this.readToken_plus_min(code)

      case 60: case 62: // '<>'
        return this.readToken_lt_gt(code)

      case 61: case 33: // '=!'
        return this.readToken_eq_excl(code)

      case 63: // '?'
        return this.readToken_question()

      case 126: // '~'
        return this.finishOp(types.prefix, 1)
      }

      this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
    };

    pp$9.finishOp = function(type, size) {
      var str = this.input.slice(this.pos, this.pos + size);
      this.pos += size;
      return this.finishToken(type, str)
    };

    pp$9.readRegexp = function() {
      var escaped, inClass, start = this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(start, "Unterminated regular expression"); }
        var ch = this.input.charAt(this.pos);
        if (lineBreak.test(ch)) { this.raise(start, "Unterminated regular expression"); }
        if (!escaped) {
          if (ch === "[") { inClass = true; }
          else if (ch === "]" && inClass) { inClass = false; }
          else if (ch === "/" && !inClass) { break }
          escaped = ch === "\\";
        } else { escaped = false; }
        ++this.pos;
      }
      var pattern = this.input.slice(start, this.pos);
      ++this.pos;
      var flagsStart = this.pos;
      var flags = this.readWord1();
      if (this.containsEsc) { this.unexpected(flagsStart); }

      // Validate pattern
      var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
      state.reset(start, pattern, flags);
      this.validateRegExpFlags(state);
      this.validateRegExpPattern(state);

      // Create Literal#value property value.
      var value = null;
      try {
        value = new RegExp(pattern, flags);
      } catch (e) {
        // ESTree requires null if it failed to instantiate RegExp object.
        // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
      }

      return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})
    };

    // Read an integer in the given radix. Return null if zero digits
    // were read, the integer value otherwise. When `len` is given, this
    // will return `null` unless the integer has exactly `len` digits.

    pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
      // `len` is used for character escape sequences. In that case, disallow separators.
      var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;

      // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
      // and isn't fraction part nor exponent part. In that case, if the first digit
      // is zero then disallow separators.
      var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;

      var start = this.pos, total = 0, lastCode = 0;
      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
        var code = this.input.charCodeAt(this.pos), val = (void 0);

        if (allowSeparators && code === 95) {
          if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"); }
          if (lastCode === 95) { this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"); }
          if (i === 0) { this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"); }
          lastCode = code;
          continue
        }

        if (code >= 97) { val = code - 97 + 10; } // a
        else if (code >= 65) { val = code - 65 + 10; } // A
        else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9
        else { val = Infinity; }
        if (val >= radix) { break }
        lastCode = code;
        total = total * radix + val;
      }

      if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"); }
      if (this.pos === start || len != null && this.pos - start !== len) { return null }

      return total
    };

    function stringToNumber(str, isLegacyOctalNumericLiteral) {
      if (isLegacyOctalNumericLiteral) {
        return parseInt(str, 8)
      }

      // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
      return parseFloat(str.replace(/_/g, ""))
    }

    function stringToBigInt(str) {
      if (typeof BigInt !== "function") {
        return null
      }

      // `BigInt(value)` throws syntax error if the string contains numeric separators.
      return BigInt(str.replace(/_/g, ""))
    }

    pp$9.readRadixNumber = function(radix) {
      var start = this.pos;
      this.pos += 2; // 0x
      var val = this.readInt(radix);
      if (val == null) { this.raise(this.start + 2, "Expected number in radix " + radix); }
      if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
        val = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
      return this.finishToken(types.num, val)
    };

    // Read an integer, octal integer, or floating-point number.

    pp$9.readNumber = function(startsWithDot) {
      var start = this.pos;
      if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, "Invalid number"); }
      var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
      if (octal && this.strict) { this.raise(start, "Invalid number"); }
      var next = this.input.charCodeAt(this.pos);
      if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
        var val$1 = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
        if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }
        return this.finishToken(types.num, val$1)
      }
      if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }
      if (next === 46 && !octal) { // '.'
        ++this.pos;
        this.readInt(10);
        next = this.input.charCodeAt(this.pos);
      }
      if ((next === 69 || next === 101) && !octal) { // 'eE'
        next = this.input.charCodeAt(++this.pos);
        if (next === 43 || next === 45) { ++this.pos; } // '+-'
        if (this.readInt(10) === null) { this.raise(start, "Invalid number"); }
      }
      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, "Identifier directly after number"); }

      var val = stringToNumber(this.input.slice(start, this.pos), octal);
      return this.finishToken(types.num, val)
    };

    // Read a string value, interpreting backslash-escapes.

    pp$9.readCodePoint = function() {
      var ch = this.input.charCodeAt(this.pos), code;

      if (ch === 123) { // '{'
        if (this.options.ecmaVersion < 6) { this.unexpected(); }
        var codePos = ++this.pos;
        code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
        ++this.pos;
        if (code > 0x10FFFF) { this.invalidStringToken(codePos, "Code point out of bounds"); }
      } else {
        code = this.readHexChar(4);
      }
      return code
    };

    function codePointToString$1(code) {
      // UTF-16 Decoding
      if (code <= 0xFFFF) { return String.fromCharCode(code) }
      code -= 0x10000;
      return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
    }

    pp$9.readString = function(quote) {
      var out = "", chunkStart = ++this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated string constant"); }
        var ch = this.input.charCodeAt(this.pos);
        if (ch === quote) { break }
        if (ch === 92) { // '\'
          out += this.input.slice(chunkStart, this.pos);
          out += this.readEscapedChar(false);
          chunkStart = this.pos;
        } else {
          if (isNewLine(ch, this.options.ecmaVersion >= 10)) { this.raise(this.start, "Unterminated string constant"); }
          ++this.pos;
        }
      }
      out += this.input.slice(chunkStart, this.pos++);
      return this.finishToken(types.string, out)
    };

    // Reads template string tokens.

    var INVALID_TEMPLATE_ESCAPE_ERROR = {};

    pp$9.tryReadTemplateToken = function() {
      this.inTemplateElement = true;
      try {
        this.readTmplToken();
      } catch (err) {
        if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
          this.readInvalidTemplateToken();
        } else {
          throw err
        }
      }

      this.inTemplateElement = false;
    };

    pp$9.invalidStringToken = function(position, message) {
      if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
        throw INVALID_TEMPLATE_ESCAPE_ERROR
      } else {
        this.raise(position, message);
      }
    };

    pp$9.readTmplToken = function() {
      var out = "", chunkStart = this.pos;
      for (;;) {
        if (this.pos >= this.input.length) { this.raise(this.start, "Unterminated template"); }
        var ch = this.input.charCodeAt(this.pos);
        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'
          if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
            if (ch === 36) {
              this.pos += 2;
              return this.finishToken(types.dollarBraceL)
            } else {
              ++this.pos;
              return this.finishToken(types.backQuote)
            }
          }
          out += this.input.slice(chunkStart, this.pos);
          return this.finishToken(types.template, out)
        }
        if (ch === 92) { // '\'
          out += this.input.slice(chunkStart, this.pos);
          out += this.readEscapedChar(true);
          chunkStart = this.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.pos);
          ++this.pos;
          switch (ch) {
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }
          case 10:
            out += "\n";
            break
          default:
            out += String.fromCharCode(ch);
            break
          }
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          chunkStart = this.pos;
        } else {
          ++this.pos;
        }
      }
    };

    // Reads a template token to search for the end, without validating any escape sequences
    pp$9.readInvalidTemplateToken = function() {
      for (; this.pos < this.input.length; this.pos++) {
        switch (this.input[this.pos]) {
        case "\\":
          ++this.pos;
          break

        case "$":
          if (this.input[this.pos + 1] !== "{") {
            break
          }
        // falls through

        case "`":
          return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos))

        // no default
        }
      }
      this.raise(this.start, "Unterminated template");
    };

    // Used to read escaped characters

    pp$9.readEscapedChar = function(inTemplate) {
      var ch = this.input.charCodeAt(++this.pos);
      ++this.pos;
      switch (ch) {
      case 110: return "\n" // 'n' -> '\n'
      case 114: return "\r" // 'r' -> '\r'
      case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
      case 117: return codePointToString$1(this.readCodePoint()) // 'u'
      case 116: return "\t" // 't' -> '\t'
      case 98: return "\b" // 'b' -> '\b'
      case 118: return "\u000b" // 'v' -> '\u000b'
      case 102: return "\f" // 'f' -> '\f'
      case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\r\n'
      case 10: // ' \n'
        if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }
        return ""
      case 56:
      case 57:
        if (inTemplate) {
          var codePos = this.pos - 1;

          this.invalidStringToken(
            codePos,
            "Invalid escape sequence in template string"
          );

          return null
        }
      default:
        if (ch >= 48 && ch <= 55) {
          var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
          var octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          this.pos += octalStr.length - 1;
          ch = this.input.charCodeAt(this.pos);
          if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
            this.invalidStringToken(
              this.pos - 1 - octalStr.length,
              inTemplate
                ? "Octal literal in template string"
                : "Octal literal in strict mode"
            );
          }
          return String.fromCharCode(octal)
        }
        if (isNewLine(ch)) {
          // Unicode new line characters after \ get removed from output in both
          // template literals and strings
          return ""
        }
        return String.fromCharCode(ch)
      }
    };

    // Used to read character escape sequences ('\x', '\u', '\U').

    pp$9.readHexChar = function(len) {
      var codePos = this.pos;
      var n = this.readInt(16, len);
      if (n === null) { this.invalidStringToken(codePos, "Bad character escape sequence"); }
      return n
    };

    // Read an identifier, and return it as a string. Sets `this.containsEsc`
    // to whether the word contained a '\u' escape.
    //
    // Incrementally adds only escaped chars, adding other chunks as-is
    // as a micro-optimization.

    pp$9.readWord1 = function() {
      this.containsEsc = false;
      var word = "", first = true, chunkStart = this.pos;
      var astral = this.options.ecmaVersion >= 6;
      while (this.pos < this.input.length) {
        var ch = this.fullCharCodeAtPos();
        if (isIdentifierChar(ch, astral)) {
          this.pos += ch <= 0xffff ? 1 : 2;
        } else if (ch === 92) { // "\"
          this.containsEsc = true;
          word += this.input.slice(chunkStart, this.pos);
          var escStart = this.pos;
          if (this.input.charCodeAt(++this.pos) !== 117) // "u"
            { this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"); }
          ++this.pos;
          var esc = this.readCodePoint();
          if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
            { this.invalidStringToken(escStart, "Invalid Unicode escape"); }
          word += codePointToString$1(esc);
          chunkStart = this.pos;
        } else {
          break
        }
        first = false;
      }
      return word + this.input.slice(chunkStart, this.pos)
    };

    // Read an identifier or keyword token. Will check for reserved
    // words when necessary.

    pp$9.readWord = function() {
      var word = this.readWord1();
      var type = types.name;
      if (this.keywords.test(word)) {
        type = keywords$1[word];
      }
      return this.finishToken(type, word)
    };

    // Acorn is a tiny, fast JavaScript parser written in JavaScript.

    var version = "7.4.1";

    Parser.acorn = {
      Parser: Parser,
      version: version,
      defaultOptions: defaultOptions,
      Position: Position,
      SourceLocation: SourceLocation,
      getLineInfo: getLineInfo,
      Node: Node,
      TokenType: TokenType,
      tokTypes: types,
      keywordTypes: keywords$1,
      TokContext: TokContext,
      tokContexts: types$1,
      isIdentifierChar: isIdentifierChar,
      isIdentifierStart: isIdentifierStart,
      Token: Token,
      isNewLine: isNewLine,
      lineBreak: lineBreak,
      lineBreakG: lineBreakG,
      nonASCIIwhitespace: nonASCIIwhitespace
    };

    // The main exported interface (under `self.acorn` when in the
    // browser) is a `parse` function that takes a code string and
    // returns an abstract syntax tree as specified by [Mozilla parser
    // API][api].
    //
    // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

    function parse(input, options) {
      return Parser.parse(input, options)
    }

    // AST walker module for Mozilla Parser API compatible trees

    // A simple walk is one where you simply specify callbacks to be
    // called on specific nodes. The last two arguments are optional. A
    // simple use would be
    //
    //     walk.simple(myTree, {
    //         Expression: function(node) { ... }
    //     });
    //
    // to do something with all expressions. All Parser API node types
    // can be used to identify node types, as well as Expression and
    // Statement, which denote categories of nodes.
    //
    // The base argument can be used to pass a custom (recursive)
    // walker, and state can be used to give this walked an initial
    // state.

    function simple(node, visitors, baseVisitor, state, override) {
      if (!baseVisitor) { baseVisitor = base
      ; }(function c(node, st, override) {
        var type = override || node.type, found = visitors[type];
        baseVisitor[type](node, st, c);
        if (found) { found(node, st); }
      })(node, state, override);
    }

    function skipThrough(node, st, c) { c(node, st); }
    function ignore(_node, _st, _c) {}

    // Node walkers.

    var base = {};

    base.Program = base.BlockStatement = function (node, st, c) {
      for (var i = 0, list = node.body; i < list.length; i += 1)
        {
        var stmt = list[i];

        c(stmt, st, "Statement");
      }
    };
    base.Statement = skipThrough;
    base.EmptyStatement = ignore;
    base.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression =
      function (node, st, c) { return c(node.expression, st, "Expression"); };
    base.IfStatement = function (node, st, c) {
      c(node.test, st, "Expression");
      c(node.consequent, st, "Statement");
      if (node.alternate) { c(node.alternate, st, "Statement"); }
    };
    base.LabeledStatement = function (node, st, c) { return c(node.body, st, "Statement"); };
    base.BreakStatement = base.ContinueStatement = ignore;
    base.WithStatement = function (node, st, c) {
      c(node.object, st, "Expression");
      c(node.body, st, "Statement");
    };
    base.SwitchStatement = function (node, st, c) {
      c(node.discriminant, st, "Expression");
      for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {
        var cs = list$1[i$1];

        if (cs.test) { c(cs.test, st, "Expression"); }
        for (var i = 0, list = cs.consequent; i < list.length; i += 1)
          {
          var cons = list[i];

          c(cons, st, "Statement");
        }
      }
    };
    base.SwitchCase = function (node, st, c) {
      if (node.test) { c(node.test, st, "Expression"); }
      for (var i = 0, list = node.consequent; i < list.length; i += 1)
        {
        var cons = list[i];

        c(cons, st, "Statement");
      }
    };
    base.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {
      if (node.argument) { c(node.argument, st, "Expression"); }
    };
    base.ThrowStatement = base.SpreadElement =
      function (node, st, c) { return c(node.argument, st, "Expression"); };
    base.TryStatement = function (node, st, c) {
      c(node.block, st, "Statement");
      if (node.handler) { c(node.handler, st); }
      if (node.finalizer) { c(node.finalizer, st, "Statement"); }
    };
    base.CatchClause = function (node, st, c) {
      if (node.param) { c(node.param, st, "Pattern"); }
      c(node.body, st, "Statement");
    };
    base.WhileStatement = base.DoWhileStatement = function (node, st, c) {
      c(node.test, st, "Expression");
      c(node.body, st, "Statement");
    };
    base.ForStatement = function (node, st, c) {
      if (node.init) { c(node.init, st, "ForInit"); }
      if (node.test) { c(node.test, st, "Expression"); }
      if (node.update) { c(node.update, st, "Expression"); }
      c(node.body, st, "Statement");
    };
    base.ForInStatement = base.ForOfStatement = function (node, st, c) {
      c(node.left, st, "ForInit");
      c(node.right, st, "Expression");
      c(node.body, st, "Statement");
    };
    base.ForInit = function (node, st, c) {
      if (node.type === "VariableDeclaration") { c(node, st); }
      else { c(node, st, "Expression"); }
    };
    base.DebuggerStatement = ignore;

    base.FunctionDeclaration = function (node, st, c) { return c(node, st, "Function"); };
    base.VariableDeclaration = function (node, st, c) {
      for (var i = 0, list = node.declarations; i < list.length; i += 1)
        {
        var decl = list[i];

        c(decl, st);
      }
    };
    base.VariableDeclarator = function (node, st, c) {
      c(node.id, st, "Pattern");
      if (node.init) { c(node.init, st, "Expression"); }
    };

    base.Function = function (node, st, c) {
      if (node.id) { c(node.id, st, "Pattern"); }
      for (var i = 0, list = node.params; i < list.length; i += 1)
        {
        var param = list[i];

        c(param, st, "Pattern");
      }
      c(node.body, st, node.expression ? "Expression" : "Statement");
    };

    base.Pattern = function (node, st, c) {
      if (node.type === "Identifier")
        { c(node, st, "VariablePattern"); }
      else if (node.type === "MemberExpression")
        { c(node, st, "MemberPattern"); }
      else
        { c(node, st); }
    };
    base.VariablePattern = ignore;
    base.MemberPattern = skipThrough;
    base.RestElement = function (node, st, c) { return c(node.argument, st, "Pattern"); };
    base.ArrayPattern = function (node, st, c) {
      for (var i = 0, list = node.elements; i < list.length; i += 1) {
        var elt = list[i];

        if (elt) { c(elt, st, "Pattern"); }
      }
    };
    base.ObjectPattern = function (node, st, c) {
      for (var i = 0, list = node.properties; i < list.length; i += 1) {
        var prop = list[i];

        if (prop.type === "Property") {
          if (prop.computed) { c(prop.key, st, "Expression"); }
          c(prop.value, st, "Pattern");
        } else if (prop.type === "RestElement") {
          c(prop.argument, st, "Pattern");
        }
      }
    };

    base.Expression = skipThrough;
    base.ThisExpression = base.Super = base.MetaProperty = ignore;
    base.ArrayExpression = function (node, st, c) {
      for (var i = 0, list = node.elements; i < list.length; i += 1) {
        var elt = list[i];

        if (elt) { c(elt, st, "Expression"); }
      }
    };
    base.ObjectExpression = function (node, st, c) {
      for (var i = 0, list = node.properties; i < list.length; i += 1)
        {
        var prop = list[i];

        c(prop, st);
      }
    };
    base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;
    base.SequenceExpression = function (node, st, c) {
      for (var i = 0, list = node.expressions; i < list.length; i += 1)
        {
        var expr = list[i];

        c(expr, st, "Expression");
      }
    };
    base.TemplateLiteral = function (node, st, c) {
      for (var i = 0, list = node.quasis; i < list.length; i += 1)
        {
        var quasi = list[i];

        c(quasi, st);
      }

      for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)
        {
        var expr = list$1[i$1];

        c(expr, st, "Expression");
      }
    };
    base.TemplateElement = ignore;
    base.UnaryExpression = base.UpdateExpression = function (node, st, c) {
      c(node.argument, st, "Expression");
    };
    base.BinaryExpression = base.LogicalExpression = function (node, st, c) {
      c(node.left, st, "Expression");
      c(node.right, st, "Expression");
    };
    base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {
      c(node.left, st, "Pattern");
      c(node.right, st, "Expression");
    };
    base.ConditionalExpression = function (node, st, c) {
      c(node.test, st, "Expression");
      c(node.consequent, st, "Expression");
      c(node.alternate, st, "Expression");
    };
    base.NewExpression = base.CallExpression = function (node, st, c) {
      c(node.callee, st, "Expression");
      if (node.arguments)
        { for (var i = 0, list = node.arguments; i < list.length; i += 1)
          {
            var arg = list[i];

            c(arg, st, "Expression");
          } }
    };
    base.MemberExpression = function (node, st, c) {
      c(node.object, st, "Expression");
      if (node.computed) { c(node.property, st, "Expression"); }
    };
    base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {
      if (node.declaration)
        { c(node.declaration, st, node.type === "ExportNamedDeclaration" || node.declaration.id ? "Statement" : "Expression"); }
      if (node.source) { c(node.source, st, "Expression"); }
    };
    base.ExportAllDeclaration = function (node, st, c) {
      if (node.exported)
        { c(node.exported, st); }
      c(node.source, st, "Expression");
    };
    base.ImportDeclaration = function (node, st, c) {
      for (var i = 0, list = node.specifiers; i < list.length; i += 1)
        {
        var spec = list[i];

        c(spec, st);
      }
      c(node.source, st, "Expression");
    };
    base.ImportExpression = function (node, st, c) {
      c(node.source, st, "Expression");
    };
    base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;

    base.TaggedTemplateExpression = function (node, st, c) {
      c(node.tag, st, "Expression");
      c(node.quasi, st, "Expression");
    };
    base.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, "Class"); };
    base.Class = function (node, st, c) {
      if (node.id) { c(node.id, st, "Pattern"); }
      if (node.superClass) { c(node.superClass, st, "Expression"); }
      c(node.body, st);
    };
    base.ClassBody = function (node, st, c) {
      for (var i = 0, list = node.body; i < list.length; i += 1)
        {
        var elt = list[i];

        c(elt, st);
      }
    };
    base.MethodDefinition = base.Property = function (node, st, c) {
      if (node.computed) { c(node.key, st, "Expression"); }
      c(node.value, st, "Expression");
    };

    const mod$5 = {

    	_LCHFlags (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		let ast = parse(inputData);

    		if (!ast.body.length) {
    			return [];
    		}

    		if (ast.body.length > 1) {
    			return ['LCHFlagMultipleExpressions'];
    		}

    		if (ast.body[0].type === 'ExpressionStatement' && ast.body[0].expression.type === 'SequenceExpression' && ast.body[0].expression.expressions.length > 1) {
    			return ['LCHFlagMultipleExpressions'];
    		}

    		let outputData = [];

    		function flagIdentifier(inputData) {
    			if (['eval', 'Function'].includes(inputData)) {
    				outputData.push('LCHFlagEval');
    			}

    			if (['cookie', 'localStorage', 'sessionStorage', 'indexedDB', 'Cache'].includes(inputData)) {
    				outputData.push('LCHFlagStateful');
    			}

    			if (['XMLHttpRequest', '$', 'fetch'].includes(inputData)) {
    				outputData.push('LCHFlagStateful');
    			}
    		}

    		simple(ast, {
    		  Identifier(node) {
    		  	flagIdentifier(node.name);
    		  },
    		  MemberExpression(node) {
    		  	flagIdentifier(node.property.name);
    		  },
    		});

    		return outputData;
    	},

    	LCHFlags (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return Object.entries(inputData).reduce(function (coll, item) {
    			const flags = typeof item[1] === 'string' ? mod$5._LCHFlags(item[1]) : [];
    			
    			if (flags.length) {
    				(coll = coll || {})[item[0]] = flags;
    			}
    			
    			return coll;
    		}, null);
    	},

    };

    const mod$6 = {

    	LCHRuntimeURLFilter (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!param2) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (param1 === '*') {
    			return true;
    		}

    		let match = param1.match(/^\/(.*)\/(\w*)/i);

    		if (!match || !match.shift()) {
    			return param2.includes(param1);
    		}

    		return !!param2.match(new RegExp(match[0], match[1]));
    	},

    	LCHRuntimeInputTypes(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return inputData.split(',').map(function (e) {
    			return e.trim();
    		}).filter(function (e) {
    			return !!e;
    		});
    	},

    	LCHRuntimeAPI(inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const outputData = {
    			fn (signature) {
    				if (typeof signature !== 'string') {
    					throw new Error('LCHErrorIdentifierNotString');
    				}

    				if (signature === '') {
    					throw new Error('LCHErrorIdentifierBlank');
    				}

    				if (signature.trim() !== signature) {
    					throw new Error('LCHErrorIdentifierContainsUntrimmedWhitespace');
    				}

    				let functionObject = inputData.filter(function (e) {
    					return e.LCHRecipeSignature === signature;
    				}).shift();

    				if (!functionObject) {
    					throw new Error('LCHErrorIdentifierNotDefined');
    				}

    				return functionObject.LCHRecipeCallback.bind({
    					api: outputData,
    				});
    			},
    		};

    		Object.assign(outputData, inputData.reduce(function (coll, item) {
    			if (!coll[item.LCHRecipeSignature]) {
    				coll[item.LCHRecipeSignature] = function () {
    					const args = arguments;

    					(item.LCHRecipeInputTypes ? mod$6.LCHRuntimeInputTypes(item.LCHRecipeInputTypes) : []).forEach(function (e, i) {
    						if (!coll[e](args[i])) {
    							throw new Error('LCHErrorTypeMismatch');
    						}
    					});

    					return item.LCHRecipeCallback.apply({
    						api: outputData,
    					}, args);
    				};
    			}

    			return coll;
    		}, {}));

    		Object.freeze(outputData);

    		return outputData;
    	},

    };

    const LCHTypeServiceSearchCallback = function(inputData) {
    	if (!inputData.LCHRecipeName) {
    		return false;
    	}
    	
    	if (inputData.LCHRecipeCallback.length) {
    		return false;
    	}
    	
    	if (inputData.LCHRecipeOutputType !== 'ServiceSearchURLTemplate') {
    		return false;
    	}

    	return true;
    };

    const LCHTypeServiceSearchCanonicalExampleCallback = function() {
    	return {
    		LCHRecipeName: 'alfa',
    		LCHRecipeCallback () {
    			return 'https://example.com?q=LCHSEARCHTOKEN';
    		},
    		LCHRecipeOutputType: 'ServiceSearchURLTemplate',
    	};
    };

    const LCHTypeServiceSearchRecipe = function() {
    	return {
    		LCHRecipeSignature: 'ServiceSearch',
    		LCHRecipeCallback: LCHTypeServiceSearchCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHTypeServiceSearchCanonicalExampleCallback,
    	};
    };

    var ServiceSearch = /*#__PURE__*/Object.freeze({
        LCHTypeServiceSearchCallback: LCHTypeServiceSearchCallback,
        LCHTypeServiceSearchCanonicalExampleCallback: LCHTypeServiceSearchCanonicalExampleCallback,
        LCHTypeServiceSearchRecipe: LCHTypeServiceSearchRecipe
    });

    const LCHPrimitiveBoolCallback = function(inputData) {
    	return !!inputData;
    };

    const LCHPrimitiveBoolRecipe = function() {
    	return {
    		LCHRecipeSignature: 'Bool',
    		LCHRecipeCallback: LCHPrimitiveBoolCallback,
    	};
    };

    var Bool = /*#__PURE__*/Object.freeze({
        LCHPrimitiveBoolCallback: LCHPrimitiveBoolCallback,
        LCHPrimitiveBoolRecipe: LCHPrimitiveBoolRecipe
    });

    const LCHPrimitiveDateCallback = function(inputData) {
    	if (!(inputData instanceof Date)) {
    		return false;
    	}

    	if (Number.isNaN(inputData.getTime())) {
    		return false;
    	}

    	return true;
    };

    const LCHPrimitiveDateCanonicalExampleCallback = function() {
    	return new Date(0);
    };

    const LCHPrimitiveDateRecipe = function() {
    	return {
    		LCHRecipeSignature: 'Date',
    		LCHRecipeCallback: LCHPrimitiveDateCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHPrimitiveDateCanonicalExampleCallback,
    	};
    };

    var Date$1 = /*#__PURE__*/Object.freeze({
        LCHPrimitiveDateCallback: LCHPrimitiveDateCallback,
        LCHPrimitiveDateCanonicalExampleCallback: LCHPrimitiveDateCanonicalExampleCallback,
        LCHPrimitiveDateRecipe: LCHPrimitiveDateRecipe
    });

    const LCHPrimitiveDOMElementCallback = function(inputData) {
    	if (typeof inputData !== 'object' || inputData === null) {
    		return false;
    	}

    	if (typeof inputData.focus !== 'function') {
    		return false;
    	}

    	return true;
    };

    const LCHPrimitiveDOMElementCanonicalExampleCallback = function() {
    	return {
    		focus () {},
    	};
    };

    const LCHPrimitiveDOMElementRecipe = function() {
    	return {
    		LCHRecipeCallback: LCHPrimitiveDOMElementCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHPrimitiveDOMElementCanonicalExampleCallback,
    		LCHRecipeSignature: 'DOMElement',
    		_LCHRecipeTypeIsExclusive: true,
    	};
    };

    var DOMElement = /*#__PURE__*/Object.freeze({
        LCHPrimitiveDOMElementCallback: LCHPrimitiveDOMElementCallback,
        LCHPrimitiveDOMElementCanonicalExampleCallback: LCHPrimitiveDOMElementCanonicalExampleCallback,
        LCHPrimitiveDOMElementRecipe: LCHPrimitiveDOMElementRecipe
    });

    /**
     * Check if we're required to add a port number.
     *
     * @see https://url.spec.whatwg.org/#default-port
     * @param {Number|String} port Port number we need to check
     * @param {String} protocol Protocol we need to check against.
     * @returns {Boolean} Is it a default port for the given protocol
     * @api private
     */
    var requiresPort = function required(port, protocol) {
      protocol = protocol.split(':')[0];
      port = +port;

      if (!port) return false;

      switch (protocol) {
        case 'http':
        case 'ws':
        return port !== 80;

        case 'https':
        case 'wss':
        return port !== 443;

        case 'ftp':
        return port !== 21;

        case 'gopher':
        return port !== 70;

        case 'file':
        return false;
      }

      return port !== 0;
    };

    var has$1 = Object.prototype.hasOwnProperty
      , undef;

    /**
     * Decode a URI encoded string.
     *
     * @param {String} input The URI encoded string.
     * @returns {String|Null} The decoded string.
     * @api private
     */
    function decode(input) {
      try {
        return decodeURIComponent(input.replace(/\+/g, ' '));
      } catch (e) {
        return null;
      }
    }

    /**
     * Attempts to encode a given input.
     *
     * @param {String} input The string that needs to be encoded.
     * @returns {String|Null} The encoded string.
     * @api private
     */
    function encode(input) {
      try {
        return encodeURIComponent(input);
      } catch (e) {
        return null;
      }
    }

    /**
     * Simple query string parser.
     *
     * @param {String} query The query string that needs to be parsed.
     * @returns {Object}
     * @api public
     */
    function querystring(query) {
      var parser = /([^=?#&]+)=?([^&]*)/g
        , result = {}
        , part;

      while (part = parser.exec(query)) {
        var key = decode(part[1])
          , value = decode(part[2]);

        //
        // Prevent overriding of existing properties. This ensures that build-in
        // methods like `toString` or __proto__ are not overriden by malicious
        // querystrings.
        //
        // In the case if failed decoding, we want to omit the key/value pairs
        // from the result.
        //
        if (key === null || value === null || key in result) continue;
        result[key] = value;
      }

      return result;
    }

    /**
     * Transform a query string to an object.
     *
     * @param {Object} obj Object that should be transformed.
     * @param {String} prefix Optional prefix.
     * @returns {String}
     * @api public
     */
    function querystringify(obj, prefix) {
      prefix = prefix || '';

      var pairs = []
        , value
        , key;

      //
      // Optionally prefix with a '?' if needed
      //
      if ('string' !== typeof prefix) prefix = '?';

      for (key in obj) {
        if (has$1.call(obj, key)) {
          value = obj[key];

          //
          // Edge cases where we actually want to encode the value to an empty
          // string instead of the stringified value.
          //
          if (!value && (value === null || value === undef || isNaN(value))) {
            value = '';
          }

          key = encode(key);
          value = encode(value);

          //
          // If we failed to encode the strings, we should bail out as we don't
          // want to add invalid strings to the query.
          //
          if (key === null || value === null) continue;
          pairs.push(key +'='+ value);
        }
      }

      return pairs.length ? prefix + pairs.join('&') : '';
    }

    //
    // Expose the module.
    //
    var stringify = querystringify;
    var parse$1 = querystring;

    var querystringify_1 = {
    	stringify: stringify,
    	parse: parse$1
    };

    var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/
      , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i
      , whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]'
      , left = new RegExp('^'+ whitespace +'+');

    /**
     * Trim a given string.
     *
     * @param {String} str String to trim.
     * @public
     */
    function trimLeft(str) {
      return (str ? str : '').toString().replace(left, '');
    }

    /**
     * These are the parse rules for the URL parser, it informs the parser
     * about:
     *
     * 0. The char it Needs to parse, if it's a string it should be done using
     *    indexOf, RegExp using exec and NaN means set as current value.
     * 1. The property we should set when parsing this value.
     * 2. Indication if it's backwards or forward parsing, when set as number it's
     *    the value of extra chars that should be split off.
     * 3. Inherit from location if non existing in the parser.
     * 4. `toLowerCase` the resulting value.
     */
    var rules = [
      ['#', 'hash'],                        // Extract from the back.
      ['?', 'query'],                       // Extract from the back.
      function sanitize(address) {          // Sanitize what is left of the address
        return address.replace('\\', '/');
      },
      ['/', 'pathname'],                    // Extract from the back.
      ['@', 'auth', 1],                     // Extract from the front.
      [NaN, 'host', undefined, 1, 1],       // Set left over value.
      [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
      [NaN, 'hostname', undefined, 1, 1]    // Set left over.
    ];

    /**
     * These properties should not be copied or inherited from. This is only needed
     * for all non blob URL's as a blob URL does not include a hash, only the
     * origin.
     *
     * @type {Object}
     * @private
     */
    var ignore$1 = { hash: 1, query: 1 };

    /**
     * The location object differs when your code is loaded through a normal page,
     * Worker or through a worker using a blob. And with the blobble begins the
     * trouble as the location object will contain the URL of the blob, not the
     * location of the page where our code is loaded in. The actual origin is
     * encoded in the `pathname` so we can thankfully generate a good "default"
     * location from it so we can generate proper relative URL's again.
     *
     * @param {Object|String} loc Optional default location object.
     * @returns {Object} lolcation object.
     * @public
     */
    function lolcation(loc) {
      var globalVar;

      if (typeof window !== 'undefined') globalVar = window;
      else if (typeof commonjsGlobal !== 'undefined') globalVar = commonjsGlobal;
      else if (typeof self !== 'undefined') globalVar = self;
      else globalVar = {};

      var location = globalVar.location || {};
      loc = loc || location;

      var finaldestination = {}
        , type = typeof loc
        , key;

      if ('blob:' === loc.protocol) {
        finaldestination = new Url(unescape(loc.pathname), {});
      } else if ('string' === type) {
        finaldestination = new Url(loc, {});
        for (key in ignore$1) delete finaldestination[key];
      } else if ('object' === type) {
        for (key in loc) {
          if (key in ignore$1) continue;
          finaldestination[key] = loc[key];
        }

        if (finaldestination.slashes === undefined) {
          finaldestination.slashes = slashes.test(loc.href);
        }
      }

      return finaldestination;
    }

    /**
     * @typedef ProtocolExtract
     * @type Object
     * @property {String} protocol Protocol matched in the URL, in lowercase.
     * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
     * @property {String} rest Rest of the URL that is not part of the protocol.
     */

    /**
     * Extract protocol information from a URL with/without double slash ("//").
     *
     * @param {String} address URL we want to extract from.
     * @return {ProtocolExtract} Extracted information.
     * @private
     */
    function extractProtocol(address) {
      address = trimLeft(address);

      var match = protocolre.exec(address)
        , protocol = match[1] ? match[1].toLowerCase() : ''
        , slashes = !!(match[2] && match[2].length >= 2)
        , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];

      return {
        protocol: protocol,
        slashes: slashes,
        rest: rest
      };
    }

    /**
     * Resolve a relative URL pathname against a base URL pathname.
     *
     * @param {String} relative Pathname of the relative URL.
     * @param {String} base Pathname of the base URL.
     * @return {String} Resolved pathname.
     * @private
     */
    function resolve(relative, base) {
      if (relative === '') return base;

      var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
        , i = path.length
        , last = path[i - 1]
        , unshift = false
        , up = 0;

      while (i--) {
        if (path[i] === '.') {
          path.splice(i, 1);
        } else if (path[i] === '..') {
          path.splice(i, 1);
          up++;
        } else if (up) {
          if (i === 0) unshift = true;
          path.splice(i, 1);
          up--;
        }
      }

      if (unshift) path.unshift('');
      if (last === '.' || last === '..') path.push('');

      return path.join('/');
    }

    /**
     * The actual URL instance. Instead of returning an object we've opted-in to
     * create an actual constructor as it's much more memory efficient and
     * faster and it pleases my OCD.
     *
     * It is worth noting that we should not use `URL` as class name to prevent
     * clashes with the global URL instance that got introduced in browsers.
     *
     * @constructor
     * @param {String} address URL we want to parse.
     * @param {Object|String} [location] Location defaults for relative paths.
     * @param {Boolean|Function} [parser] Parser for the query string.
     * @private
     */
    function Url(address, location, parser) {
      address = trimLeft(address);

      if (!(this instanceof Url)) {
        return new Url(address, location, parser);
      }

      var relative, extracted, parse, instruction, index, key
        , instructions = rules.slice()
        , type = typeof location
        , url = this
        , i = 0;

      //
      // The following if statements allows this module two have compatibility with
      // 2 different API:
      //
      // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
      //    where the boolean indicates that the query string should also be parsed.
      //
      // 2. The `URL` interface of the browser which accepts a URL, object as
      //    arguments. The supplied object will be used as default values / fall-back
      //    for relative paths.
      //
      if ('object' !== type && 'string' !== type) {
        parser = location;
        location = null;
      }

      if (parser && 'function' !== typeof parser) parser = querystringify_1.parse;

      location = lolcation(location);

      //
      // Extract protocol information before running the instructions.
      //
      extracted = extractProtocol(address || '');
      relative = !extracted.protocol && !extracted.slashes;
      url.slashes = extracted.slashes || relative && location.slashes;
      url.protocol = extracted.protocol || location.protocol || '';
      address = extracted.rest;

      //
      // When the authority component is absent the URL starts with a path
      // component.
      //
      if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

      for (; i < instructions.length; i++) {
        instruction = instructions[i];

        if (typeof instruction === 'function') {
          address = instruction(address);
          continue;
        }

        parse = instruction[0];
        key = instruction[1];

        if (parse !== parse) {
          url[key] = address;
        } else if ('string' === typeof parse) {
          if (~(index = address.indexOf(parse))) {
            if ('number' === typeof instruction[2]) {
              url[key] = address.slice(0, index);
              address = address.slice(index + instruction[2]);
            } else {
              url[key] = address.slice(index);
              address = address.slice(0, index);
            }
          }
        } else if ((index = parse.exec(address))) {
          url[key] = index[1];
          address = address.slice(0, index.index);
        }

        url[key] = url[key] || (
          relative && instruction[3] ? location[key] || '' : ''
        );

        //
        // Hostname, host and protocol should be lowercased so they can be used to
        // create a proper `origin`.
        //
        if (instruction[4]) url[key] = url[key].toLowerCase();
      }

      //
      // Also parse the supplied query string in to an object. If we're supplied
      // with a custom parser as function use that instead of the default build-in
      // parser.
      //
      if (parser) url.query = parser(url.query);

      //
      // If the URL is relative, resolve the pathname against the base URL.
      //
      if (
          relative
        && location.slashes
        && url.pathname.charAt(0) !== '/'
        && (url.pathname !== '' || location.pathname !== '')
      ) {
        url.pathname = resolve(url.pathname, location.pathname);
      }

      //
      // Default to a / for pathname if none exists. This normalizes the URL
      // to always have a /
      //
      if (url.pathname.charAt(0) !== '/' && url.hostname) {
        url.pathname = '/' + url.pathname;
      }

      //
      // We should not add port numbers if they are already the default port number
      // for a given protocol. As the host also contains the port number we're going
      // override it with the hostname which contains no port number.
      //
      if (!requiresPort(url.port, url.protocol)) {
        url.host = url.hostname;
        url.port = '';
      }

      //
      // Parse down the `auth` for the username and password.
      //
      url.username = url.password = '';
      if (url.auth) {
        instruction = url.auth.split(':');
        url.username = instruction[0] || '';
        url.password = instruction[1] || '';
      }

      url.origin = url.protocol && url.host && url.protocol !== 'file:'
        ? url.protocol +'//'+ url.host
        : 'null';

      //
      // The href is just the compiled result.
      //
      url.href = url.toString();
    }

    /**
     * This is convenience method for changing properties in the URL instance to
     * insure that they all propagate correctly.
     *
     * @param {String} part          Property we need to adjust.
     * @param {Mixed} value          The newly assigned value.
     * @param {Boolean|Function} fn  When setting the query, it will be the function
     *                               used to parse the query.
     *                               When setting the protocol, double slash will be
     *                               removed from the final url if it is true.
     * @returns {URL} URL instance for chaining.
     * @public
     */
    function set(part, value, fn) {
      var url = this;

      switch (part) {
        case 'query':
          if ('string' === typeof value && value.length) {
            value = (fn || querystringify_1.parse)(value);
          }

          url[part] = value;
          break;

        case 'port':
          url[part] = value;

          if (!requiresPort(value, url.protocol)) {
            url.host = url.hostname;
            url[part] = '';
          } else if (value) {
            url.host = url.hostname +':'+ value;
          }

          break;

        case 'hostname':
          url[part] = value;

          if (url.port) value += ':'+ url.port;
          url.host = value;
          break;

        case 'host':
          url[part] = value;

          if (/:\d+$/.test(value)) {
            value = value.split(':');
            url.port = value.pop();
            url.hostname = value.join(':');
          } else {
            url.hostname = value;
            url.port = '';
          }

          break;

        case 'protocol':
          url.protocol = value.toLowerCase();
          url.slashes = !fn;
          break;

        case 'pathname':
        case 'hash':
          if (value) {
            var char = part === 'pathname' ? '/' : '#';
            url[part] = value.charAt(0) !== char ? char + value : value;
          } else {
            url[part] = value;
          }
          break;

        default:
          url[part] = value;
      }

      for (var i = 0; i < rules.length; i++) {
        var ins = rules[i];

        if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
      }

      url.origin = url.protocol && url.host && url.protocol !== 'file:'
        ? url.protocol +'//'+ url.host
        : 'null';

      url.href = url.toString();

      return url;
    }

    /**
     * Transform the properties back in to a valid and full URL string.
     *
     * @param {Function} stringify Optional query stringify function.
     * @returns {String} Compiled version of the URL.
     * @public
     */
    function toString$1(stringify) {
      if (!stringify || 'function' !== typeof stringify) stringify = querystringify_1.stringify;

      var query
        , url = this
        , protocol = url.protocol;

      if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

      var result = protocol + (url.slashes ? '//' : '');

      if (url.username) {
        result += url.username;
        if (url.password) result += ':'+ url.password;
        result += '@';
      }

      result += url.host + url.pathname;

      query = 'object' === typeof url.query ? stringify(url.query) : url.query;
      if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

      if (url.hash) result += url.hash;

      return result;
    }

    Url.prototype = { set: set, toString: toString$1 };

    //
    // Expose the URL parser and some additional properties that might be useful for
    // others or testing.
    //
    Url.extractProtocol = extractProtocol;
    Url.location = lolcation;
    Url.trimLeft = trimLeft;
    Url.qs = querystringify_1;

    var urlParse = Url;

    var _URLParser = /*#__PURE__*/Object.freeze({
        'default': urlParse,
        __moduleExports: urlParse
    });

    const URLParser = typeof _URLParser === 'function' ? _URLParser : urlParse;

    const LCHPrimitiveURLCallback = function(inputData) {
    	if (typeof inputData !== 'string') {
    		// throw new Error('LCHErrorInputNotValid');
    		return false;
    	}

    	if (!(new URLParser(inputData, {})).hostname) { // To parse an input independently of the browser's current URL (e.g. for functionality parity with the library in a Node environment), pass an empty location object as the second parameter
    		return false;
    	}

    	return true;
    };

    const LCHPrimitiveStringCanonicalExampleCallback = function() {
    	return 'https://example.com';
    };

    const LCHPrimitiveURLRecipe = function() {
    	return {
    		LCHRecipeSignature: 'URL',
    		LCHRecipeCallback: LCHPrimitiveURLCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHPrimitiveStringCanonicalExampleCallback,
    	};
    };

    var URL$1 = /*#__PURE__*/Object.freeze({
        LCHPrimitiveURLCallback: LCHPrimitiveURLCallback,
        LCHPrimitiveStringCanonicalExampleCallback: LCHPrimitiveStringCanonicalExampleCallback,
        LCHPrimitiveURLRecipe: LCHPrimitiveURLRecipe
    });

    const LCHPrimitiveServiceSearchURLTemplateCallback = function(inputData) {
    	if (!LCHPrimitiveURLCallback(inputData)) {
    		return false;
    	}

    	if (!inputData.match(/LCHSEARCHTOKEN/i)) {
    		return false;
    	}

    	return true;
    };

    const LCHPrimitiveServiceSearchURLTemplateCanonicalExampleCallback = function() {
    	return 'https://example.com?q=LCHSEARCHTOKEN';
    };

    const LCHPrimitiveServiceSearchURLTemplateRecipe = function() {
    	return {
    		LCHRecipeCallback: LCHPrimitiveServiceSearchURLTemplateCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHPrimitiveServiceSearchURLTemplateCanonicalExampleCallback,
    		LCHRecipeSignature: 'ServiceSearchURLTemplate',
    		_LCHRecipeTypeIsExclusive: true,
    	};
    };

    var ServiceSearchURLTemplate = /*#__PURE__*/Object.freeze({
        LCHPrimitiveServiceSearchURLTemplateCallback: LCHPrimitiveServiceSearchURLTemplateCallback,
        LCHPrimitiveServiceSearchURLTemplateCanonicalExampleCallback: LCHPrimitiveServiceSearchURLTemplateCanonicalExampleCallback,
        LCHPrimitiveServiceSearchURLTemplateRecipe: LCHPrimitiveServiceSearchURLTemplateRecipe
    });

    const LCHPrimitiveStringCallback = function(inputData) {
    	return typeof inputData === 'string';
    };

    const LCHPrimitiveStringCanonicalExampleCallback$1 = function() {
    	return '';
    };

    const LCHPrimitiveStringRecipe = function() {
    	return {
    		LCHRecipeSignature: 'String',
    		LCHRecipeCallback: LCHPrimitiveStringCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHPrimitiveStringCanonicalExampleCallback$1,
    	};
    };

    var String$1 = /*#__PURE__*/Object.freeze({
        LCHPrimitiveStringCallback: LCHPrimitiveStringCallback,
        LCHPrimitiveStringCanonicalExampleCallback: LCHPrimitiveStringCanonicalExampleCallback$1,
        LCHPrimitiveStringRecipe: LCHPrimitiveStringRecipe
    });

    const LCHTypeCommandCallback = function(inputData) {
    	// if (LCHRecipesErrors(inputData)) {
    	// 	throw new Error('LCHErrorInputNotValid');
    	// }

    	if (!inputData.LCHRecipeName) {
    		return false;
    	}
    	
    	if (inputData.LCHRecipeCallback.length) {
    		return false;
    	}

    	return true;
    };

    const LCHTypeStringCanonicalExampleCallback = function() {
    	return {
    		LCHRecipeName: 'alfa',
    		LCHRecipeCallback () {},
    	};
    };

    const LCHTypeCommandRecipe = function() {
    	return {
    		LCHRecipeSignature: 'Command',
    		LCHRecipeCallback: LCHTypeCommandCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHTypeStringCanonicalExampleCallback,
    	};
    };

    var Command = /*#__PURE__*/Object.freeze({
        LCHTypeCommandCallback: LCHTypeCommandCallback,
        LCHTypeStringCanonicalExampleCallback: LCHTypeStringCanonicalExampleCallback,
        LCHTypeCommandRecipe: LCHTypeCommandRecipe
    });

    const LCHTypeSubjectContainerCallback = function(inputData) {
    	if (!inputData.LCHRecipeName) {
    		return false;
    	}
    	
    	if (inputData.LCHRecipeOutputType !== 'SubjectContainer') {
    		return false;
    	}

    	return true;
    };

    const LCHTypeSubjectContainerCanonicalExampleCallback = function() {
    	return {
    		LCHRecipeName: 'alfa',
    		LCHRecipeCallback () {},
    		LCHRecipeOutputType: 'SubjectContainer',
    	};
    };

    const LCHTypeSubjectContainerRecipe = function() {
    	return {
    		LCHRecipeSignature: 'SubjectContainer',
    		LCHRecipeCallback: LCHTypeSubjectContainerCallback,
    		LCHRecipeOutputType: 'Bool',
    		LCHRecipeCanonicalExampleCallback: LCHTypeSubjectContainerCanonicalExampleCallback,
    		_LCHRecipeTypeIsExclusive: true,
    	};
    };

    var SubjectContainer = /*#__PURE__*/Object.freeze({
        LCHTypeSubjectContainerCallback: LCHTypeSubjectContainerCallback,
        LCHTypeSubjectContainerCanonicalExampleCallback: LCHTypeSubjectContainerCanonicalExampleCallback,
        LCHTypeSubjectContainerRecipe: LCHTypeSubjectContainerRecipe
    });

    const LCHDateLocalOffsetSubtractedCallback = function(inputData) {
    	return new Date(Date.parse(inputData) - inputData.getTimezoneOffset() * 1000 * 60);
    };

    const LCHDateLocalOffsetSubtractedRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHDateLocalOffsetSubtracted',
    		LCHRecipeInputTypes: 'Date',
    		LCHRecipeCallback: LCHDateLocalOffsetSubtractedCallback,
    	};
    };

    var LCHDateLocalOffsetSubtracted = /*#__PURE__*/Object.freeze({
        LCHDateLocalOffsetSubtractedCallback: LCHDateLocalOffsetSubtractedCallback,
        LCHDateLocalOffsetSubtractedRecipe: LCHDateLocalOffsetSubtractedRecipe
    });

    const LCHReadTextFileCallback = async function(inputData = {}) {
    	return new Promise(function (res, rej) {
    		return Object.assign(document.createElement('input'), inputData, {
    			type: 'file',
    			onchange (event) {
    				return Object.assign(new FileReader(), {
    					onload (event) {
    						return res(event.target.result);
    					},
    				}).readAsText(event.target.files[0]);
    			},
    		}).click();
    	});
    };

    const LCHReadTextFileRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHReadTextFile',
    		LCHRecipeCallback: LCHReadTextFileCallback,
    	};
    };

    var LCHReadTextFile = /*#__PURE__*/Object.freeze({
        LCHReadTextFileCallback: LCHReadTextFileCallback,
        LCHReadTextFileRecipe: LCHReadTextFileRecipe
    });

    const LCHReadTextFileObjectsCallback = async function(inputData = {}) {
    	return new Promise(function (res, rej) {
    		return Object.assign(document.createElement('input'), inputData, {
    			type: 'file',
    			onchange (event) {
    				return res(Promise.all([...event.target.files].map(function (e) {
    					return new Promise(function (res, rej) {
    						return Object.assign(new FileReader(), {
    							onload (event) {
    								return res(Object.assign(e, {
    									_LCHReadTextFileObjectContent: event.target.result,
    								}));
    							},
    						}).readAsText(e);
    					});
    				})));
    			},
    		}).click();
    	});
    };

    const LCHReadTextFileObjectsRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHReadTextFileObjects',
    		LCHRecipeCallback: LCHReadTextFileObjectsCallback,
    	};
    };

    var LCHReadTextFileObjects = /*#__PURE__*/Object.freeze({
        LCHReadTextFileObjectsCallback: LCHReadTextFileObjectsCallback,
        LCHReadTextFileObjectsRecipe: LCHReadTextFileObjectsRecipe
    });

    var FileSaver_min = createCommonjsModule(function (module, exports) {
    (function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});


    });

    const LCHSaveFileCallback = function(param1, param2) {
    	if (typeof param1 !== 'string') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	if (typeof param2 !== 'string') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	if (!param2.trim()) {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	return FileSaver_min.saveAs(new Blob([param1], {type: 'text/plain;charset=utf-8'}), param2);
    };

    const LCHSaveFileRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHSaveFile',
    		LCHRecipeCallback: LCHSaveFileCallback,
    	};
    };

    var LCHSaveFile = /*#__PURE__*/Object.freeze({
        LCHSaveFileCallback: LCHSaveFileCallback,
        LCHSaveFileRecipe: LCHSaveFileRecipe
    });

    // https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus
    const LCHFocusElementsSelector= [
    	'a[href]:not([tabindex="-1"])',
      // 'area[href]:not([tabindex="-1"])',
      'input:not([disabled]):not([tabindex="-1"]):not([type="hidden"])',
      // 'select:not([disabled]):not([tabindex="-1"])',
      // 'textarea:not([disabled]):not([tabindex="-1"])',
      'button:not([disabled]):not([tabindex="-1"])',
      // 'iframe:not([tabindex="-1"])',
      // '[tabindex]:not([tabindex="-1"])',
      // '[contentEditable=true]:not([tabindex="-1"])',
    ].join(',');

    const LCHActiveDocumentsFocusElements = function(inputData) {
    	if (typeof inputData !== 'object' || inputData === null || typeof inputData.querySelectorAll !== 'function') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	const aggregate = {
    		ids: {},
    	};

    	return [].concat.apply([], inputData.querySelectorAll(LCHFocusElementsSelector)).filter(function (e) {
    		return {
    			'A': function FocusElementAnchorFilter (e) {
    				if (!e.href) {
    					return false;
    				}				
    				if (!e.textContent.trim() && !e.title.trim()) {
    					return false;
    				}				
    				return true;
    			},
    			'INPUT': function FocusElementInputFilter (e) {
    				if (!aggregate.labels) {
    					aggregate.labels = Array.from(inputData.querySelectorAll('label'));
    				}
    				aggregate.ids[e.id] = aggregate.labels.filter(function (label) {
    					return label.getAttribute('for') === e.id;
    				}).map(function (e) {
    					return e.textContent.trim();
    				}).shift();

    				if (!e.name.trim() && !e.placeholder.trim() && !aggregate.ids[e.id]) {
    					return false;
    				}
    				return true;
    			},
    			'BUTTON': function FocusElementButtonFilter (e) {
    				if (!e.textContent.trim()) {
    					return false;
    				}
    				return true;
    			}
    		}[e.tagName](e);
    	}).map(function (e) {
    		return {
    			LCHRecipeName: {
    				'A': function FocusElementAnchorNameg (e) {
    					return e.textContent.trim() || e.title.trim()
    				},
    				'INPUT': function FocusElementInputNameg (e) {
    					return aggregate.ids[e.id] || e.placeholder.trim() || e.name.trim();
    				},
    				'BUTTON': function FocusElementButtonName (e) {
    					return e.textContent.trim();
    				},
    			}[e.tagName](e),
    			LCHRecipeCallback () {
    				return e;
    			},
    			LCHRecipeOutputType: 'DOMElement',
    		};
    	});
    };

    const LCHActiveDocumentFocusElementsCallback = function() {
    	return LCHActiveDocumentsFocusElements(document);
    };

    const LCHActiveDocumentFocusElementsRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHActiveDocumentFocusElements',
    		LCHRecipeOutputType: 'SubjectContainer',
    		LCHRecipeCallback: LCHActiveDocumentFocusElementsCallback,
    	};
    };

    var LCHActiveDocumentFocusElements = /*#__PURE__*/Object.freeze({
        LCHActiveDocumentsFocusElements: LCHActiveDocumentsFocusElements,
        LCHActiveDocumentFocusElementsCallback: LCHActiveDocumentFocusElementsCallback,
        LCHActiveDocumentFocusElementsRecipe: LCHActiveDocumentFocusElementsRecipe
    });

    const LCHCopyToClipboardCallback = function(inputData) {
    	if (typeof inputData !== 'string') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	if (!inputData.trim().length) {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	// if (typeof navigator !== 'undefined' && navigator.clipboard) {
    	// 	return Promise.resolve((async function () {
    	// 		return await navigator.clipboard.writeText(inputData);
    	// 	})());
    	// }

    	// if (typeof document !== 'undefined') {
    	// 	(function () {
    	// 		const el = document.createElement('textarea');
    			
    	// 		el.value = inputData;
    			
    	// 		el.setAttribute('readonly', '');
    	// 		el.style.position = 'fixed';
    	// 		el.style.top = 0;
    			
    	// 		document.body.appendChild(el);
    	// 		el.select();
    	// 		document.execCommand('copy');
    			
    	// 		el.remove();
    	// 	})();
    	// }

    	return {
    		LCHComponentDescriptorName: 'LCHCopyToClipboard',
    		LCHComponentDescriptorProps: {
    			inputData: inputData,
    		},
    		LCHComponentDescriptorCompletionHandlerSignature: 'LCHCopyToClipboardCompletionHandler',
    		LCHComponentDescriptorOLSKLocalized: true,
    	};
    };

    const LCHCopyToClipboardRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHCopyToClipboard',
    		LCHRecipeInputTypes: 'String',
    		LCHRecipeCallback: LCHCopyToClipboardCallback,
    	};
    };

    var LCHCopyToClipboard = /*#__PURE__*/Object.freeze({
        LCHCopyToClipboardCallback: LCHCopyToClipboardCallback,
        LCHCopyToClipboardRecipe: LCHCopyToClipboardRecipe
    });

    const LCHDOMElementFocusCallback = function(inputData) {
    	if (!inputData) {
    		return;
    	}

    	inputData.focus();
    };

    const LCHDOMElementFocusRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHDOMElementFocus',
    		LCHRecipeInputTypes: 'DOMElement',
    		LCHRecipeCallback: LCHDOMElementFocusCallback,
    	};
    };

    var LCHDOMElementFocus = /*#__PURE__*/Object.freeze({
        LCHDOMElementFocusCallback: LCHDOMElementFocusCallback,
        LCHDOMElementFocusRecipe: LCHDOMElementFocusRecipe
    });

    const LCHLargeTextCallback = function(inputData) {
    	if (typeof document === 'undefined') {
    		return;
    	}

    	const rootElement = document.createElement('div');
    	rootElement.className = 'LCHLargeTextContainer';

    	for (let [key, value] of Object.entries({
    		width: '100%',

    		position: 'fixed',
    		top: '45%',
    		left: '0',

    		textAlign: 'center',

    		cursor: 'default',
    	})) {
    		rootElement.style[key] = value;
    	}

    	const span = document.createElement('span');
    	span.textContent = inputData;
    	rootElement.appendChild(span);

    	for (let [key, value] of Object.entries({
    		display: 'block-inline',
    		borderRadius: '20px',
    		boxShadow: '0 0 10px 0px hsla(0, 0%, 0%, 0.1)',
    		padding: '20px',

    		background: 'hsla(0, 0%, 0%, 0.8)',
    		color: 'white',
    		fontFamily: 'Arial',
    		fontSize: '72pt',
    		fontWeight: 'bold',
    		textAlign: 'center',
    		textShadow: '5px 5px 10px hsla(0, 0%, 0%, 0.5)',
    		overflowWrap: 'break-word',
    	})) {
    		span.style[key] = value;
    	}
    	
    	document.body.appendChild(rootElement);

    	let handler = function (event) {
    		event.preventDefault();

    		if (!event.key && rootElement.contains(event.target)) {
    	  	return;
    		}
    		
    		window.removeEventListener('click', handler);
    		window.removeEventListener('keydown', handler);
    		
    		rootElement.remove();
    	};

    	setTimeout(function () {
    		window.addEventListener('click', handler);
    		window.addEventListener('keydown', handler);
    	});
    };

    const LCHLargeTextRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHLargeText',
    		LCHRecipeInputTypes: 'String',
    		LCHRecipeCallback: LCHLargeTextCallback,
    	};
    };

    var LCHLargeText = /*#__PURE__*/Object.freeze({
        LCHLargeTextCallback: LCHLargeTextCallback,
        LCHLargeTextRecipe: LCHLargeTextRecipe
    });

    const LCHRunCommandCallback = function(inputData) {
    	return inputData;
    };

    const LCHRunCommandRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHRunCommand',
    		LCHRecipeInputTypes: 'Command',
    		LCHRecipeCallback: LCHRunCommandCallback,
    	};
    };

    var LCHRunCommand = /*#__PURE__*/Object.freeze({
        LCHRunCommandCallback: LCHRunCommandCallback,
        LCHRunCommandRecipe: LCHRunCommandRecipe
    });

    const LCHFlip = function(param1, param2) {
    	if (typeof param1 !== 'function') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	return function() {
    		return param1.apply(param2, [...arguments].reverse());
    	};
    };

    const LCHSearchActionURLFrom = function(param1, param2) {
    	if (typeof param1 !== 'string') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	if (typeof param2 !== 'string') {
    		throw new Error('LCHErrorInputNotValid');
    	}

    	if (!param1.match(/LCHSEARCHTOKEN/i)) {
    		return param1;
    	}

    	return param1.replace(/LCHSEARCHTOKEN/i, param2.split(' ').map(function (e) {
    		return encodeURIComponent(e);
    	}).join('+'));
    };

    const LCHSearchWithCallback = function(param1, param2) {
    	return this.api.fn('LCHURLOpen')(LCHSearchActionURLFrom(param2, param1));
    };

    const LCHSearchWithRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHSearchWith',
    		LCHRecipeInputTypes: 'String,ServiceSearchURLTemplate',
    		LCHRecipeCallback: LCHSearchWithCallback,
    	};
    };
    const LCHSearchForCallback = function() {
    	return LCHFlip(LCHSearchWithCallback, this)(...arguments);
    };

    const LCHSearchForRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHSearchFor',
    		LCHRecipeInputTypes: 'ServiceSearchURLTemplate,String',
    		LCHRecipeCallback: LCHSearchForCallback,
    	};
    };

    var LCHSearchAction = /*#__PURE__*/Object.freeze({
        LCHSearchActionURLFrom: LCHSearchActionURLFrom,
        LCHSearchWithCallback: LCHSearchWithCallback,
        LCHSearchWithRecipe: LCHSearchWithRecipe,
        LCHSearchForCallback: LCHSearchForCallback,
        LCHSearchForRecipe: LCHSearchForRecipe
    });

    const LCHServiceSearchWikipediaCallback = function() {
    	return 'https://wikipedia.org/w/index.php?search=LCHSEARCHTOKEN';
    };

    const LCHServiceSearchWikipediaRecipe = function() {
    	return {
    		LCHRecipeName: 'Wikipedia',
    		LCHRecipeOutputType: 'ServiceSearchURLTemplate',
    		LCHRecipeCallback: LCHServiceSearchWikipediaCallback,
    		LCHRecipeSignature: 'LCHServiceSearchWikipedia',
    	};
    };

    var LCHServiceSearchWikipedia = /*#__PURE__*/Object.freeze({
        LCHServiceSearchWikipediaCallback: LCHServiceSearchWikipediaCallback,
        LCHServiceSearchWikipediaRecipe: LCHServiceSearchWikipediaRecipe
    });

    const LCHSubjectContainerShowContentsCallback = function(inputData) {
    	return inputData;
    };

    const LCHSubjectContainerShowContentsRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHSubjectContainerShowContents',
    		LCHRecipeInputTypes: 'SubjectContainer',
    		LCHRecipeCallback: LCHSubjectContainerShowContentsCallback,
    	};
    };

    var LCHSubjectContainerShowContents = /*#__PURE__*/Object.freeze({
        LCHSubjectContainerShowContentsCallback: LCHSubjectContainerShowContentsCallback,
        LCHSubjectContainerShowContentsRecipe: LCHSubjectContainerShowContentsRecipe
    });

    const LCHURLOpenCallback = function(inputData) {
    	if (!inputData) {
    		return;
    	}

    	window.open(inputData, '_blank').focus();
    };

    const LCHURLOpenRecipe = function() {
    	return {
    		LCHRecipeSignature: 'LCHURLOpen',
    		LCHRecipeInputTypes: 'URL',
    		LCHRecipeCallback: LCHURLOpenCallback,
    	};
    };

    var LCHURLOpen = /*#__PURE__*/Object.freeze({
        LCHURLOpenCallback: LCHURLOpenCallback,
        LCHURLOpenRecipe: LCHURLOpenRecipe
    });

    const LCHLauncherStandardRecipes = function() {
    	return [].concat.apply([], [
    		Bool,
    		Date$1,
    		DOMElement,
    		ServiceSearchURLTemplate,
    		String$1,
    		URL$1,
    		
    		Command,
    		ServiceSearch,
    		SubjectContainer,
    		
    		LCHActiveDocumentFocusElements,

    		LCHDateLocalOffsetSubtracted,
    		LCHReadTextFile,
    		LCHReadTextFileObjects,
    		LCHSaveFile,

    		LCHCopyToClipboard,
    		LCHDOMElementFocus,
    		LCHLargeText,
    		LCHRunCommand,
    		LCHSearchAction,
    		LCHServiceSearchWikipedia,
    		LCHSubjectContainerShowContents,
    		LCHURLOpen,
    	].map(function (e) {
    		return Object.entries(e).filter(function (e) {
    			return e.shift().includes('Recipe');
    		}).map(function (e) {
    			return e.pop()();
    		}).map(function (e) {
    			return e;
    		});
    	}));
    };

    Array.prototype._LCHIntersect = function() {
    	return this.map(function (e) {
    		return new Set(e);
    	}).reduce(function (a, b) {
    		return a.filter(i => b.has(i));
    	}, [...new Set([].concat.apply([], this))]);
    };

    const mod$7 = {

    	LCHRecipesErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const errors = mod.LCHFormulaTo(mod.LCHFormulaErrors(mod.LCHFormulaFrom(inputData)) || {}, 'LCHRecipe');

    		if (typeof inputData.LCHRecipeCallback !== 'function') {
    			errors.LCHRecipeCallback = [
    				'LCHErrorNotFunction',
    			];
    		}

    		if (typeof inputData.LCHRecipeName === 'string') {
    			if (!inputData.LCHRecipeName.trim()) {
    				errors.LCHRecipeName = [
    					'LCHErrorNotFilled',
    				];
    			}
    		}

    		if (typeof inputData.LCHRecipeInputTypes === 'string') {
    			if (inputData.LCHRecipeInputTypes.trim() !== inputData.LCHRecipeInputTypes) {
    				errors.LCHRecipeInputTypes = [
    					'LCHErrorNotTrimmed',
    				];
    			}

    			if (!inputData.LCHRecipeInputTypes.trim()) {
    				errors.LCHRecipeInputTypes = [
    					'LCHErrorNotFilled',
    				];
    			}
    		}

    		if (typeof inputData.LCHRecipeOutputType === 'string') {
    			if (inputData.LCHRecipeOutputType.trim() !== inputData.LCHRecipeOutputType) {
    				errors.LCHRecipeOutputType = [
    					'LCHErrorNotTrimmed',
    				];
    			}

    			if (!inputData.LCHRecipeOutputType.trim()) {
    				errors.LCHRecipeOutputType = [
    					'LCHErrorNotFilled',
    				];
    			}
    		}

    		if (inputData.LCHRecipeCanonicalExampleCallback !== undefined || options.LCHOptionValidateIfNotPresent) {
    			if (typeof inputData.LCHRecipeCanonicalExampleCallback !== 'function') {
    				errors.LCHRecipeCanonicalExampleCallback = [
    					'LCHErrorNotFunction',
    				];
    			}
    		}

    		if (typeof inputData.LCHRecipeSignature === 'string') {
    			if (!inputData.LCHRecipeSignature.trim()) {
    				errors.LCHRecipeSignature = [
    					'LCHErrorNotFilled',
    				];
    			} else if (inputData.LCHRecipeSignature.trim() !== inputData.LCHRecipeSignature) {
    				errors.LCHRecipeSignature = [
    					'LCHErrorNotTrimmed',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	LCHRecipesIsCommand (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!inputData.LCHRecipeName) {
    			return false;
    		}
    		
    		if (inputData.LCHRecipeInputTypes) {
    			return false;
    		}

    		if (inputData.LCHRecipeOutputType) {
    			return false;
    		}

    		return true;
    	},

    	LCHRecipesIsSubject (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!inputData.LCHRecipeName) {
    			return false;
    		}
    		
    		// if (inputData.LCHRecipeInputTypes) {
    		// 	return false;
    		// }

    		if (!inputData.LCHRecipeOutputType) {
    			return false;
    		}

    		return true;
    	},

    	LCHRecipesIsAction (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!inputData.LCHRecipeName) {
    			return false;
    		}

    		if (!inputData.LCHRecipeInputTypes) {
    			return false;
    		}
    		
    		// if (!inputData.LCHRecipeCallback.length) {
    		// 	return false;
    		// }

    		return true;
    	},

    	LCHRecipesIsType (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}
    		
    		// if (inputData.LCHRecipeCallback.length !== 1) {
    		// 	return false;
    		// }

    		if (inputData.LCHRecipeOutputType !== 'Bool') {
    			return false;
    		}

    		if (!inputData.LCHRecipeCanonicalExampleCallback) {
    			return false;
    		}

    		if (!inputData.LCHRecipeSignature) {
    			return false;
    		}

    		return true;
    	},

    	LCHRecipesIsTask (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}
    		
    		// if (inputData.LCHRecipeCallback.length) {
    		// 	return false;
    		// }

    		if (!inputData.LCHRecipeURLFilter) {
    			return false;
    		}

    		if (inputData.LCHRecipeIsAutomatic !== true) {
    			return false;
    		}

    		return true;
    	},

    	LCHLauncherConvertTypeServiceSearch (inputData, _stringCallback) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (typeof e !== 'object' || e === null) {
    				return false;
    			}
    			
    			return true;
    		}).map(function (e) {
    			if (!LCHTypeServiceSearchRecipe().LCHRecipeCallback(e)) {
    				return e;
    			}

    			return {
    				LCHRecipeName: _stringCallback(e.LCHRecipeName),
    				LCHRecipeInputTypes: 'String',
    				LCHRecipeCallback (inputData) {
    					return this.api.fn('LCHSearchWith')(inputData, e);
    				},
    				_LCHLauncherGenerated: true,
    			};
    		});
    	},

    	LCHRecipesActionTakesObject (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!mod$7.LCHRecipesIsAction(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}
    		
    		if (mod$6.LCHRuntimeInputTypes(inputData.LCHRecipeInputTypes).length < 2) {
    			return false;
    		}
    		
    		// if (inputData.LCHRecipeCallback.length < 2) {
    		// 	return false;
    		// }

    		return true;
    	},

    	LCHRecipesActionTakesParams (inputData) {
    		if (mod$7.LCHRecipesErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!mod$7.LCHRecipesIsAction(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}
    		
    		if (mod$6.LCHRuntimeInputTypes(inputData.LCHRecipeInputTypes).pop() !== 'Object') {
    			return false;
    		}
    		
    		// if (inputData.LCHRecipeCallback.length !== LCHRuntime.LCHRuntimeInputTypes(inputData.LCHRecipeInputTypes).length) {
    		// 	return false;
    		// }

    		return true;
    	},

    	LCHAPITypeEquivalenceMapForRecipes (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const uniqueSignatures = [];
    		const validRecipes = inputData.filter(function (e) {
    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}

    			if (!mod$7.LCHRecipesIsType(e)) {
    				return false;
    			}

    			if (!e.LCHRecipeCallback(e.LCHRecipeCanonicalExampleCallback())) {
    				return false;
    			}

    			if (uniqueSignatures.includes(e.LCHRecipeSignature)) {
    				return false;
    			}

    			uniqueSignatures.push(e.LCHRecipeSignature);

    			return true;
    		});

    		return validRecipes.reduce(function (coll, item) {
    			coll[item.LCHRecipeSignature] = validRecipes.filter(function (e) {
    				if (item === e) {
    					return true;
    				}

    				if (e._LCHRecipeTypeIsExclusive) {
    					return false;
    				}

    				if (item._LCHRecipeTypeIsExclusive) {
    					return false;
    				}

    				return e.LCHRecipeCallback(item.LCHRecipeCanonicalExampleCallback());
    			}).map(function (e) {
    				return e.LCHRecipeSignature;
    			});

    			return coll;
    		}, {});
    	},

    	LCHAPITypeNameMap (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const validRecipes = inputData.filter(function (e) {
    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}

    			return mod$7.LCHRecipesIsType(e);
    		});

    		return validRecipes.reduce(function (coll, item) {
    			if (coll[item.LCHRecipeSignature]) {
    				return coll;
    			}

    			coll[item.LCHRecipeSignature] = item.LCHRecipeName || item.LCHRecipeSignature;

    			return coll;
    		}, {});
    	},

    	LCHAPIActionsForType (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return param2.filter(function (e) {
    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}

    			if (!mod$7.LCHRecipesIsAction(e)) {
    				return false;
    			}

    			if (mod$6.LCHRuntimeInputTypes(e.LCHRecipeInputTypes).shift() !== param1) {
    				return false;
    			}

    			return true;
    		});
    	},

    	LCHAPISubjectsForType (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return param2.filter(function (e) {
    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}

    			if (!mod$7.LCHRecipesIsSubject(e)) {
    				return false;
    			}

    			if (e.LCHRecipeOutputType !== param1) {
    				return false;
    			}

    			return true;
    		});
    	},

    	LCHCompositionErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!inputData.LCHCompositionAction) {
    			return {
    				LCHCompositionAction: [
    					'LCHErrorInputNotPresent',
    				],
    			};
    		}

    		if (!mod$7.LCHRecipesIsAction(inputData.LCHCompositionAction)) {
    			return {
    				LCHCompositionAction: [
    					'LCHErrorInputNotValid',
    				],
    			};
    		}

    		const errors = {};

    		if (!inputData.LCHCompositionSubjectPrimary) {
    			return {
    				LCHCompositionSubjectPrimary: [
    					'LCHErrorInputNotPresent',
    				],
    			};
    		} else if (inputData.LCHCompositionAction.LCHRecipeInputTypes === 'Command' && mod$7.LCHRecipesIsCommand(inputData.LCHCompositionSubjectPrimary)) ;

    		// if (!mod.LCHRecipesIsSubject(inputData.LCHCompositionSubjectPrimary)) {
    		// 	errors.LCHCompositionSubjectPrimary = [
    		// 		'LCHErrorInputNotValid',
    		// 	];
    		// }

    		else if (inputData.LCHCompositionAction.LCHRecipeInputTypes && !mod$6.LCHRuntimeInputTypes(inputData.LCHCompositionAction.LCHRecipeInputTypes).includes(inputData.LCHCompositionSubjectPrimary.LCHRecipeOutputType)) {
    			errors.LCHCompositionSubjectPrimary = [
    				'LCHErrorInputNotValid',
    			];
    		}

    		if (inputData.LCHCompositionAction.LCHRecipeInputTypes && mod$6.LCHRuntimeInputTypes(inputData.LCHCompositionAction.LCHRecipeInputTypes).length === 2 && !inputData.LCHCompositionSubjectSecondary) {
    			errors.LCHCompositionSubjectSecondary = [
    				'LCHErrorInputNotValid',
    			];
    		}

    		if (inputData.LCHCompositionSubjectSecondary !== undefined) {
    			if (!mod$7.LCHRecipesIsSubject(inputData.LCHCompositionSubjectSecondary)) {
    				errors.LCHCompositionSubjectSecondary = [
    					'LCHErrorInputNotValid',
    				];
    			}

    			if (inputData.LCHCompositionAction.LCHRecipeInputTypes && !mod$6.LCHRuntimeInputTypes(inputData.LCHCompositionAction.LCHRecipeInputTypes).includes(inputData.LCHCompositionSubjectSecondary.LCHRecipeOutputType)) {
    				errors.LCHCompositionSubjectSecondary = [
    					'LCHErrorInputNotValid',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	async LCHAPIExecuteComposition (inputData, api = {}) {
    		if (mod$7.LCHCompositionErrors(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof api.fn !== 'function') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return mod$7.LCHAPIExecuteRecipe(inputData.LCHCompositionAction, [
    			await mod$7.LCHAPIExecuteRecipe(inputData.LCHCompositionSubjectPrimary, [], api),
    		].concat(inputData.LCHCompositionSubjectSecondary ? [
    			await mod$7.LCHAPIExecuteRecipe(inputData.LCHCompositionSubjectSecondary, [], api),
    		] : []), api);
    	},

    	async LCHAPIExecuteRecipe (param1, param2 = [], param3 = {}) {
    		if (mod$7.LCHRecipesErrors(param1)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!Array.isArray(param2)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param3.fn !== 'function') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (param1.LCHRecipeStyle && typeof document !== 'undefined') {
    			document.body.appendChild(document.createElement('style')).innerHTML = param1.LCHRecipeStyle;
    		}

    		return Promise.resolve(param1.LCHRecipeCallback.apply({
    			api: param3,
    		}, param2.length ? param2 : undefined)); // #mysterious Firefox throws `Permission denied to access property "length"` if array is empty
    	},

    	LCHComponentDescriptorsErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		const errors = {};

    		if (typeof inputData.LCHComponentDescriptorName !== 'string') {
    			errors.LCHComponentDescriptorName = [
    				'LCHErrorNotString',
    			];
    		}

    		if (typeof inputData.LCHComponentDescriptorName === 'string' && !inputData.LCHComponentDescriptorName) {
    			errors.LCHComponentDescriptorName = [
    				'LCHErrorNotFilled',
    			];
    		}

    		if (typeof inputData.LCHComponentDescriptorName === 'string' && inputData.LCHComponentDescriptorName.trim() !== inputData.LCHComponentDescriptorName) {
    			errors.LCHComponentDescriptorName = [
    				'LCHErrorNotTrimmed',
    			];
    		}

    		if (typeof inputData.LCHComponentDescriptorCompletionHandlerSignature !== 'string') {
    			errors.LCHComponentDescriptorCompletionHandlerSignature = [
    				'LCHErrorNotString',
    			];
    		}

    		if (typeof inputData.LCHComponentDescriptorCompletionHandlerSignature === 'string' && !inputData.LCHComponentDescriptorCompletionHandlerSignature) {
    			errors.LCHComponentDescriptorCompletionHandlerSignature = [
    				'LCHErrorNotFilled',
    			];
    		}

    		if (typeof inputData.LCHComponentDescriptorCompletionHandlerSignature === 'string' && inputData.LCHComponentDescriptorCompletionHandlerSignature.trim() !== inputData.LCHComponentDescriptorCompletionHandlerSignature) {
    			errors.LCHComponentDescriptorCompletionHandlerSignature = [
    				'LCHErrorNotTrimmed',
    			];
    		}

    		if (inputData.LCHComponentDescriptorProps !== undefined) {
    			if (typeof inputData.LCHComponentDescriptorProps !== 'object' || inputData.LCHComponentDescriptorProps === null) {
    				errors.LCHComponentDescriptorProps = [
    					'LCHErrorNotObject',
    				];
    			}
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    	LCHRuntimeFilteredRecipes  (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return param1.filter(function (e) {
    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}

    			if (typeof e.LCHRecipeURLFilter === 'undefined') {
    				return true;
    			}

    			return mod$6.LCHRuntimeURLFilter(e.LCHRecipeURLFilter, param2);
    		});
    	},

    	LCHRuntimeFilteredTasks  (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return inputData.filter(function (e) {
    			if (!mod$7.LCHRecipesIsTask(e)) {
    				return false;
    			}

    			if (e.LCHRecipeIsExcluded) {
    				return !e.LCHRecipeIsExcluded();
    			}

    			return true;
    		});
    	},

    	LCHAPIRunTasks  () {
    		const inputData = mod$7.LCHRuntimeFilteredRecipes.apply(null, [...arguments]);
    		const api = mod$6.LCHRuntimeAPI(LCHLauncherStandardRecipes().concat(inputData));

    		return Promise.all(mod$7.LCHRuntimeFilteredTasks(inputData).map(function (e) {
    			return mod$7.LCHAPIExecuteRecipe(e, [], api);
    		}));
    	},

    	LCHRecipeProxyErrors (inputData, options = {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return {};
    		}

    		const errors = {};

    		if (typeof inputData.LCHRecipeProxyName !== 'string') {
    			errors.LCHRecipeProxyName = [
    				'LCHErrorNotString',
    			];
    		}

    		if (typeof inputData.LCHRecipeProxySignature !== 'string') {
    			errors.LCHRecipeProxySignature = [
    				'LCHErrorNotString',
    			];
    		}

    		return Object.entries(errors).length ? errors : null;
    	},

    };

    const mod$8 = {

    	LCHLauncherOptions (inputData, notify = function () {}) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof inputData.LCHOptionRecipes === 'undefined') {
    			inputData.LCHOptionRecipes = [];
    		}
    		if (!Array.isArray(inputData.LCHOptionRecipes)) {
    			throw new Error('LCHOptionRecipesNotArray');
    		}
    		inputData.LCHOptionRecipes = inputData.LCHOptionRecipes.filter(function (e) {
    			const errors = mod$7.LCHRecipesErrors(e);

    			if (errors) {
    				notify('LCHOptionRecipesItemNotValid', e, errors);
    			}
    			return !errors;
    		});

    		if (typeof inputData.LCHOptionMode === 'undefined') {
    			inputData.LCHOptionMode = mod$8.LCHLauncherModes().shift();
    		}
    		if (typeof inputData.LCHOptionMode !== 'undefined') {
    			if (!mod$8.LCHLauncherModes().includes(inputData.LCHOptionMode)) {
    				throw new Error('LCHOptionModeNotValid');
    			}		}
    		if (typeof inputData.LCHOptionCompletionHandler !== 'undefined') {
    			if (typeof inputData.LCHOptionCompletionHandler !== 'function') {
    				throw new Error('LCHOptionCompletionHandlerNotFunction');
    			}		}
    		if (typeof inputData.LCHOptionLanguage === 'undefined') {
    			inputData.LCHOptionLanguage = 'en';
    		}
    		if (typeof inputData.LCHOptionLanguage !== 'string') {
    			throw new Error('LCHOptionLanguageNotString')
    		}
    		return inputData;
    	},

    	LCHLauncherModeCommit () {
    		return 'kLCHLauncherModeCommit';
    	},

    	LCHLauncherModePreview () {
    		return 'kLCHLauncherModePreview';
    	},

    	LCHLauncherModePipe () {
    		return 'kLCHLauncherModePipe';
    	},

    	LCHLauncherModeTask () {
    		return 'kLCHLauncherModeTask';
    	},

    	LCHLauncherModes () {
    		return [
    			mod$8.LCHLauncherModeCommit(),
    			mod$8.LCHLauncherModePreview(),
    			mod$8.LCHLauncherModePipe(),
    			mod$8.LCHLauncherModeTask(),
    		];
    	},

    	LCHLauncherUIRecipesForMode (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (!mod$8.LCHLauncherModes().includes(param2)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return param1.filter(function (e) {
    			if (typeof e !== 'object' || e === null) {
    				return false;
    			}

    			if (typeof e.LCHRecipeInputTypes === 'string' && e.LCHRecipeInputTypes.split(',').length > 2) {
    				return false;
    			}

    			if (param2 === mod$8.LCHLauncherModeCommit()) {
    				return mod$7.LCHRecipesIsCommand(e);
    				// if (LCHLauncherAPI.LCHRecipesIsCommand(e)) {
    				// 	return true;
    				// };

    				// if (!LCHLauncherAPI.LCHRecipesIsAction(e)) {
    				// 	return false;
    				// };

    				// if (e.LCHRecipeCallback.length !== 1) {
    				// 	return false;
    				// };

    				// if (e.LCHRecipeInputTypes !== 'String') {
    				// 	return false;
    				// };

    				// if (e._LCHLauncherGenerated !== true) {
    				// 	return false;
    				// };
    			}

    			if (param2 === mod$8.LCHLauncherModePreview()) {
    				return mod$7.LCHRecipesIsCommand(e);
    			}
    			
    			return true;
    		});
    	},

    	// import * as _fuzzysearch from 'fuzzysearch';
    	// const fuzzysearch = typeof _fuzzysearch === 'function' ? _fuzzysearch : _fuzzysearch.default;
    	// LCHLauncherFilterForText (inputData) {
    	// 	if (typeof inputData !== 'string') {
    	// 		throw new Error('LCHErrorInputNotValid');
    	// 	}

    	// 	return function (e) {
    	// 		return [e.LCHRecipeName].filter(function (e) {
    	// 			if (!e) {
    	// 				return false;
    	// 			}

    	// 			return fuzzysearch(inputData.toLowerCase(), e.toLowerCase());
    	// 		}).length > 0;
    	// 	};
    	// };

    	LCHLauncherThrottleDuration: main_1$1() ? 25 : 1000,

    	LCHLauncherKeyboardEventIsTextInput (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if ([
    			inputData.metaKey,
    			inputData.shiftKey,
    			inputData.ctrlKey,
    			inputData.altKey,
    		].includes(true)) {
    			return false;
    		}

    		if (!inputData.key) {
    			return false;
    		}
    		
    		if ([
    			'Unidentified',
    			'Tab',
    			'CapsLock',
    			'ArrowRight',
    			'ArrowLeft',
    			'Backspace',
    			'\\',
    			'.',
    			',',
    			' ',
    		].includes(inputData.key)) {
    			return false;
    		}
    		
    		return true;
    	},

    	LCHLauncherActionComparator (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return function (a, b) {
    			const param1s = [
    				a.LCHRecipeInputTypes.split(',')[0],
    				b.LCHRecipeInputTypes.split(',')[0],
    			];
    			const param2s = [
    				a.LCHRecipeInputTypes.split(',')[1],
    				b.LCHRecipeInputTypes.split(',')[1],
    			];

    			if (param1s[0] === inputData && param1s[1] === inputData) {
    				if (!param2s[0] && param2s[1]) {
    					return -1;
    				}

    				if (param2s[0] && !param2s[1]) {
    					return 1;
    				}
    			}

    			if (param1s[0] === inputData && param1s[1] !== inputData) {
    				return -1;
    			}

    			if (param1s[1] === inputData && param1s[0] !== inputData) {
    				return 1;
    			}

    			return 1;
    		};
    	},

    	LCHLauncherConstrainIndex (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (param2 < 0) {
    			return param1.length - 1;
    		}

    		if (param2 >= param1.length) {
    			return 0;
    		}

    		return param2;
    	},

    	LCHLauncherReloadableSubjects (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return [].concat.apply([], inputData).filter(function (e) {
    			if (typeof e !== 'object' || e === null) {
    				return false;
    			}

    			if (mod$7.LCHRecipesErrors(e)) {
    				return false;
    			}
    			if (!mod$7.LCHRecipesIsSubject(e)) {
    				return false;
    			}
    			return true;
    		});
    	},

    };

    const mod$9 = {

    	LCHBuildFunctionString(param1, param2 = '') {
    		if (typeof param1 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return `function (${ param2 }) { ${ param1 } }`;
    	},

    	LCHBuildConvertDocumentFunctions (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return Object.keys(inputData).reduce(function (coll, item) {
    			if (item.match('LCHDocumentCallback')) {
    				coll.LCHDocumentCallback = mod$9.LCHBuildFunctionString(inputData.LCHDocumentCallbackBody, inputData.LCHDocumentCallbackArgs);
    			} else if (item === 'LCHDocumentCanonicalExampleCallbackBody') {
    				coll.LCHDocumentCanonicalExampleCallback = mod$9.LCHBuildFunctionString(inputData.LCHDocumentCanonicalExampleCallbackBody);
    			} else  {
    				coll[item] = inputData[item];
    			}

    			return coll;
    		}, {});
    	},

    	LCHBuildObjectString (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		let substitutions = {};

    		const outputData = Object.keys(inputData).reduce(function (coll, item) {
    			if (typeof inputData[item] === 'string' && inputData[item].indexOf('function') === 0) {
    				coll[item] = `__${ item }__`;

    				substitutions[item] = inputData[item];
    			}

    			if (!coll[item]) {
    				coll[item] = inputData[item];
    			}

    			return coll;
    		}, {});

    		return Object.keys(substitutions).reduce(function (coll, item) {
    			return coll.replace(`"__${ item }__"`, substitutions[item]);
    		}, JSON.stringify(outputData));
    	},

    	LCHBuildRecipeArrayString (inputData) {
    		if (!Array.isArray(inputData)) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return `[${ inputData.map(mod$9.LCHBuildConvertDocumentFunctions).map(function (e) {
			Object.keys(e).forEach(function (key) {
				if ([
					'@context',
					'LCHDocumentID',
					'LCHDocumentCreationDate',
					'LCHDocumentModificationDate',
					'LCHDocumentIsFlagged',
				].includes(key)) {
					delete e[key];
				}
			});
			return mod.LCHFormulaTo(mod.LCHFormulaFrom(e), 'LCHRecipe');
		}).map(mod$9.LCHBuildObjectString).join(',') }]`;
    	},

    	LCHBuildStripSourceMap (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return Array.from(inputData.match(/\/\/\# sourceMappingURL=[\w-\.]+\.map/g) || []).reduce(function (coll, item) {
    			return coll.split(item).join('');
    		}, inputData);
    	},

    	LCHBuildBoomarkletTemplate () {
    		return `(function () {
	    LCHBuildBoomarkletTemplate_Script;

	    Launchlet.LCHTasksRun([{
	      LCHRecipeCallback () {},
	      LCHRecipeStyle: \`LCHBuildBoomarkletTemplate_Style\`,
	      LCHRecipeURLFilter: '*',
	      LCHRecipeIsAutomatic: true,
	    }]);

	    Launchlet.LCHSingletonCreate(Object.assign(LCHBuildBoomarkletTemplate_Options, {
	      LCHOptionRecipes: LCHBuildBoomarkletTemplate_Recipes,
	    }));
	  })()`;
    	},

    	LCHBuildEscape (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return `javascript:${ encodeURIComponent(inputData) }`;
    	},

    };

    var remotestorage = createCommonjsModule(function (module, exports) {
    /*! remotestorage.js 1.2.3, https://remotestorage.io, MIT licensed */
    !function(e,t){module.exports=t();}(commonjsGlobal,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n});},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=17)}([function(e,t,r){(function(t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o={logError:function(e){"string"==typeof e?console.error(e):console.error(e.message,e.stack);},globalContext:"undefined"!=typeof window?window:"object"===("undefined"==typeof self?"undefined":n(self))?self:t,getGlobalContext:function(){return "undefined"!=typeof window?window:"object"===("undefined"==typeof self?"undefined":n(self))?self:t},extend:function(e){var t=Array.prototype.slice.call(arguments,1);return t.forEach((function(t){for(var r in t)e[r]=t[r];})),e},containingFolder:function(e){if(""===e)return "/";if(!e)throw"Path not given!";return e.replace(/\/+/g,"/").replace(/[^\/]+\/?$/,"")},isFolder:function(e){return "/"===e.substr(-1)},isDocument:function(e){return !o.isFolder(e)},baseName:function(e){var t=e.split("/");return o.isFolder(e)?t[t.length-2]+"/":t[t.length-1]},cleanPath:function(e){return e.replace(/\/+/g,"/").split("/").map(encodeURIComponent).join("/").replace(/'/g,"%27")},bindAll:function(e){for(var t in this)"function"==typeof e[t]&&(e[t]=e[t].bind(e));},equal:function(e,t,r){var i;if(r=r||[],n(e)!==n(t))return !1;if("number"==typeof e||"boolean"==typeof e||"string"==typeof e)return e===t;if("function"==typeof e)return e.toString()===t.toString();if(e instanceof ArrayBuffer&&t instanceof ArrayBuffer&&(e=new Uint8Array(e),t=new Uint8Array(t)),e instanceof Array){if(e.length!==t.length)return !1;for(var s=0,a=e.length;s<a;s++)if(!o.equal(e[s],t[s],r))return !1}else{for(i in e)if(e.hasOwnProperty(i)&&!(i in t))return !1;for(i in t)if(t.hasOwnProperty(i)){if(!(i in e))return !1;var u;if("object"===n(t[i])){if(r.indexOf(t[i])>=0)continue;(u=r.slice()).push(t[i]);}if(!o.equal(e[i],t[i],u))return !1}}return !0},deepClone:function(e){var t;return void 0===e?void 0:(function e(t,r){var o,i;if("object"===n(t)&&!Array.isArray(t)&&null!==t)for(o in t)"object"===n(t[o])&&null!==t[o]&&("[object ArrayBuffer]"===t[o].toString()?(r[o]=new ArrayBuffer(t[o].byteLength),i=new Int8Array(t[o]),new Int8Array(r[o]).set(i)):e(t[o],r[o]));}(e,t=JSON.parse(JSON.stringify(e))),t)},pathsFromRoot:function(e){for(var t=[e],r=e.replace(/\/$/,"").split("/");r.length>1;)r.pop(),t.push(r.join("/")+"/");return t},localStorageAvailable:function(){var e=o.getGlobalContext();if(!("localStorage"in e))return !1;try{return e.localStorage.setItem("rs-check",1),e.localStorage.removeItem("rs-check"),!0}catch(e){return !1}},getJSONFromLocalStorage:function(e){var t=o.getGlobalContext();try{return JSON.parse(t.localStorage.getItem(e))}catch(e){}},shouldBeTreatedAsBinary:function(e,t){return t&&t.match(/charset=binary/)||/[\x00-\x08\x0E-\x1F\uFFFD]/.test(e)},getTextFromArrayBuffer:function(e,n){return new Promise((function(i){if("undefined"==typeof Blob){var s=new r(new Uint8Array(e));i(s.toString(n));}else{var a;if(o.globalContext.BlobBuilder=o.globalContext.BlobBuilder||o.globalContext.WebKitBlobBuilder,void 0!==o.globalContext.BlobBuilder){var u=new t.BlobBuilder;u.append(e),a=u.getBlob();}else a=new Blob([e]);var c=new FileReader;"function"==typeof c.addEventListener?c.addEventListener("loadend",(function(e){i(e.target.result);})):c.onloadend=function(e){i(e.target.result);},c.readAsText(a,n);}}))}};e.exports=o;}).call(this,r(10),r(18).Buffer);},function(e,t,r){var n=r(3);e.exports=function(){n.logging&&console.log.apply(console,arguments);};},function(e,t,r){var n=r(1),o={addEventListener:function(e,t){if("string"!=typeof e)throw new Error("Argument eventName should be a string");if("function"!=typeof t)throw new Error("Argument handler should be a function");n("[Eventhandling] Adding event listener",e),this._validateEvent(e),this._handlers[e].push(t);},removeEventListener:function(e,t){this._validateEvent(e);for(var r=this._handlers[e].length,n=0;n<r;n++)if(this._handlers[e][n]===t)return void this._handlers[e].splice(n,1)},_emit:function(e){this._validateEvent(e);var t=Array.prototype.slice.call(arguments,1);this._handlers[e].slice().forEach((function(e){e.apply(this,t);}));},_validateEvent:function(e){if(!(e in this._handlers))throw new Error("Unknown event: "+e)},_delegateEvent:function(e,t){t.on(e,function(t){this._emit(e,t);}.bind(this));},_addEvent:function(e){this._handlers[e]=[];}};o.on=o.addEventListener,o.off=o.removeEventListener,e.exports=function(e){var t=Array.prototype.slice.call(arguments,1);for(var r in o)e[r]=o[r];e._handlers={},t.forEach((function(t){e._addEvent(t);}));};},function(e,t){var r={cache:!0,changeEvents:{local:!0,window:!1,remote:!0,conflict:!0},cordovaRedirectUri:void 0,logging:!1,modules:[],backgroundSyncInterval:6e4,disableFeatures:[],discoveryTimeout:1e4,isBackground:!1,requestTimeout:3e4,syncInterval:1e4};e.exports=r;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(1),i=r(0);function s(e){var t,r=e||u.getLocation().href,n=r.indexOf("#");if(-1!==n&&-1!==(t=r.substring(n+1)).indexOf("="))return t.split("&").reduce((function(e,t){var r=t.split("=");if("state"===r[0]&&r[1].match(/rsDiscovery/)){var n=decodeURIComponent(r[1]),o=n.substr(n.indexOf("rsDiscovery=")).split("&")[0].split("=")[1];e.rsDiscovery=JSON.parse(atob(o)),(n=n.replace(new RegExp("&?rsDiscovery="+o),"")).length>0&&(e.state=n);}else e[decodeURIComponent(r[0])]=decodeURIComponent(r[1]);return e}),{})}var a,u=function e(t,r){var n=r.authURL,s=r.scope,a=r.redirectUri,u=r.clientId;if(o("[Authorize] authURL = ",n,"scope = ",s,"redirectUri = ",a,"clientId = ",u),!i.localStorageAvailable()&&"remotestorage"===t.backend){a+=a.indexOf("#")>0?"&":"#";var c={userAddress:t.remote.userAddress,href:t.remote.href,storageApi:t.remote.storageApi,properties:t.remote.properties};a+="rsDiscovery="+btoa(JSON.stringify(c));}var l=function(e,t,r,n){var o=t.indexOf("#"),i=e;return i+=e.indexOf("?")>0?"&":"?",i+="redirect_uri="+encodeURIComponent(t.replace(/#.*$/,"")),i+="&scope="+encodeURIComponent(r),i+="&client_id="+encodeURIComponent(n),-1!==o&&o+1!==t.length&&(i+="&state="+encodeURIComponent(t.substring(o+1))),i+="&response_type=token"}(n,a,s,u);if(i.globalContext.cordova)return e.openWindow(l,a,"location=yes,clearsessioncache=yes,clearcache=yes").then((function(e){t.remote.configure({token:e.access_token});}));e.setLocation(l);};u.IMPLIED_FAKE_TOKEN=!1,u.Unauthorized=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.name="Unauthorized",this.message=void 0===e?"App authorization expired or revoked.":e,void 0!==t.code&&(this.code=t.code),this.stack=(new Error).stack;},u.Unauthorized.prototype=Object.create(Error.prototype),u.Unauthorized.prototype.constructor=u.Unauthorized,u.getLocation=function(){return document.location},u.setLocation=function(e){if("string"==typeof e)document.location.href=e;else{if("object"!==n(e))throw"Invalid location "+e;document.location=e;}},u.openWindow=function(e,t,r){return new Promise((function(n,o){var i=open(e,"_blank",r);if(!i||i.closed)return o("Authorization popup was blocked");var a=function(){return o("Authorization was canceled")};i.addEventListener("loadstart",(function(e){if(0===e.url.indexOf(t)){i.removeEventListener("exit",a),i.close();var r=s(e.url);return r?n(r):o("Authorization error")}})),i.addEventListener("exit",a);}))},u._rs_supported=function(){return "undefined"!=typeof document},u._rs_init=function(e){a=function(){var n=!1;if(r){if(r.error)throw"access_denied"===r.error?new u.Unauthorized("Authorization failed: access denied",{code:"access_denied"}):new u.Unauthorized("Authorization failed: ".concat(r.error));r.rsDiscovery&&e.remote.configure(r.rsDiscovery),r.access_token&&(e.remote.configure({token:r.access_token}),n=!0),r.remotestorage&&(e.connect(r.remotestorage),n=!0),r.state&&(t=u.getLocation(),u.setLocation(t.href.split("#")[0]+"#"+r.state));}n||e.remote.stopWaitingForToken();};var t,r=s();r.access_token&&((t=u.getLocation()).hash=""),e.on("features-loaded",a);},u._rs_cleanup=function(e){e.removeEventListener("features-loaded",a);},e.exports=u;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(2),i=r(0),s=r(3),a=r(22),u=r(23),c=u.SchemaNotFound,l=function(e,t){if("/"!==t[t.length-1])throw"Not a folder: "+t;"/"===t&&(this.makePath=function(e){return ("/"===e[0]?"":"/")+e}),this.storage=e,this.base=t;var r=this.base.split("/");r.length>2?this.moduleName=r[1]:this.moduleName="root",o(this,"change"),this.on=this.on.bind(this),e.onChange(this.base,this._fireChange.bind(this));};l.Types=u,l.prototype={scope:function(e){return new l(this.storage,this.makePath(e))},getListing:function(e,t){if("string"!=typeof e)e="";else if(e.length>0&&"/"!==e[e.length-1])return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then((function(e){return 404===e.statusCode?{}:e.body}))},getAll:function(e,t){if("string"!=typeof e)e="";else if(e.length>0&&"/"!==e[e.length-1])return Promise.reject("Not a folder: "+e);return this.storage.get(this.makePath(e),t).then(function(r){if(404===r.statusCode)return {};if("object"===n(r.body)){var o=Object.keys(r.body);if(0===o.length)return {};var i=o.map(function(o){return this.storage.get(this.makePath(e+o),t).then((function(e){if("string"==typeof e.body)try{e.body=JSON.parse(e.body);}catch(e){}"object"===n(e.body)&&(r.body[o]=e.body);}))}.bind(this));return Promise.all(i).then((function(){return r.body}))}}.bind(this))},getFile:function(e,t){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getFile must be a string"):this.storage.get(this.makePath(e),t).then((function(e){return {data:e.body,contentType:e.contentType,revision:e.revision}}))},storeFile:function(e,t,r){return "string"!=typeof e?Promise.reject("Argument 'mimeType' of baseClient.storeFile must be a string"):"string"!=typeof t?Promise.reject("Argument 'path' of baseClient.storeFile must be a string"):"string"!=typeof r&&"object"!==n(r)?Promise.reject("Argument 'body' of baseClient.storeFile must be a string, ArrayBuffer, or ArrayBufferView"):(this.storage.access.checkPathPermission(this.makePath(t),"rw")||console.warn("WARNING: Editing a document to which only read access ('r') was claimed"),this.storage.put(this.makePath(t),r,e).then(function(e){return 200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode)}.bind(this)))},getObject:function(e,t){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.getObject must be a string"):this.storage.get(this.makePath(e),t).then(function(t){if("object"===n(t.body))return t.body;if("string"==typeof t.body)try{return JSON.parse(t.body)}catch(t){throw"Not valid JSON: "+this.makePath(e)}else if(void 0!==t.body&&200===t.statusCode)return Promise.reject("Not an object: "+this.makePath(e))}.bind(this))},storeObject:function(e,t,r){if("string"!=typeof e)return Promise.reject("Argument 'typeAlias' of baseClient.storeObject must be a string");if("string"!=typeof t)return Promise.reject("Argument 'path' of baseClient.storeObject must be a string");if("object"!==n(r))return Promise.reject("Argument 'object' of baseClient.storeObject must be an object");this._attachType(r,e);try{var o=this.validate(r);if(!o.valid)return Promise.reject(o)}catch(e){return Promise.reject(e)}return this.storage.put(this.makePath(t),JSON.stringify(r),"application/json; charset=UTF-8").then(function(e){return 200===e.statusCode||201===e.statusCode?e.revision:Promise.reject("Request (PUT "+this.makePath(t)+") failed with status: "+e.statusCode)}.bind(this))},remove:function(e){return "string"!=typeof e?Promise.reject("Argument 'path' of baseClient.remove must be a string"):(this.storage.access.checkPathPermission(this.makePath(e),"rw")||console.warn("WARNING: Removing a document to which only read access ('r') was claimed"),this.storage.delete(this.makePath(e)))},getItemURL:function(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.getItemURL must be a string";return this.storage.connected?(e=this._cleanPath(this.makePath(e)),this.storage.remote.href+e):void 0},cache:function(e,t){if("string"!=typeof e)throw"Argument 'path' of baseClient.cache must be a string";if(void 0===t)t="ALL";else if("string"!=typeof t)throw"Argument 'strategy' of baseClient.cache must be a string or undefined";if("FLUSH"!==t&&"SEEN"!==t&&"ALL"!==t)throw'Argument \'strategy\' of baseclient.cache must be one of ["FLUSH", "SEEN", "ALL"]';return this.storage.caching.set(this.makePath(e),t),this},flush:function(e){return this.storage.local.flush(e)},declareType:function(e,t,r){r||(r=t,t=this._defaultTypeURI(e)),l.Types.declare(this.moduleName,e,t,r);},validate:function(e){var t=l.Types.getSchema(e["@context"]);if(t)return a.validateResult(e,t);throw new c(e["@context"])},schemas:{configurable:!0,get:function(){return l.Types.inScope(this.moduleName)}},_defaultTypeURI:function(e){return "http://remotestorage.io/spec/modules/"+encodeURIComponent(this.moduleName)+"/"+encodeURIComponent(e)},_attachType:function(e,t){e["@context"]=l.Types.resolveAlias(this.moduleName+"/"+t)||this._defaultTypeURI(t);},makePath:function(e){return this.base+(e||"")},_fireChange:function(e){s.changeEvents[e.origin]&&(["new","old","lastCommon"].forEach((function(t){if((!e[t+"ContentType"]||/^application\/(.*)json(.*)/.exec(e[t+"ContentType"]))&&"string"==typeof e[t+"Value"])try{e[t+"Value"]=JSON.parse(e[t+"Value"]);}catch(e){}})),this._emit("change",e));},_cleanPath:i.cleanPath},l._rs_init=function(){},e.exports=l;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i,s=r(1),a=r(0),u=r(2),c=r(4),l=r(3),h="remotestorage:wireclient",f={"draft-dejong-remotestorage-00":2,"draft-dejong-remotestorage-01":3,"draft-dejong-remotestorage-02":4,"https://www.w3.org/community/rww/wiki/read-write-web-00#simple":1};if("function"==typeof ArrayBufferView)i=function(e){return e&&e instanceof ArrayBufferView};else{var d=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];i=function(e){for(var t=0;t<8;t++)if(e instanceof d[t])return !0;return !1};}var p=a.isFolder,m=a.cleanPath,y=a.shouldBeTreatedAsBinary,g=a.getJSONFromLocalStorage,v=a.getTextFromArrayBuffer;function b(e){return "string"!=typeof e?e:"*"===e?"*":'"'+e+'"'}function _(e){return "string"!=typeof e?e:e.replace(/^["']|["']$/g,"")}var w=function(e){if(this.rs=e,this.connected=!1,u(this,"connected","not-connected"),o){var t=g(h);t&&setTimeout(function(){this.configure(t);}.bind(this),0);}this._revisionCache={},this.connected&&setTimeout(this._emit.bind(this),0,"connected");};w.prototype={_request:function(e,t,r,n,o,i,a){if(("PUT"===e||"DELETE"===e)&&"/"===t[t.length-1])return Promise.reject("Don't "+e+" on directories!");var u,l=this;return r!==c.IMPLIED_FAKE_TOKEN&&(n.Authorization="Bearer "+r),this.rs._emit("wire-busy",{method:e,isFolder:p(t)}),w.request(e,t,{body:o,headers:n,responseType:"arraybuffer"}).then((function(r){if(l.online||(l.online=!0,l.rs._emit("network-online")),l.rs._emit("wire-done",{method:e,isFolder:p(t),success:!0}),o=r.status,[401,403,404,412].indexOf(o)>=0)return s("[WireClient] Error response status",r.status),u=i?_(r.getResponseHeader("ETag")):void 0,401===r.status&&l.rs._emit("error",new c.Unauthorized),Promise.resolve({statusCode:r.status,revision:u});if(function(e){return [201,204,304].indexOf(e)>=0}(r.status)||200===r.status&&"GET"!==e)return u=_(r.getResponseHeader("ETag")),s("[WireClient] Successful request",u),Promise.resolve({statusCode:r.status,revision:u});var n=r.getResponseHeader("Content-Type");u=i?_(r.getResponseHeader("ETag")):200===r.status?a:void 0;var o,h=function(e){var t,r="UTF-8";return e&&(t=e.match(/charset=(.+)$/))&&(r=t[1]),r}(n);return y(r.response,n)?(s("[WireClient] Successful request with unknown or binary mime-type",u),Promise.resolve({statusCode:r.status,body:r.response,contentType:n,revision:u})):v(r.response,h).then((function(e){return s("[WireClient] Successful request",u),Promise.resolve({statusCode:r.status,body:e,contentType:n,revision:u})}))}),(function(r){return l.online&&(l.online=!1,l.rs._emit("network-offline")),l.rs._emit("wire-done",{method:e,isFolder:p(t),success:!1}),Promise.reject(r)}))},configure:function(e){if("object"!==n(e))throw new Error("WireClient configure settings parameter should be an object");void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.href&&(this.href=e.href),void 0!==e.storageApi&&(this.storageApi=e.storageApi),void 0!==e.token&&(this.token=e.token),void 0!==e.properties&&(this.properties=e.properties),void 0!==this.storageApi&&(this._storageApi=f[this.storageApi]||5,this.supportsRevs=this._storageApi>=2),this.href&&this.token?(this.connected=!0,this.online=!0,this._emit("connected")):this.connected=!1,o&&(localStorage[h]=JSON.stringify({userAddress:this.userAddress,href:this.href,storageApi:this.storageApi,token:this.token,properties:this.properties}));},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},get:function(e,t){var r=this;if(!this.connected)return Promise.reject("not connected (path: "+e+")");t||(t={});var o={};return this.supportsRevs&&t.ifNoneMatch&&(o["If-None-Match"]=b(t.ifNoneMatch)),this._request("GET",this.href+m(e),this.token,o,void 0,this.supportsRevs,this._revisionCache[e]).then((function(t){if(!p(e))return Promise.resolve(t);var o,i={};if(void 0!==t.body)try{t.body=JSON.parse(t.body);}catch(t){return Promise.reject("Folder description at "+r.href+m(e)+" is not JSON")}if(200===t.statusCode&&"object"===n(t.body)){if(0===Object.keys(t.body).length)t.statusCode=404;else if("http://remotestorage.io/spec/folder-description"===(o=t.body)["@context"]&&"object"===n(o.items)){for(var s in t.body.items)r._revisionCache[e+s]=t.body.items[s].ETag;i=t.body.items;}else Object.keys(t.body).forEach((function(n){r._revisionCache[e+n]=t.body[n],i[n]={ETag:t.body[n]};}));return t.body=i,Promise.resolve(t)}return Promise.resolve(t)}))},put:function(e,t,r,n){if(!this.connected)return Promise.reject("not connected (path: "+e+")");n||(n={}),!r.match(/charset=/)&&(t instanceof ArrayBuffer||i(t))&&(r+="; charset=binary");var o={"Content-Type":r};return this.supportsRevs&&(n.ifMatch&&(o["If-Match"]=b(n.ifMatch)),n.ifNoneMatch&&(o["If-None-Match"]=b(n.ifNoneMatch))),this._request("PUT",this.href+m(e),this.token,o,t,this.supportsRevs)},delete:function(e,t){if(!this.connected)throw new Error("not connected (path: "+e+")");t||(t={});var r={};return this.supportsRevs&&t.ifMatch&&(r["If-Match"]=b(t.ifMatch)),this._request("DELETE",this.href+m(e),this.token,r,void 0,this.supportsRevs)}},w.isArrayBufferView=i,w.request=function(e,t,r){return "function"==typeof fetch?w._fetchRequest(e,t,r):"function"==typeof XMLHttpRequest?w._xhrRequest(e,t,r):(s("[WireClient] add a polyfill for fetch or XMLHttpRequest"),Promise.reject("[WireClient] add a polyfill for fetch or XMLHttpRequest"))},w._fetchRequest=function(e,t,r){var n,o,i={};"function"==typeof AbortController&&(o=new AbortController);var a=fetch(t,{method:e,headers:r.headers,body:r.body,signal:o?o.signal:void 0}).then((function(e){switch(s("[WireClient fetch]",e),e.headers.forEach((function(e,t){i[t.toUpperCase()]=e;})),n={readyState:4,status:e.status,statusText:e.statusText,response:void 0,getResponseHeader:function(e){return i[e.toUpperCase()]||null},responseType:r.responseType,responseURL:t},r.responseType){case"arraybuffer":return e.arrayBuffer();case"blob":return e.blob();case"json":return e.json();case void 0:case"":case"text":return e.text();default:throw new Error("responseType 'document' is not currently supported using fetch")}})).then((function(e){return n.response=e,r.responseType&&"text"!==r.responseType||(n.responseText=e),n})),u=new Promise((function(e,t){setTimeout((function(){t("timeout"),o&&o.abort();}),l.requestTimeout);}));return Promise.race([a,u])},w._xhrRequest=function(e,t,r){return new Promise((function(o,a){s("[WireClient]",e,t);var u=!1,c=setTimeout((function(){u=!0,a("timeout");}),l.requestTimeout),h=new XMLHttpRequest;if(h.open(e,t,!0),r.responseType&&(h.responseType=r.responseType),r.headers)for(var f in r.headers)h.setRequestHeader(f,r.headers[f]);h.onload=function(){u||(clearTimeout(c),o(h));},h.onerror=function(e){u||(clearTimeout(c),a(e));};var d=r.body;"object"===n(d)&&!i(d)&&d instanceof ArrayBuffer&&(d=new Uint8Array(d)),h.send(d);}))},Object.defineProperty(w.prototype,"storageType",{get:function(){if(this.storageApi){var e=this.storageApi.match(/draft-dejong-(remotestorage-\d\d)/);return e?e[1]:"2012.04"}}}),w._rs_init=function(e){o=a.localStorageAvailable(),e.remote=new w(e),this.online=!0;},w._rs_supported=function(){return "function"==typeof fetch||"function"==typeof XMLHttpRequest},w._rs_cleanup=function(){o&&delete localStorage[h];},e.exports=w;},function(e,t,r){function n(e,t){return !t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){var t="function"==typeof Map?new Map:void 0;return (o=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n);}function n(){return s(e,arguments,u(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),a(n,e)})(e)}function i(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}function s(e,t,r){return (s=i()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&a(o,r.prototype),o}).apply(null,arguments)}function a(e,t){return (a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e){return (u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){return (c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}var f,d,p=r(0),m=p.isFolder,y=p.isDocument,g=p.equal,v=p.deepClone,b=p.pathsFromRoot,_=r(12),w=r(2),P=r(1),E=r(4),S=r(3);function T(e,t,r){return {action:e,path:t,promise:r}}function A(e,t){return e.common.revision!==t&&(!e.remote||e.remote.revision!==t)}function R(e){return e.common&&e.common.revision}var k=function(){function e(t){var r=this;l(this,e),this.rs=t,this._tasks={},this._running={},this._timeStarted={},this.numThreads=10,this.rs.local.onDiff((function(e){r.addTask(e),r.doTasks();})),this.rs.caching.onActivate((function(e){r.addTask(e),r.doTasks();})),w(this,"done","req-done");}var t,r,n;return t=e,n=[{key:"_rs_init",value:function(t){f=function(){P("[Sync] syncCycleCb calling syncCycle"),_.isBrowser()&&function(e){function t(t){var r,n;r=e.getCurrentSyncInterval(),S.isBackground=!t,n=e.getCurrentSyncInterval(),e._emit("sync-interval-change",{oldValue:r,newValue:n});}_.on("background",(function(){return t(!1)})),_.on("foreground",(function(){return t(!0)}));}(t),t.sync||(t.sync=new e(t),t.syncStopped&&(P("[Sync] Instantiating sync stopped"),t.sync.stopped=!0,delete t.syncStopped)),P("[Sync] syncCycleCb calling syncCycle"),t.syncCycle();},d=function(){t.removeEventListener("connected",d),t.startSync();},t.on("ready",f),t.on("connected",d);}},{key:"_rs_cleanup",value:function(e){e.stopSync(),e.removeEventListener("ready",f),e.removeEventListener("connected",d),e.sync=void 0,delete e.sync;}}],(r=[{key:"now",value:function(){return (new Date).getTime()}},{key:"queueGetRequest",value:function(e){var t=this;return new Promise((function(r,n){t.rs.remote.connected?t.rs.remote.online?(t.addTask(e,function(){this.rs.local.get(e).then((function(e){return r(e)}));}.bind(t)),t.doTasks()):n("cannot fulfill maxAge requirement - remote is not online"):n("cannot fulfill maxAge requirement - remote is not connected");}))}},{key:"corruptServerItemsMap",value:function(e,t){if("object"!==c(e)||Array.isArray(e))return !0;for(var r in e){var n=e[r];if("object"!==c(n))return !0;if("string"!=typeof n.ETag)return !0;if(m(r)){if(-1!==r.substring(0,r.length-1).indexOf("/"))return !0}else{if(-1!==r.indexOf("/"))return !0;if(t){if("string"!=typeof n["Content-Type"])return !0;if("number"!=typeof n["Content-Length"])return !0}}}return !1}},{key:"corruptItemsMap",value:function(e){if("object"!==c(e)||Array.isArray(e))return !0;for(var t in e)if("boolean"!=typeof e[t])return !0;return !1}},{key:"corruptRevision",value:function(e){return "object"!==c(e)||Array.isArray(e)||e.revision&&"string"!=typeof e.revision||e.body&&"string"!=typeof e.body&&"object"!==c(e.body)||e.contentType&&"string"!=typeof e.contentType||e.contentLength&&"number"!=typeof e.contentLength||e.timestamp&&"number"!=typeof e.timestamp||e.itemsMap&&this.corruptItemsMap(e.itemsMap)}},{key:"isCorrupt",value:function(e){return "object"!==c(e)||Array.isArray(e)||"string"!=typeof e.path||this.corruptRevision(e.common)||e.local&&this.corruptRevision(e.local)||e.remote&&this.corruptRevision(e.remote)||e.push&&this.corruptRevision(e.push)}},{key:"hasTasks",value:function(){return Object.getOwnPropertyNames(this._tasks).length>0}},{key:"collectDiffTasks",value:function(){var e=this,t=0;return this.rs.local.forAllNodes((function(r){t>100||(e.isCorrupt(r)?(P("[Sync] WARNING: corrupt node in local cache",r),"object"===c(r)&&r.path&&(e.addTask(r.path),t++)):e.needsFetch(r)&&e.rs.access.checkPathPermission(r.path,"r")?(e.addTask(r.path),t++):y(r.path)&&e.needsPush(r)&&e.rs.access.checkPathPermission(r.path,"rw")&&(e.addTask(r.path),t++));})).then((function(){return t}),(function(e){throw e}))}},{key:"inConflict",value:function(e){return e.local&&e.remote&&(void 0!==e.remote.body||e.remote.itemsMap)}},{key:"needsRefresh",value:function(e){return !!e.common&&(!e.common.timestamp||this.now()-e.common.timestamp>S.syncInterval)}},{key:"needsFetch",value:function(e){return !!this.inConflict(e)||!(!e.common||void 0!==e.common.itemsMap||void 0!==e.common.body)||!(!e.remote||void 0!==e.remote.itemsMap||void 0!==e.remote.body)}},{key:"needsPush",value:function(e){return !this.inConflict(e)&&(!(!e.local||e.push)||void 0)}},{key:"needsRemotePut",value:function(e){return e.local&&e.local.body}},{key:"needsRemoteDelete",value:function(e){return e.local&&!1===e.local.body}},{key:"getParentPath",value:function(e){var t=e.match(/^(.*\/)([^\/]+\/?)$/);if(t)return t[1];throw new Error('Not a valid path: "'+e+'"')}},{key:"deleteChildPathsFromTasks",value:function(){for(var e in this._tasks)for(var t=b(e),r=1;r<t.length;r++)this._tasks[t[r]]&&(Array.isArray(this._tasks[e])&&this._tasks[e].length&&Array.prototype.push.apply(this._tasks[t[r]],this._tasks[e]),delete this._tasks[e]);}},{key:"collectRefreshTasks",value:function(){var e=this;return this.rs.local.forAllNodes((function(t){var r;if(e.needsRefresh(t)){try{r=e.getParentPath(t.path);}catch(e){}r&&e.rs.access.checkPathPermission(r,"r")?e.addTask(r):e.rs.access.checkPathPermission(t.path,"r")&&e.addTask(t.path);}})).then((function(){e.deleteChildPathsFromTasks();}),(function(e){throw e}))}},{key:"flush",value:function(e){for(var t in e)"FLUSH"===this.rs.caching.checkPath(t)&&e[t]&&!e[t].local&&(P("[Sync] Flushing",t),e[t]=void 0);return e}},{key:"doTask",value:function(e){var t=this;return this.rs.local.getNodes([e]).then((function(r){var n=r[e];return void 0===n?T("get",e,t.rs.remote.get(e)):function(e){return e.remote&&e.remote.revision&&!e.remote.itemsMap&&!e.remote.body}(n)?T("get",e,t.rs.remote.get(e)):t.needsRemotePut(n)?(n.push=v(n.local),n.push.timestamp=t.now(),t.rs.local.setNodes(t.flush(r)).then((function(){var r;return r=R(n)?{ifMatch:n.common.revision}:{ifNoneMatch:"*"},T("put",e,t.rs.remote.put(e,n.push.body,n.push.contentType,r))}))):t.needsRemoteDelete(n)?(n.push={body:!1,timestamp:t.now()},t.rs.local.setNodes(t.flush(r)).then((function(){return R(n)?T("delete",e,t.rs.remote.delete(e,{ifMatch:n.common.revision})):T("get",e,t.rs.remote.get(e))}))):R(n)?T("get",e,t.rs.remote.get(e,{ifNoneMatch:n.common.revision})):T("get",e,t.rs.remote.get(e))}))}},{key:"autoMergeFolder",value:function(e){if(e.remote.itemsMap&&(e.common=e.remote,delete e.remote,e.common.itemsMap)){for(var t in e.common.itemsMap)e.local.itemsMap[t]||(e.local.itemsMap[t]=!1);g(e.local.itemsMap,e.common.itemsMap)&&delete e.local;}return e}},{key:"autoMergeDocument",value:function(e){return function(e){return (!e.remote||!e.remote.revision||e.remote.revision===e.common.revision)&&(void 0===e.common.body&&!1===e.remote.body||e.remote.body===e.common.body&&e.remote.contentType===e.common.contentType)}(e)?delete(e=function(e){return e.remote&&!1===e.remote.body&&e.local&&!1===e.local.body&&delete e.local,e}(e)).remote:void 0!==e.remote.body&&(P("[Sync] Emitting keep/revert"),this.rs.local._emitChange({origin:"conflict",path:e.path,oldValue:e.local.body,newValue:e.remote.body,lastCommonValue:e.common.body,oldContentType:e.local.contentType,newContentType:e.remote.contentType,lastCommonContentType:e.common.contentType}),e.remote.body?e.common=e.remote:e.common={},delete e.remote,delete e.local),e}},{key:"autoMerge",value:function(e){if(e.remote){if(e.local)return m(e.path)?this.autoMergeFolder(e):this.autoMergeDocument(e);if(m(e.path))void 0!==e.remote.itemsMap&&(e.common=e.remote,delete e.remote);else if(void 0!==e.remote.body){var t={origin:"remote",path:e.path,oldValue:!1===e.common.body?void 0:e.common.body,newValue:!1===e.remote.body?void 0:e.remote.body,oldContentType:e.common.contentType,newContentType:e.remote.contentType};if((t.oldValue||t.newValue)&&this.rs.local._emitChange(t),!e.remote.body)return;e.common=e.remote,delete e.remote;}return e}e.common.body&&this.rs.local._emitChange({origin:"remote",path:e.path,oldValue:e.common.body,newValue:void 0,oldContentType:e.common.contentType,newContentType:void 0});}},{key:"updateCommonTimestamp",value:function(e,t){var r=this;return this.rs.local.getNodes([e]).then((function(n){return n[e]&&n[e].common&&n[e].common.revision===t&&(n[e].common.timestamp=r.now()),r.rs.local.setNodes(r.flush(n))}))}},{key:"markChildren",value:function(e,t,r,n){var o=this,i=[],s={},a={};for(var u in t)i.push(e+u),s[e+u]=t[u];for(var c in n)i.push(e+c);return this.rs.local.getNodes(i).then((function(t){var i;for(var u in t)if(i=t[u],s[u])i&&i.common?A(i,s[u].ETag)&&(r[u]=v(i),r[u].remote={revision:s[u].ETag,timestamp:o.now()},r[u]=o.autoMerge(r[u])):"ALL"===o.rs.caching.checkPath(u)&&(r[u]={path:u,common:{timestamp:o.now()},remote:{revision:s[u].ETag,timestamp:o.now()}}),r[u]&&s[u]["Content-Type"]&&(r[u].remote.contentType=s[u]["Content-Type"]),r[u]&&s[u]["Content-Length"]&&(r[u].remote.contentLength=s[u]["Content-Length"]);else if(n[u.substring(e.length)]&&i&&i.common){if(i.common.itemsMap)for(var c in i.common.itemsMap)a[u+c]=!0;if(i.local&&i.local.itemsMap)for(var l in i.local.itemsMap)a[u+l]=!0;if(i.remote||m(u))r[u]=void 0;else if(r[u]=o.autoMerge(i),void 0===r[u]){var h=o.getParentPath(u),f=r[h],d=u.substring(e.length);f&&f.local&&(delete f.local.itemsMap[d],g(f.local.itemsMap,f.common.itemsMap)&&delete f.local);}}return o.deleteRemoteTrees(Object.keys(a),r).then((function(e){return o.rs.local.setNodes(o.flush(e))}))}))}},{key:"deleteRemoteTrees",value:function(e,t){var r=this;return 0===e.length?Promise.resolve(t):this.rs.local.getNodes(e).then((function(e){var n={},o=function(e,t){if(e&&e.itemsMap)for(var r in e.itemsMap)n[t+r]=!0;};for(var i in e){var s=e[i];s&&(m(i)?(o(s.common,i),o(s.local,i)):s.common&&void 0!==s.common.body&&(t[i]=v(s),t[i].remote={body:!1,timestamp:r.now()},t[i]=r.autoMerge(t[i])));}return r.deleteRemoteTrees(Object.keys(n),t).then((function(e){return r.rs.local.setNodes(r.flush(e))}))}))}},{key:"completeFetch",value:function(e,t,r,n){var o,i,s=this,a=b(e);return m(e)?o=[e]:(i=a[1],o=[e,i]),this.rs.local.getNodes(o).then((function(o){var a,u,l={},h=o[e],f=function(e){if(e&&e.itemsMap)for(a in e.itemsMap)t[a]||(l[a]=!0);};if("object"===c(h)&&h.path===e&&"object"===c(h.common)||(h={path:e,common:{}},o[e]=h),h.remote={revision:n,timestamp:s.now()},m(e))for(a in f(h.common),f(h.remote),h.remote.itemsMap={},t)h.remote.itemsMap[a]=!0;else h.remote.body=t,h.remote.contentType=r,(u=o[i])&&u.local&&u.local.itemsMap&&(a=e.substring(i.length),u.local.itemsMap[a]=!0,g(u.local.itemsMap,u.common.itemsMap)&&delete u.local);return o[e]=s.autoMerge(h),{toBeSaved:o,missingChildren:l}}))}},{key:"completePush",value:function(e,t,r,n){var o=this;return this.rs.local.getNodes([e]).then((function(i){var s=i[e];if(!s.push)throw o.stopped=!0,new Error("completePush called but no push version!");return r?(P("[Sync] We have a conflict"),s.remote&&s.remote.revision===n||(s.remote={revision:n||"conflict",timestamp:o.now()},delete s.push),i[e]=o.autoMerge(s)):(s.common={revision:n,timestamp:o.now()},"put"===t?(s.common.body=s.push.body,s.common.contentType=s.push.contentType,g(s.local.body,s.push.body)&&s.local.contentType===s.push.contentType&&delete s.local,delete s.push):"delete"===t&&(!1===s.local.body?i[e]=void 0:delete s.push)),o.rs.local.setNodes(o.flush(i))}))}},{key:"dealWithFailure",value:function(e){var t=this;return this.rs.local.getNodes([e]).then((function(r){if(r[e])return delete r[e].push,t.rs.local.setNodes(t.flush(r))}))}},{key:"interpretStatus",value:function(e){var t={statusCode:e,successful:void 0,conflict:void 0,unAuth:void 0,notFound:void 0,changed:void 0,networkProblems:void 0};if("offline"===e||"timeout"===e)return t.successful=!1,t.networkProblems=!0,t;var r=Math.floor(e/100);return t.successful=2===r||304===e||412===e||404===e,t.conflict=412===e,t.unAuth=401===e&&this.rs.remote.token!==E.IMPLIED_FAKE_TOKEN||402===e||403===e,t.notFound=404===e,t.changed=304!==e,t}},{key:"handleGetResponse",value:function(e,t,r,n,o){var i=this;return t.notFound&&(r=!!m(e)&&{}),t.changed?this.completeFetch(e,r,n,o).then((function(t){return m(e)?i.corruptServerItemsMap(r)?(P("[Sync] WARNING: Discarding corrupt folder description from server for "+e),!1):i.markChildren(e,r,t.toBeSaved,t.missingChildren).then((function(){return !0})):i.rs.local.setNodes(i.flush(t.toBeSaved)).then((function(){return !0}))})):this.updateCommonTimestamp(e,o).then((function(){return !0}))}},{key:"handleResponse",value:function(t,r,n){var o,i=this,s=this.interpretStatus(n.statusCode);if(s.successful){if("get"===r)return this.handleGetResponse(t,s,n.body,n.contentType,n.revision);if("put"===r||"delete"===r)return this.completePush(t,r,s.conflict,n.revision).then((function(){return !0}));throw new Error("cannot handle response for unknown action ".concat(r))}return o=s.unAuth?new E.Unauthorized:s.networkProblems?new e.SyncError("Network request failed."):new Error("HTTP response code "+s.statusCode+" received."),this.dealWithFailure(t).then((function(){throw i.rs._emit("error",o),o}))}},{key:"finishTask",value:function(e){var t=this;if(void 0!==e.action)return e.promise.then((function(r){return t.handleResponse(e.path,e.action,r)}),(function(r){return P("[Sync] wireclient rejects its promise!",e.path,e.action,r),t.handleResponse(e.path,e.action,{statusCode:"offline"})})).then((function(r){if(delete t._timeStarted[e.path],delete t._running[e.path],r&&t._tasks[e.path]){for(var n=0;n<t._tasks[e.path].length;n++)t._tasks[e.path][n]();delete t._tasks[e.path];}t.rs._emit("sync-req-done"),t.collectTasks(!1).then((function(){!t.hasTasks()||t.stopped?(P("[Sync] Sync is done! Reschedule?",Object.getOwnPropertyNames(t._tasks).length,t.stopped),t.done||(t.done=!0,t.rs._emit("sync-done"))):setTimeout((function(){t.doTasks();}),10);}));}),(function(r){P("[Sync] Error",r),delete t._timeStarted[e.path],delete t._running[e.path],t.rs._emit("sync-req-done"),t.done||(t.done=!0,t.rs._emit("sync-done"));}));delete this._running[e.path];}},{key:"doTasks",value:function(){var e,t,r=0;if((e=(this.rs.remote.connected?this.rs.remote.online?this.numThreads:1:0)-Object.getOwnPropertyNames(this._running).length)<=0)return !0;for(t in this._tasks)if(!this._running[t]&&(this._timeStarted[t]=this.now(),this._running[t]=this.doTask(t),this._running[t].then(this.finishTask.bind(this)),++r>=e))return !0;return r>=e}},{key:"collectTasks",value:function(e){var t=this;return this.hasTasks()||this.stopped?Promise.resolve():this.collectDiffTasks().then((function(r){return r||!1===e?Promise.resolve():t.collectRefreshTasks()}),(function(e){throw e}))}},{key:"addTask",value:function(e,t){this._tasks[e]||(this._tasks[e]=[]),"function"==typeof t&&this._tasks[e].push(t);}},{key:"sync",value:function(){var e=this;return this.done=!1,this.doTasks()?Promise.resolve():this.collectTasks().then((function(){try{e.doTasks();}catch(e){P("[Sync] doTasks error",e);}}),(function(e){throw P("[Sync] Sync error",e),new Error("Local cache unavailable")}))}}])&&h(t.prototype,r),n&&h(t,n),e}();k.SyncError=function(e){function t(e){var r;l(this,t),(r=n(this,u(t).call(this))).name="SyncError";var o="Sync failed: ";return "object"===c(e)&&"message"in e?(o+=e.message,r.stack=e.stack,r.originalError=e):o+=e,r.message=o,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t);}(t,e),t}(o(Error)),e.exports=k;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(0),i=r(3),s=r(1),a=o.isFolder,u=o.isDocument,c=o.deepClone;function l(e){if("object"===n(e)&&"string"==typeof e.path)if(a(e.path)){if(e.local&&e.local.itemsMap)return e.local;if(e.common&&e.common.itemsMap)return e.common}else{if(e.local){if(e.local.body&&e.local.contentType)return e.local;if(!1===e.local.body)return}if(e.common&&e.common.body&&e.common.contentType)return e.common;if(e.body&&e.contentType)return {body:e.body,contentType:e.contentType}}}function h(e,t){var r;for(r in e){if(e[r]&&e[r].remote)return !0;var n=l(e[r]);if(n&&n.timestamp&&(new Date).getTime()-n.timestamp<=t)return !1;if(!n)return !0}return !0}var f=o.pathsFromRoot;function d(e){var t={path:e,common:{}};return a(e)&&(t.common.itemsMap={}),t}function p(e,t){return e.common||(e.common={itemsMap:{}}),e.common.itemsMap||(e.common.itemsMap={}),e.local||(e.local=c(e.common)),e.local.itemsMap||(e.local.itemsMap=e.common.itemsMap),e.local.itemsMap[t]=!0,e}var m={get:function(e,t,r){return "number"==typeof t?this.getNodes(f(e)).then((function(n){var o=l(n[e]);return h(n,t)?r(e):o?{statusCode:200,body:o.body||o.itemsMap,contentType:o.contentType}:{statusCode:404}})):this.getNodes([e]).then((function(t){var r=l(t[e]);if(r){if(a(e))for(var n in r.itemsMap)r.itemsMap.hasOwnProperty(n)&&!1===r.itemsMap[n]&&delete r.itemsMap[n];return {statusCode:200,body:r.body||r.itemsMap,contentType:r.contentType}}return {statusCode:404}}))},put:function(e,t,r){var n=f(e);return this._updateNodes(n,(function(e,n){try{for(var o=0,i=e.length;o<i;o++){var a=e[o],u=n[a],c=void 0;if(u||(n[a]=u=d(a)),0===o)c=l(u),u.local={body:t,contentType:r,previousBody:c?c.body:void 0,previousContentType:c?c.contentType:void 0};else u=p(u,e[o-1].substring(a.length));}return n}catch(e){throw s("[Cachinglayer] Error during PUT",n,e),e}}))},delete:function(e){var t=f(e);return this._updateNodes(t,(function(e,t){for(var r=0,n=e.length;r<n;r++){var o=e[r],i=t[o],s=void 0;if(i)if(0===r)s=l(i),i.local={body:!1,previousBody:s?s.body:void 0,previousContentType:s?s.contentType:void 0};else{i.local||(i.local=c(i.common));var a=e[r-1].substring(o.length);if(delete i.local.itemsMap[a],Object.getOwnPropertyNames(i.local.itemsMap).length>0)break}else console.error("Cannot delete non-existing node "+o);}return t}))},flush:function(e){var t=this;return t._getAllDescendentPaths(e).then((function(e){return t.getNodes(e)})).then((function(e){for(var r in e){var n=e[r];n&&n.common&&n.local&&t._emitChange({path:n.path,origin:"local",oldValue:!1===n.local.body?void 0:n.local.body,newValue:!1===n.common.body?void 0:n.common.body}),e[r]=void 0;}return t.setNodes(e)}))},_emitChange:function(e){i.changeEvents[e.origin]&&this._emit("change",e);},fireInitial:function(){if(i.changeEvents.local){var e=this;e.forAllNodes((function(t){var r;u(t.path)&&(r=l(t))&&e._emitChange({path:t.path,origin:"local",oldValue:void 0,oldContentType:void 0,newValue:r.body,newContentType:r.contentType});})).then((function(){e._emit("local-events-done");}));}},onDiff:function(e){this.diffHandler=e;},migrate:function(e){return "object"!==n(e)||e.common||(e.common={},"string"==typeof e.path?"/"===e.path.substr(-1)&&"object"===n(e.body)&&(e.common.itemsMap=e.body):(e.local||(e.local={}),e.local.body=e.body,e.local.contentType=e.contentType)),e},_updateNodesRunning:!1,_updateNodesQueued:[],_updateNodes:function(e,t){return new Promise(function(r,n){this._doUpdateNodes(e,t,{resolve:r,reject:n});}.bind(this))},_doUpdateNodes:function(e,t,r){var n=this;n._updateNodesRunning?n._updateNodesQueued.push({paths:e,cb:t,promise:r}):(n._updateNodesRunning=!0,n.getNodes(e).then((function(i){var s,a=c(i),l=[],h=o.equal;for(var f in i=t(e,i))h(s=i[f],a[f])?delete i[f]:u(f)&&(h(s.local.body,s.local.previousBody)&&s.local.contentType===s.local.previousContentType||l.push({path:f,origin:"window",oldValue:s.local.previousBody,newValue:!1===s.local.body?void 0:s.local.body,oldContentType:s.local.previousContentType,newContentType:s.local.contentType}),delete s.local.previousBody,delete s.local.previousContentType);n.setNodes(i).then((function(){n._emitChangeEvents(l),r.resolve({statusCode:200});}));})).then((function(){return Promise.resolve()}),(function(e){r.reject(e);})).then((function(){n._updateNodesRunning=!1;var e=n._updateNodesQueued.shift();e&&n._doUpdateNodes(e.paths,e.cb,e.promise);})));},_emitChangeEvents:function(e){for(var t=0,r=e.length;t<r;t++)this._emitChange(e[t]),this.diffHandler&&this.diffHandler(e[t].path);},_getAllDescendentPaths:function(e){var t=this;return a(e)?t.getNodes([e]).then((function(r){var n=[e],o=l(r[e]),i=Object.keys(o.itemsMap).map((function(r){return t._getAllDescendentPaths(e+r).then((function(e){for(var t=0,r=e.length;t<r;t++)n.push(e[t]);}))}));return Promise.all(i).then((function(){return n}))})):Promise.resolve([e])},_getInternals:function(){return {getLatest:l,makeNode:d,isOutdated:h}}};e.exports=function(e){for(var t in m)e[t]=m[t];};},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(0),s=r(11),a=r(13),u=r(14),c=r(5),l=r(3),h=r(4),f=r(7),d=r(1),p=r(27),m=i.getGlobalContext(),y=r(2),g=i.getJSONFromLocalStorage;function v(e){return 403!==e.statusCode&&401!==e.statusCode||this._emit("error",new h.Unauthorized),Promise.resolve(e)}var b=function(e){"object"===n(e)&&i.extend(l,e),y(this,"ready","authing","connecting","connected","disconnected","not-connected","conflict","error","features-loaded","sync-interval-change","sync-req-done","sync-done","wire-busy","wire-done","network-offline","network-online"),this._pending=[],this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")}),this._cleanups=[],this._pathHandlers={change:{}},this.apiKeys={},(o=i.localStorageAvailable())&&(this.apiKeys=g("remotestorage:api-keys")||{},this.setBackend(localStorage.getItem("remotestorage:backend")||"remotestorage"));var t=this.on;this.on=function(e,r){if(this._allLoaded)switch(e){case"features-loaded":setTimeout(r,0);break;case"ready":this.remote&&setTimeout(r,0);break;case"connected":this.remote&&this.remote.connected&&setTimeout(r,0);break;case"not-connected":this.remote&&!this.remote.connected&&setTimeout(r,0);}return t.call(this,e,r)},this._init(),this.fireInitial=function(){this.local&&setTimeout(this.local.fireInitial.bind(this.local),0);}.bind(this),this.on("ready",this.fireInitial.bind(this)),this.loadModules();};function _(e){return "number"==typeof e&&e>1e3&&e<36e5}b.Authorize=h,b.SyncError=f.SyncError,b.Unauthorized=h.Unauthorized,b.DiscoveryError=u.DiscoveryError,b.prototype={loadModules:function(){l.modules.forEach(this.addModule.bind(this));},authorize:function(e){this.access.setStorageType(this.remote.storageApi),void 0===e.scope&&(e.scope=this.access.scopeParameter),e.redirectUri=m.cordova?l.cordovaRedirectUri:String(h.getLocation()),void 0===e.clientId&&(e.clientId=e.redirectUri.match(/^(https?:\/\/[^/]+)/)[0]),h(this,e);},impliedauth:function(e,t){e=this.remote.storageApi,t=String(document.location),d("ImpliedAuth proceeding due to absent authURL; storageApi = "+e+" redirectUri = "+t),this.remote.configure({token:h.IMPLIED_FAKE_TOKEN}),document.location=t;},connect:function(e,t){var r=this;if(this.setBackend("remotestorage"),e.indexOf("@")<0)this._emit("error",new b.DiscoveryError("User address doesn't contain an @."));else{if(m.cordova){if("string"!=typeof l.cordovaRedirectUri)return void this._emit("error",new b.DiscoveryError("Please supply a custom HTTPS redirect URI for your Cordova app"));if(!m.cordova.InAppBrowser)return void this._emit("error",new b.DiscoveryError("Please include the InAppBrowser Cordova plugin to enable OAuth"))}this.remote.configure({userAddress:e}),this._emit("connecting");var n=setTimeout(function(){this._emit("error",new b.DiscoveryError("No storage information found for this user address."));}.bind(this),l.discoveryTimeout);u(e).then((function(o){if(clearTimeout(n),r._emit("authing"),o.userAddress=e,r.remote.configure(o),!r.remote.connected)if(o.authURL)if(void 0===t)r.authorize({authURL:o.authURL});else{if("string"!=typeof t)throw new Error("Supplied bearer token must be a string");d("Skipping authorization sequence and connecting with known token"),r.remote.configure({token:t});}else r.impliedauth();}),(function(){clearTimeout(n),r._emit("error",new b.DiscoveryError("No storage information found for this user address."));}));}},reconnect:function(){this.remote.configure({token:null}),"remotestorage"===this.backend?this.connect(this.remote.userAddress):this.remote.connect();},disconnect:function(){this.remote&&this.remote.configure({userAddress:null,href:null,storageApi:null,token:null,properties:null}),this._setGPD({get:this._pendingGPD("get"),put:this._pendingGPD("put"),delete:this._pendingGPD("delete")});var e=this._cleanups.length,t=0,r=function(){++t>=e&&(this._init(),d("Done cleaning up, emitting disconnected and disconnect events"),this._emit("disconnected"));}.bind(this);e>0?this._cleanups.forEach(function(e){var t=e(this);"object"===n(t)&&"function"==typeof t.then?t.then(r):r();}.bind(this)):r();},setBackend:function(e){this.backend=e,o&&(e?localStorage.setItem("remotestorage:backend",e):localStorage.removeItem("remotestorage:backend"));},onChange:function(e,t){this._pathHandlers.change[e]||(this._pathHandlers.change[e]=[]),this._pathHandlers.change[e].push(t);},enableLog:function(){l.logging=!0;},disableLog:function(){l.logging=!1;},log:function(){d.apply(b,arguments);},setApiKeys:function(e){var t=this,r=["googledrive","dropbox"];if("object"!==n(e)||!Object.keys(e).every((function(e){return r.includes(e)})))return console.error("setApiKeys() was called with invalid arguments"),!1;Object.keys(e).forEach((function(r){var n=e[r];if(n){switch(r){case"dropbox":t.apiKeys.dropbox={appKey:n},void 0!==t.dropbox&&t.dropbox.clientId===n||s._rs_init(t);break;case"googledrive":t.apiKeys.googledrive={clientId:n},void 0!==t.googledrive&&t.googledrive.clientId===n||a._rs_init(t);}return !0}delete t.apiKeys[r];})),o&&localStorage.setItem("remotestorage:api-keys",JSON.stringify(this.apiKeys));},setCordovaRedirectUri:function(e){if("string"!=typeof e||!e.match(/http(s)?:\/\//))throw new Error("Cordova redirect URI must be a URI string");l.cordovaRedirectUri=e;},_init:p.loadFeatures,features:p.features,loadFeature:p.loadFeature,featureSupported:p.featureSupported,featureDone:p.featureDone,featuresDone:p.featuresDone,featuresLoaded:p.featuresLoaded,featureInitialized:p.featureInitialized,featureFailed:p.featureFailed,hasFeature:p.hasFeature,_setCachingModule:p._setCachingModule,_collectCleanupFunctions:p._collectCleanupFunctions,_fireReady:p._fireReady,initFeature:p.initFeature,_setGPD:function(e,t){function r(e){return function(){return e.apply(t,arguments).then(v.bind(this))}}this.get=r(e.get),this.put=r(e.put),this.delete=r(e.delete);},_pendingGPD:function(e){return function(){var t=Array.prototype.slice.call(arguments);return new Promise(function(r,n){this._pending.push({method:e,args:t,promise:{resolve:r,reject:n}});}.bind(this))}.bind(this)},_processPending:function(){this._pending.forEach(function(e){try{this[e.method].apply(this,e.args).then(e.promise.resolve,e.promise.reject);}catch(t){e.promise.reject(t);}}.bind(this)),this._pending=[];},_bindChange:function(e){e.on("change",this._dispatchEvent.bind(this,"change"));},_dispatchEvent:function(e,t){var r=this;Object.keys(this._pathHandlers[e]).forEach((function(n){var o=n.length;t.path.substr(0,o)===n&&r._pathHandlers[e][n].forEach((function(e){var o={};for(var i in t)o[i]=t[i];o.relativePath=t.path.replace(new RegExp("^"+n),"");try{e(o);}catch(e){console.error("'change' handler failed: ",e,e.stack),r._emit("error",e);}}));}));},scope:function(e){if("string"!=typeof e)throw"Argument 'path' of baseClient.scope must be a string";if(!this.access.checkPathPermission(e,"r")){var t=e.replace(/(['\\])/g,"\\$1");console.warn("WARNING: please call remoteStorage.access.claim('"+t+"', 'r') (read only) or remoteStorage.access.claim('"+t+"', 'rw') (read/write) first");}return new c(this,e)},getSyncInterval:function(){return l.syncInterval},setSyncInterval:function(e){if(!_(e))throw e+" is not a valid sync interval";var t=l.syncInterval;l.syncInterval=parseInt(e,10),this._emit("sync-interval-change",{oldValue:t,newValue:e});},getBackgroundSyncInterval:function(){return l.backgroundSyncInterval},setBackgroundSyncInterval:function(e){if(!_(e))throw e+" is not a valid sync interval";var t=l.backgroundSyncInterval;l.backgroundSyncInterval=parseInt(e,10),this._emit("sync-interval-change",{oldValue:t,newValue:e});},getCurrentSyncInterval:function(){return l.isBackground?l.backgroundSyncInterval:l.syncInterval},getRequestTimeout:function(){return l.requestTimeout},setRequestTimeout:function(e){l.requestTimeout=parseInt(e,10);},syncCycle:function(){this.sync&&!this.sync.stopped&&(this.on("sync-done",function(){d("[Sync] Sync done. Setting timer to",this.getCurrentSyncInterval()),this.sync&&!this.sync.stopped&&(this._syncTimer&&(clearTimeout(this._syncTimer),this._syncTimer=void 0),this._syncTimer=setTimeout(this.sync.sync.bind(this.sync),this.getCurrentSyncInterval()));}.bind(this)),this.sync.sync());},startSync:function(){return l.cache?(this.sync.stopped=!1,this.syncStopped=!1,this.sync.sync()):(console.warn("Nothing to sync, because caching is disabled."),Promise.resolve())},stopSync:function(){clearTimeout(this._syncTimer),this._syncTimer=void 0,this.sync?(d("[Sync] Stopping sync"),this.sync.stopped=!0):(d("[Sync] Will instantiate sync stopped"),this.syncStopped=!0);}},b.util=i,Object.defineProperty(b.prototype,"connected",{get:function(){return this.remote.connected}});var w=r(15);Object.defineProperty(b.prototype,"access",{get:function(){var e=new w;return Object.defineProperty(this,"access",{value:e}),e},configurable:!0});var P=r(16);Object.defineProperty(b.prototype,"caching",{configurable:!0,get:function(){var e=new P;return Object.defineProperty(this,"caching",{value:e}),e}}),e.exports=b,r(32);},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")();}catch(e){"object"==typeof window&&(r=window);}e.exports=r;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(4),s=r(5),a=r(6),u=r(0),c=r(2),l=r(24),h=r(7),f="remotestorage:dropbox",d=u.isFolder,p=u.cleanPath,m=u.shouldBeTreatedAsBinary,y=u.getJSONFromLocalStorage,g=u.getTextFromArrayBuffer,v=function(e){return p("/remotestorage/"+e).replace(/\/$/,"")},b=function(e,t){return new RegExp("^"+t.join("\\/")+"(\\/|$)").test(e.error_summary)},_=function(e){return e instanceof ArrayBuffer||a.isArrayBufferView(e)},w=function(e){if(this.rs=e,this.connected=!1,this.rs=e,this._initialFetchDone=!1,c(this,"connected","not-connected"),this.clientId=e.apiKeys.dropbox.appKey,this._revCache=new l("rev"),this._fetchDeltaCursor=null,this._fetchDeltaPromise=null,this._itemRefs={},o=u.localStorageAvailable()){var t=y(f);t&&this.configure(t),this._itemRefs=y("".concat(f,":shares"))||{};}this.connected&&setTimeout(this._emit.bind(this),0,"connected");};function P(e){e._dropboxOrigSync||(e._dropboxOrigSync=e.sync.sync.bind(e.sync),e.sync.sync=function(){return this.dropbox.fetchDelta.apply(this.dropbox,arguments).then(e._dropboxOrigSync,(function(t){e._emit("error",new h.SyncError(t)),e._emit("sync-done");}))}.bind(e));}function E(e){e._dropboxOrigSyncCycle&&(e.syncCycle=e._dropboxOrigSyncCycle,delete e._dropboxOrigSyncCycle);}function S(e){!function(e){e._origRemote||(e._origRemote=e.remote,e.remote=e.dropbox);}(e),e.sync?P(e):function(e){var t=arguments;e._dropboxOrigSyncCycle||(e._dropboxOrigSyncCycle=e.syncCycle,e.syncCycle=function(){if(!e.sync)throw new Error("expected sync to be initialized by now");P(e),e._dropboxOrigSyncCycle(t),E(e);});}(e),function(e){e._origBaseClientGetItemURL||(e._origBaseClientGetItemURL=s.prototype.getItemURL,s.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Dropbox yet")});}(e);}function T(e){!function(e){e._origRemote&&(e.remote=e._origRemote,delete e._origRemote);}(e),function(e){e._dropboxOrigSync&&(e.sync.sync=e._dropboxOrigSync,delete e._dropboxOrigSync);}(e),function(e){e._origBaseClientGetItemURL&&(s.prototype.getItemURL=e._origBaseClientGetItemURL,delete e._origBaseClientGetItemURL);}(e),E(e);}w.prototype={online:!0,connect:function(){this.rs.setBackend("dropbox"),this.token?S(this.rs):this.rs.authorize({authURL:"https://www.dropbox.com/oauth2/authorize",scope:"",clientId:this.clientId});},configure:function(e){void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token);var t=function(){o&&localStorage.setItem(f,JSON.stringify({userAddress:this.userAddress,token:this.token}));},r=function(){this.connected=!1,o&&localStorage.removeItem(f);};this.token?(this.connected=!0,this.userAddress?(this._emit("connected"),t.apply(this)):this.info().then(function(e){this.userAddress=e.email,this._emit("connected"),t.apply(this);}.bind(this)).catch(function(){r.apply(this),this.rs._emit("error",new Error("Could not fetch user info."));}.bind(this))):r.apply(this);},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},_getFolder:function(e){var t=this._revCache,r=this,n=function(n){var i,s;if(200!==n.status&&409!==n.status)return Promise.reject("Unexpected response status: "+n.status);try{i=JSON.parse(n.responseText);}catch(e){return Promise.reject(e)}return 409===n.status?b(i,["path","not_found"])?Promise.resolve({}):Promise.reject(new Error("API returned an error: "+i.error_summary)):(s=i.entries.reduce((function(n,o){var i="folder"===o[".tag"],s=o.path_lower.split("/").slice(-1)[0]+(i?"/":"");return i?n[s]={ETag:t.get(e+s)}:(n[s]={ETag:o.rev},r._revCache.set(e+s,o.rev)),n}),{}),i.has_more?o(i.cursor).then((function(e){return Object.assign(s,e)})):Promise.resolve(s))},o=function(e){var t={body:{cursor:e}};return r._request("POST","https://api.dropboxapi.com/2/files/list_folder/continue",t).then(n)};return this._request("POST","https://api.dropboxapi.com/2/files/list_folder",{body:{path:v(e)}}).then(n).then((function(r){return Promise.resolve({statusCode:200,body:r,contentType:"application/json; charset=UTF-8",revision:t.get(e)})}))},get:function(e,t){var r=this;if(!this.connected)return Promise.reject("not connected (path: "+e+")");var n=this,o=this._revCache.get(e);if(null===o)return Promise.resolve({statusCode:404});if(t&&t.ifNoneMatch){if(!this._initialFetchDone)return this.fetchDelta().then((function(){return r.get(e,t)}));if(o&&o===t.ifNoneMatch)return Promise.resolve({statusCode:304})}if("/"===e.substr(-1))return this._getFolder(e,t);var i={headers:{"Dropbox-API-Arg":JSON.stringify({path:v(e)})},responseType:"arraybuffer"};return t&&t.ifNoneMatch&&(i.headers["If-None-Match"]=t.ifNoneMatch),this._request("GET","https://content.dropboxapi.com/2/files/download",i).then((function(t){var r,o,i,s,a=t.status;return 200!==a&&409!==a?Promise.resolve({statusCode:a}):(r=t.getResponseHeader("Dropbox-API-Result"),g(t.response,"UTF-8").then((function(u){o=u,409===a&&(r=o);try{r=JSON.parse(r);}catch(e){return Promise.reject(e)}if(409===a)return b(r,["path","not_found"])?{statusCode:404}:Promise.reject(new Error('API error while downloading file ("'+e+'"): '+r.error_summary));if(i=t.getResponseHeader("Content-Type"),s=r.rev,n._revCache.set(e,s),n._shareIfNeeded(e),m(u,i))o=t.response;else try{o=JSON.parse(o),i="application/json; charset=UTF-8";}catch(e){}return {statusCode:a,body:o,contentType:i,revision:s}})))}))},put:function(e,t,r,n){var o=this;if(!this.connected)throw new Error("not connected (path: "+e+")");var i=this._revCache.get(e);if(n&&n.ifMatch&&i&&i!==n.ifMatch)return Promise.resolve({statusCode:412,revision:i});if(n&&"*"===n.ifNoneMatch&&i&&"rev"!==i)return Promise.resolve({statusCode:412,revision:i});if(!r.match(/charset=/)&&_(t)&&(r+="; charset=binary"),t.length>157286400)return Promise.reject(new Error("Cannot upload file larger than 150MB"));var s=n&&(n.ifMatch||"*"===n.ifNoneMatch),a={body:t,contentType:r,path:e};return (s?this._getMetadata(e).then((function(e){return n&&"*"===n.ifNoneMatch&&e?Promise.resolve({statusCode:412,revision:e.rev}):n&&n.ifMatch&&e&&e.rev!==n.ifMatch?Promise.resolve({statusCode:412,revision:e.rev}):o._uploadSimple(a)})):o._uploadSimple(a)).then((function(t){return o._shareIfNeeded(e),t}))},delete:function(e,t){var r=this;if(!this.connected)throw new Error("not connected (path: "+e+")");var n=this._revCache.get(e);return t&&t.ifMatch&&n&&t.ifMatch!==n?Promise.resolve({statusCode:412,revision:n}):t&&t.ifMatch?this._getMetadata(e).then((function(n){return t&&t.ifMatch&&n&&n.rev!==t.ifMatch?Promise.resolve({statusCode:412,revision:n.rev}):r._deleteSimple(e)})):this._deleteSimple(e)},_shareIfNeeded:function(e){e.match(/^\/public\/.*[^/]$/)&&void 0===this._itemRefs[e]&&this.share(e);},share:function(e){var t=this,r={body:{path:v(e)}};return this._request("POST","https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings",r).then((function(r){if(200!==r.status&&409!==r.status)return Promise.reject(new Error("Invalid response status:"+r.status));var n;try{n=JSON.parse(r.responseText);}catch(e){return Promise.reject(new Error("Invalid response body: "+r.responseText))}return 409===r.status?b(n,["shared_link_already_exists"])?t._getSharedLink(e):Promise.reject(new Error("API error: "+n.error_summary)):Promise.resolve(n.url)})).then((function(r){return t._itemRefs[e]=r,o&&localStorage.setItem(f+":shares",JSON.stringify(t._itemRefs)),Promise.resolve(r)}),(function(t){return t.message='Sharing Dropbox file or folder ("'+e+'") failed: '+t.message,Promise.reject(t)}))},info:function(){return this._request("POST","https://api.dropboxapi.com/2/users/get_current_account",{}).then((function(e){var t=e.responseText;try{t=JSON.parse(t);}catch(e){return Promise.reject(new Error("Could not query current account info: Invalid API response: "+t))}return Promise.resolve({email:t.email})}))},_request:function(e,t,r){var o=this;return r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,"object"!==n(r.body)||_(r.body)||(r.body=JSON.stringify(r.body),r.headers["Content-Type"]="application/json; charset=UTF-8"),this.rs._emit("wire-busy",{method:e,isFolder:d(t)}),a.request.call(this,e,t,r).then((function(n){return n&&503===n.status?(o.online&&(o.online=!1,o.rs._emit("network-offline")),setTimeout(o._request(e,t,r),3210)):(o.online||(o.online=!0,o.rs._emit("network-online")),o.rs._emit("wire-done",{method:e,isFolder:d(t),success:!0}),Promise.resolve(n))}),(function(r){return o.online&&(o.online=!1,o.rs._emit("network-offline")),o.rs._emit("wire-done",{method:e,isFolder:d(t),success:!1}),Promise.reject(r)}))},fetchDelta:function(){var e=this;if(this._fetchDeltaPromise)return this._fetchDeltaPromise;var t=Array.prototype.slice.call(arguments),r=this,o=function e(n){var o,s="https://api.dropboxapi.com/2/files/list_folder";return "string"==typeof n?(s+="/continue",o={cursor:n}):o={path:"/remotestorage",recursive:!0,include_deleted:!0},r._request("POST",s,{body:o}).then((function(o){if(401===o.status)return r.rs._emit("error",new i.Unauthorized),Promise.resolve(t);if(200!==o.status&&409!==o.status)return Promise.reject(new Error("Invalid response status: "+o.status));var s;try{s=JSON.parse(o.responseText);}catch(e){return Promise.reject(new Error("Invalid response body: "+o.responseText))}if(409===o.status){if(!b(s,["path","not_found"]))return Promise.reject(new Error("API returned an error: "+s.error_summary));s={cursor:null,entries:[],has_more:!1};}if(n||r._revCache.deactivatePropagation(),s.entries.forEach((function(e){var t=e.path_lower.substr("/remotestorage".length);"deleted"===e[".tag"]?(r._revCache.delete(t),r._revCache.delete(t+"/")):"file"===e[".tag"]&&r._revCache.set(t,e.rev);})),r._fetchDeltaCursor=s.cursor,s.has_more)return e(s.cursor);r._revCache.activatePropagation(),r._initialFetchDone=!0;})).catch((function(e){return "timeout"===e||e instanceof ProgressEvent?Promise.resolve():Promise.reject(e)}))};return this._fetchDeltaPromise=o(r._fetchDeltaCursor).catch((function(t){return "object"===n(t)&&"message"in t?t.message="Dropbox: fetchDelta: "+t.message:t="Dropbox: fetchDelta: ".concat(t),e._fetchDeltaPromise=null,Promise.reject(t)})).then((function(){return e._fetchDeltaPromise=null,Promise.resolve(t)})),this._fetchDeltaPromise},_getMetadata:function(e){var t={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/get_metadata",{body:t}).then((function(e){if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status:"+e.status));var t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?b(t,["path","not_found"])?Promise.resolve():Promise.reject(new Error("API error: "+t.error_summary)):Promise.resolve(t)})).then(void 0,(function(t){return t.message='Could not load metadata for file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))},_uploadSimple:function(e){var t=this,r={path:v(e.path),mode:{".tag":"overwrite"},mute:!0};return e.ifMatch&&(r.mode={".tag":"update",update:e.ifMatch}),this._request("POST","https://content.dropboxapi.com/2/files/upload",{body:e.body,headers:{"Content-Type":"application/octet-stream","Dropbox-API-Arg":JSON.stringify(r)}}).then((function(r){if(200!==r.status&&409!==r.status)return Promise.resolve({statusCode:r.status});var n=r.responseText;try{n=JSON.parse(n);}catch(e){return Promise.reject(new Error("Invalid API result: "+n))}return 409===r.status?b(n,["path","conflict"])?t._getMetadata(e.path).then((function(e){return Promise.resolve({statusCode:412,revision:e.rev})})):Promise.reject(new Error("API error: "+n.error_summary)):(t._revCache.set(e.path,n.rev),Promise.resolve({statusCode:r.status,revision:n.rev}))}))},_deleteSimple:function(e){var t=this,r={path:v(e)};return this._request("POST","https://api.dropboxapi.com/2/files/delete",{body:r}).then((function(e){if(200!==e.status&&409!==e.status)return Promise.resolve({statusCode:e.status});var t=e.responseText;try{t=JSON.parse(t);}catch(e){return Promise.reject(new Error("Invalid response body: "+t))}return 409===e.status?b(t,["path_lookup","not_found"])?Promise.resolve({statusCode:404}):Promise.reject(new Error("API error: "+t.error_summary)):Promise.resolve({statusCode:200})})).then((function(r){return 200!==r.statusCode&&404!==r.statusCode||(t._revCache.delete(e),delete t._itemRefs[e]),Promise.resolve(r)}),(function(t){return t.message='Could not delete Dropbox file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))},_getSharedLink:function(e){var t={body:{path:v(e),direct_only:!0}};return this._request("POST","https://api.dropbox.com/2/sharing/list_shared_links",t).then((function(e){if(200!==e.status&&409!==e.status)return Promise.reject(new Error("Invalid response status: "+e.status));var t;try{t=JSON.parse(e.responseText);}catch(t){return Promise.reject(new Error("Invalid response body: "+e.responseText))}return 409===e.status?Promise.reject(new Error("API error: "+e.error_summary)):t.links.length?Promise.resolve(t.links[0].url):Promise.reject(new Error("No links returned"))}),(function(t){return t.message='Could not get link to a shared file or folder ("'+e+'"): '+t.message,Promise.reject(t)}))}},w._rs_init=function(e){o=u.localStorageAvailable(),e.apiKeys.dropbox&&(e.dropbox=new w(e)),"dropbox"===e.backend&&S(e);},w._rs_supported=function(){return !0},w._rs_cleanup=function(e){T(e),o&&localStorage.removeItem(f),e.setBackend(void 0);},e.exports=w;},function(e,t,r){var n=r(2),o="undefined"!=typeof window?"browser":"node",i={},s=function(){return i};s.isBrowser=function(){return "browser"===o},s.isNode=function(){return "node"===o},s.goBackground=function(){s._emit("background");},s.goForeground=function(){s._emit("foreground");},s._rs_init=function(){function e(){document[i.hiddenProperty]?s.goBackground():s.goForeground();}n(s,"background","foreground"),"browser"===o&&(void 0!==document.hidden?(i.hiddenProperty="hidden",i.visibilityChangeEvent="visibilitychange"):void 0!==document.mozHidden?(i.hiddenProperty="mozHidden",i.visibilityChangeEvent="mozvisibilitychange"):void 0!==document.msHidden?(i.hiddenProperty="msHidden",i.visibilityChangeEvent="msvisibilitychange"):void 0!==document.webkitHidden&&(i.hiddenProperty="webkitHidden",i.visibilityChangeEvent="webkitvisibilitychange"),document.addEventListener(i.visibilityChangeEvent,e,!1),e());},s._rs_cleanup=function(){},e.exports=s;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(5),s=r(6),a=r(2),u=r(0),c="https://www.googleapis.com",l="remotestorage:googledrive",h=u.isFolder,f=u.cleanPath,d=u.shouldBeTreatedAsBinary,p=u.getJSONFromLocalStorage,m=u.getTextFromArrayBuffer;function y(e){return "/"===e.substr(-1)&&(e=e.substr(0,e.length-1)),decodeURIComponent(e)}function g(e){return e.replace(/[^\/]+\/?$/,"")}function v(e){var t=e.split("/");return "/"===e.substr(-1)?t[t.length-2]+"/":t[t.length-1]}function b(e){return f("".concat("/remotestorage","/").concat(e))}function _(e){return e.replace(/^["'](.*)["']$/,"$1")}var w=function(e){this.maxAge=e,this._items={};};w.prototype={get:function(e){var t=this._items[e],r=(new Date).getTime();return t&&t.t>=r-this.maxAge?t.v:void 0},set:function(e,t){this._items[e]={v:t,t:(new Date).getTime()};}};var P=function(e,t){if(a(this,"connected","not-connected"),this.rs=e,this.clientId=t,this._fileIdCache=new w(300),o=u.localStorageAvailable()){var r=p(l);r&&this.configure(r);}};P.prototype={connected:!1,online:!0,configure:function(e){var t=this;void 0!==e.userAddress&&(this.userAddress=e.userAddress),void 0!==e.token&&(this.token=e.token);var r=function(){o&&localStorage.setItem(l,JSON.stringify({userAddress:this.userAddress,token:this.token}));},n=function(){this.connected=!1,delete this.token,o&&localStorage.removeItem(l);};this.token?(this.connected=!0,this.userAddress?(this._emit("connected"),r.apply(this)):this.info().then((function(e){t.userAddress=e.user.emailAddress,t._emit("connected"),r.apply(t);})).catch((function(){n.apply(t),t.rs._emit("error",new Error("Could not fetch user info."));}))):n.apply(this);},connect:function(){this.rs.setBackend("googledrive"),this.rs.authorize({authURL:"https://accounts.google.com/o/oauth2/auth",scope:"https://www.googleapis.com/auth/drive",clientId:this.clientId});},stopWaitingForToken:function(){this.connected||this._emit("not-connected");},get:function(e,t){return "/"===e.substr(-1)?this._getFolder(b(e),t):this._getFile(b(e),t)},put:function(e,t,r,n){var o=this,i=b(e);function s(e){if(e.status>=200&&e.status<300){var t=JSON.parse(e.responseText),r=_(t.etag);return Promise.resolve({statusCode:200,contentType:t.mimeType,revision:r})}return 412===e.status?Promise.resolve({statusCode:412,revision:"conflict"}):Promise.reject("PUT failed with status "+e.status+" ("+e.responseText+")")}return this._getFileId(i).then((function(e){return e?n&&"*"===n.ifNoneMatch?s({status:412}):o._updateFile(e,i,t,r,n).then(s):o._createFile(i,t,r,n).then(s)}))},delete:function(e,t){var r=this,o=b(e);return this._getFileId(o).then((function(e){return e?r._getMeta(e).then((function(o){var i;return "object"===n(o)&&"string"==typeof o.etag&&(i=_(o.etag)),t&&t.ifMatch&&t.ifMatch!==i?{statusCode:412,revision:i}:r._request("DELETE",c+"/drive/v2/files/"+e,{}).then((function(e){return 200===e.status||204===e.status?{statusCode:200}:Promise.reject("Delete failed: "+e.status+" ("+e.responseText+")")}))})):Promise.resolve({statusCode:200})}))},info:function(){return this._request("GET","https://www.googleapis.com/drive/v2/about?fields=user",{}).then((function(e){try{var t=JSON.parse(e.responseText);return Promise.resolve(t)}catch(e){return Promise.reject(e)}}))},_updateFile:function(e,t,r,n,o){var i=this,s={mimeType:n},a={"Content-Type":"application/json; charset=UTF-8"};return o&&o.ifMatch&&(a["If-Match"]='"'+o.ifMatch+'"'),this._request("PUT",c+"/upload/drive/v2/files/"+e+"?uploadType=resumable",{body:JSON.stringify(s),headers:a}).then((function(e){return 412===e.status?e:i._request("PUT",e.getResponseHeader("Location"),{body:n.match(/^application\/json/)?JSON.stringify(r):r})}))},_createFile:function(e,t,r){var n=this;return this._getParentId(e).then((function(o){var i={title:y(v(e)),mimeType:r,parents:[{kind:"drive#fileLink",id:o}]};return n._request("POST",c+"/upload/drive/v2/files?uploadType=resumable",{body:JSON.stringify(i),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then((function(e){return n._request("POST",e.getResponseHeader("Location"),{body:r.match(/^application\/json/)?JSON.stringify(t):t})}))}))},_getFile:function(e,t){var r=this;return this._getFileId(e).then((function(e){return r._getMeta(e).then((function(e){var o;if("object"===n(e)&&"string"==typeof e.etag&&(o=_(e.etag)),t&&t.ifNoneMatch&&o===t.ifNoneMatch)return Promise.resolve({statusCode:304});if(!e.downloadUrl){if(!e.exportLinks||!e.exportLinks["text/html"])return Promise.resolve({statusCode:200,body:"",contentType:e.mimeType,revision:o});e.mimeType+=";export=text/html",e.downloadUrl=e.exportLinks["text/html"];}return r._request("GET",e.downloadUrl,{responseType:"arraybuffer"}).then((function(t){return m(t.response,"UTF-8").then((function(r){var n=r;if(e.mimeType.match(/^application\/json/))try{n=JSON.parse(n);}catch(e){}else d(r,e.mimeType)&&(n=t.response);return {statusCode:200,body:n,contentType:e.mimeType,revision:o}}))}))}))}))},_getFolder:function(e){var t=this;return this._getFileId(e).then((function(r){var n,o,i,s;return r?(n="'"+r+"' in parents",t._request("GET",c+"/drive/v2/files?q="+encodeURIComponent(n)+"&fields="+encodeURIComponent("items(downloadUrl,etag,fileSize,id,mimeType,title)")+"&maxResults=1000",{}).then((function(r){if(200!==r.status)return Promise.reject("request failed or something: "+r.status);try{o=JSON.parse(r.responseText);}catch(e){return Promise.reject("non-JSON response from GoogleDrive")}s={};var n=!0,a=!1,u=void 0;try{for(var c,l=o.items[Symbol.iterator]();!(n=(c=l.next()).done);n=!0){var h=c.value;i=_(h.etag),"application/vnd.google-apps.folder"===h.mimeType?(t._fileIdCache.set(e+h.title+"/",h.id),s[h.title+"/"]={ETag:i}):(t._fileIdCache.set(e+h.title,h.id),s[h.title]={ETag:i,"Content-Type":h.mimeType,"Content-Length":h.fileSize});}}catch(e){a=!0,u=e;}finally{try{n||null==l.return||l.return();}finally{if(a)throw u}}return Promise.resolve({statusCode:200,body:s,contentType:"application/json; charset=UTF-8",revision:void 0})}))):Promise.resolve({statusCode:404})}))},_getParentId:function(e){var t=this,r=g(e);return this._getFileId(r).then((function(e){return e?Promise.resolve(e):t._createFolder(r)}))},_createFolder:function(e){var t=this;return this._getParentId(e).then((function(r){return t._request("POST",c+"/drive/v2/files",{body:JSON.stringify({title:y(v(e)),mimeType:"application/vnd.google-apps.folder",parents:[{id:r}]}),headers:{"Content-Type":"application/json; charset=UTF-8"}}).then((function(e){var t=JSON.parse(e.responseText);return Promise.resolve(t.id)}))}))},_getFileId:function(e){var t,r=this;return "/"===e?Promise.resolve("root"):(t=this._fileIdCache.get(e))?Promise.resolve(t):this._getFolder(g(e)).then((function(){return (t=r._fileIdCache.get(e))?Promise.resolve(t):"/"===e.substr(-1)?r._createFolder(e).then((function(){return r._getFileId(e)})):Promise.resolve()}))},_getMeta:function(e){return this._request("GET",c+"/drive/v2/files/"+e,{}).then((function(t){return 200===t.status?Promise.resolve(JSON.parse(t.responseText)):Promise.reject("request (getting metadata for "+e+") failed with status: "+t.status)}))},_request:function(e,t,r){var n=this;return r.headers||(r.headers={}),r.headers.Authorization="Bearer "+this.token,this.rs._emit("wire-busy",{method:e,isFolder:h(t)}),s.request.call(this,e,t,r).then((function(r){return r&&401===r.status?void n.connect():(n.online||(n.online=!0,n.rs._emit("network-online")),n.rs._emit("wire-done",{method:e,isFolder:h(t),success:!0}),Promise.resolve(r))}),(function(r){return n.online&&(n.online=!1,n.rs._emit("network-offline")),n.rs._emit("wire-done",{method:e,isFolder:h(t),success:!1}),Promise.reject(r)}))}},P._rs_init=function(e){var t,r=e.apiKeys.googledrive;r&&(e.googledrive=new P(e,r.clientId),"googledrive"===e.backend&&(e._origRemote=e.remote,e.remote=e.googledrive,(t=e)._origBaseClientGetItemURL||(t._origBaseClientGetItemURL=i.prototype.getItemURL,i.prototype.getItemURL=function(){throw new Error("getItemURL is not implemented for Google Drive yet")})));},P._rs_supported=function(){return !0},P._rs_cleanup=function(e){var t;e.setBackend(void 0),e._origRemote&&(e.remote=e._origRemote,delete e._origRemote),(t=e)._origBaseClientGetItemURL&&(i.prototype.getItemURL=t._origBaseClientGetItemURL,delete t._origBaseClientGetItemURL);},e.exports=P;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(1),s=r(0),a=r(25),u={},c=function(e){return new Promise((function(t,r){return e in u?t(u[e]):new a({tls_only:!1,uri_fallback:!0,request_timeout:5e3}).lookup(e,(function(s,a){if(s)return r(s);if("object"!==n(a.idx.links.remotestorage)||"number"!=typeof a.idx.links.remotestorage.length||a.idx.links.remotestorage.length<=0)return i("[Discover] WebFinger record for "+e+" does not have remotestorage defined in the links section ",JSON.stringify(a.json)),r("WebFinger record for "+e+" does not have remotestorage defined in the links section.");var c=a.idx.links.remotestorage[0],l=c.properties["http://tools.ietf.org/html/rfc6749#section-4.2"]||c.properties["auth-endpoint"],h=c.properties["http://remotestorage.io/spec/version"]||c.type;return u[e]={href:c.href,storageApi:h,authURL:l,properties:c.properties},o&&(localStorage["remotestorage:discover"]=JSON.stringify({cache:u})),t(u[e])}))}))};(c.DiscoveryError=function(e){this.name="DiscoveryError",this.message=e,this.stack=(new Error).stack;}).prototype=Object.create(Error.prototype),c.DiscoveryError.prototype.constructor=c.DiscoveryError,c._rs_init=function(){if(o=s.localStorageAvailable()){var e;try{e=JSON.parse(localStorage["remotestorage:discover"]);}catch(e){}e&&(u=e.cache);}},c._rs_supported=function(){return !!s.globalContext.XMLHttpRequest},c._rs_cleanup=function(){o&&delete localStorage["remotestorage:discover"];},e.exports=c;},function(e,t){var r=function(){this.reset();};r.prototype={claim:function(e,t){if("string"!=typeof e||-1!==e.indexOf("/")||0===e.length)throw new Error("Scope should be a non-empty string without forward slashes");if(!t.match(/^rw?$/))throw new Error("Mode should be either 'r' or 'rw'");this._adjustRootPaths(e),this.scopeModeMap[e]=t;},get:function(e){return this.scopeModeMap[e]},remove:function(e){var t,r={};for(t in this.scopeModeMap)r[t]=this.scopeModeMap[t];for(t in this.reset(),delete r[e],r)this.set(t,r[t]);},checkPermission:function(e,t){var r=this.get(e);return r&&("r"===t||"rw"===r)},checkPathPermission:function(e,t){return !!this.checkPermission("*",t)||!!this.checkPermission(this._getModuleName(e),t)},reset:function(){this.rootPaths=[],this.scopeModeMap={};},_getModuleName:function(e){if("/"!==e[0])throw new Error("Path should start with a slash");var t=e.replace(/^\/public/,"").match(/^\/([^/]*)\//);return t?t[1]:"*"},_adjustRootPaths:function(e){"*"in this.scopeModeMap||"*"===e?this.rootPaths=["/"]:e in this.scopeModeMap||(this.rootPaths.push("/"+e+"/"),this.rootPaths.push("/public/"+e+"/"));},_scopeNameForParameter:function(e){if("*"===e.name&&this.storageType){if("2012.04"===this.storageType)return "";if(this.storageType.match(/remotestorage-0[01]/))return "root"}return e.name},setStorageType:function(e){this.storageType=e;}},Object.defineProperty(r.prototype,"scopes",{get:function(){return Object.keys(this.scopeModeMap).map(function(e){return {name:e,mode:this.scopeModeMap[e]}}.bind(this))}}),Object.defineProperty(r.prototype,"scopeParameter",{get:function(){return this.scopes.map(function(e){return this._scopeNameForParameter(e)+":"+e.mode}.bind(this)).join(" ")}}),r._rs_init=function(){},e.exports=r;},function(e,t,r){var n=r(0),o=r(1),i=n.containingFolder,s=function(){this.reset();};s.prototype={pendingActivations:[],set:function(e,t){if("string"!=typeof e)throw new Error("path should be a string");if(!n.isFolder(e))throw new Error("path should be a folder");if(this._remoteStorage&&this._remoteStorage.access&&!this._remoteStorage.access.checkPathPermission(e,"r"))throw new Error('No access to path "'+e+'". You have to claim access to it first.');if(!t.match(/^(FLUSH|SEEN|ALL)$/))throw new Error("strategy should be 'FLUSH', 'SEEN', or 'ALL'");this._rootPaths[e]=t,"ALL"===t&&(this.activateHandler?this.activateHandler(e):this.pendingActivations.push(e));},enable:function(e){this.set(e,"ALL");},disable:function(e){this.set(e,"FLUSH");},onActivate:function(e){var t;for(o("[Caching] Setting activate handler",e,this.pendingActivations),this.activateHandler=e,t=0;t<this.pendingActivations.length;t++)e(this.pendingActivations[t]);delete this.pendingActivations;},checkPath:function(e){return void 0!==this._rootPaths[e]?this._rootPaths[e]:"/"===e?"SEEN":this.checkPath(i(e))},reset:function(){this._rootPaths={},this._remoteStorage=null;}},s._rs_init=function(e){this._remoteStorage=e;},e.exports=s;},function(e,t,r){e.exports=r(9);},function(e,t,r){(function(e){
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <http://feross.org>
     * @license  MIT
     */
    var n=r(19),o=r(20),i=r(21);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return "undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=f(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),o=(e=a(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=a(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return "number"!=typeof t.length||(n=t.length)!=n?a(e,0):f(e,t);if("Buffer"===t.type&&i(t.data))return f(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function f(e,t){var r=t.length<0?0:0|d(t.length);e=a(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(e).length;default:if(n)return B(e).length;t=(""+t).toLowerCase(),n=!0;}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(t>>>=0))return "";for(e||(e="utf8");;)switch(e){case"hex":return O(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return R(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return T(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0;}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n;}function g(e,t,r,n,o){if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return -1;r=e.length-1;}else if(r<0){if(!o)return -1;r=0;}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,o){var i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,a/=2,u/=2,r/=2;}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1;}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,f=0;f<u;f++)if(c(e,i+f)!==c(t,f)){h=!1;break}if(h)return i}return -1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[r+s]=a;}return s}function _(e,t,r,n){return J(B(t,e.length-r),e,r,n)}function w(e,t,r,n){return J(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return w(e,t,r,n)}function E(e,t,r,n){return J(q(t),e,r,n)}function S(e,t,r,n){return J(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function T(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,u,c=e[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u);}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=h;}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return !1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof n?a(e,t).fill(r,n):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return h(null,e)},u.allocUnsafeSlow=function(e){return h(null,e)},u.isBuffer=function(e){return !(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var s=e[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,o),o+=s.length;}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return -1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(n,o),l=e.slice(t,r),h=0;h<a;++h)if(c[h]!==l[h]){i=c[h],s=l[h];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return P(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},u.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function R(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function O(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=F(e[i]);return o}function I(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function C(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o);}function x(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255;}function U(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,i){return i||U(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,i){return i||U(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e];}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||C(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||M(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):x(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);M(this,e,t,r,o-1,-o);}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);M(this,e,t,r,o-1,-o);}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):x(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):x(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o);}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var s=u.isBuffer(e)?e:B(new u(e,n).toString()),a=s.length;for(i=0;i<r-t;++i)this[i+t]=s[i%a];}return this};var D=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function B(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320);}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r);}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function q(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(e))}function J(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(10));},function(e,t,r){t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),s=n[0],a=n[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),l=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===a&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===a&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],s=0,a=r-o;s<a;s+=16383)i.push(l(e,s,s+16383>a?a:s+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var o,i,s=[],a=t;a<r;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63;},function(e,t){t.read=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?o-1:0,f=r?-1:1,d=e[t+h];for(h+=f,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),i-=c;}return (d?-1:1)*s*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,p=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+d]=255&s,d+=p,s/=256,c-=8);e[r+d-p]|=128*m;};},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return "[object Array]"==r.call(e)};},function(e,t,r){var n,o,i;o=[],void 0===(i="function"==typeof(n=function(){var e,t,r,n;Object.keys||(Object.keys=(e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),n=(r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var s in o)e.call(o,s)&&i.push(s);if(t)for(var a=0;a<n;a++)e.call(o,r[a])&&i.push(r[a]);return i})),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return "[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return -1;var n=0;if(arguments.length>1&&((n=Number(arguments[1]))!=n?n=0:0!==n&&n!==1/0&&n!==-1/0&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return -1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return -1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(e){return !0}});var o={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},i={"*":!0};function s(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,(function(e){return "%"+e.substring(3)}))}function a(e){var t="";o[e.charAt(0)]&&(t=e.charAt(0),e=e.substring(1));var r="",n="",a=!0,u=!1,c=!1;"+"===t?a=!1:"."===t?(n=".",r="."):"/"===t?(n="/",r="/"):"#"===t?(n="#",a=!1):";"===t?(n=";",r=";",u=!0,c=!0):"?"===t?(n="?",r="&",u=!0):"&"===t&&(n="&",r="&",u=!0);for(var l=[],h=e.split(","),f=[],d={},p=0;p<h.length;p++){var m=h[p],y=null;if(-1!==m.indexOf(":")){var g=m.split(":");m=g[0],y=parseInt(g[1],10);}for(var v={};i[m.charAt(m.length-1)];)v[m.charAt(m.length-1)]=!0,m=m.substring(0,m.length-1);var b={truncate:y,name:m,suffices:v};f.push(b),d[m]=b,l.push(m);}var _=function(e){for(var t="",o=0,i=0;i<f.length;i++){var l=f[i],h=e(l.name);if(null==h||Array.isArray(h)&&0===h.length||"object"==typeof h&&0===Object.keys(h).length)o++;else if(t+=i===o?n:r||",",Array.isArray(h)){u&&(t+=l.name+"=");for(var d=0;d<h.length;d++)d>0&&(t+=l.suffices["*"]&&r||",",l.suffices["*"]&&u&&(t+=l.name+"=")),t+=a?encodeURIComponent(h[d]).replace(/!/g,"%21"):s(h[d]);}else if("object"==typeof h){u&&!l.suffices["*"]&&(t+=l.name+"=");var p=!0;for(var m in h)p||(t+=l.suffices["*"]&&r||","),p=!1,t+=a?encodeURIComponent(m).replace(/!/g,"%21"):s(m),t+=l.suffices["*"]?"=":",",t+=a?encodeURIComponent(h[m]).replace(/!/g,"%21"):s(h[m]);}else u&&(t+=l.name,c&&""===h||(t+="=")),null!=l.truncate&&(h=h.substring(0,l.truncate)),t+=a?encodeURIComponent(h).replace(/!/g,"%21"):s(h);}return t};return _.varNames=l,{prefix:n,substitution:_}}function u(e){if(!(this instanceof u))return new u(e);for(var t=e.split("{"),r=[t.shift()],n=[],o=[],i=[];t.length>0;){var s=t.shift(),c=s.split("}")[0],l=s.substring(c.length+1),h=a(c);o.push(h.substitution),n.push(h.prefix),r.push(l),i=i.concat(h.substitution.varNames);}this.fill=function(e){for(var t=r[0],n=0;n<o.length;n++)t+=(0, o[n])(e),t+=r[n+1];return t},this.varNames=i,this.template=e;}u.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill((function(t){return e[t]}))}};var c=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||g("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0);};function l(e,t){if(e===t)return !0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return !1;if(Array.isArray(e)){if(e.length!==t.length)return !1;for(var r=0;r<e.length;r++)if(!l(e[r],t[r]))return !1}else{var n;for(n in e)if(void 0===t[n]&&void 0!==e[n])return !1;for(n in t)if(void 0===e[n]&&void 0!==t[n])return !1;for(n in e)if(!l(e[n],t[n]))return !1}return !0}return !1}c.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t);},c.prototype.createError=function(e,t,r,n,o,i,s){var a=new P(e,t,r,n,o);return a.message=this.errorReporter(a,i,s),a},c.prototype.returnError=function(e){return e},c.prototype.collectError=function(e){return e&&this.errors.push(e),null},c.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},c.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},c.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t;},c.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if((t=t||{})[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t);}return e},c.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(-1!==e.indexOf("#")&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var s=i.split("/").slice(1),a=0;a<s.length;a++){var u=s[a].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u];}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n);},c.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e)for(var n in"string"==typeof e.id&&function(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return !0}return !1}(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e),e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=m(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o);}},c.prototype.addSchema=function(e,t){if("string"!=typeof e||void 0===t){if("object"!=typeof e||"string"!=typeof e.id)return;e=(t=e).id;}e===m(e)+"#"&&(e=m(e)),this.schemas[e]=t,delete this.missingMap[e],y(t,e),this.searchSchemas(t,e);},c.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},c.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},c.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},c.prototype.dropSchemas=function(){this.schemas={},this.reset();},c.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[];},c.prototype.validateAll=function(e,t,r,n,o){var i;if(!(t=this.resolveRefs(t)))return null;if(t instanceof P)return this.errors.push(t),t;var s,a=this.errors.length,u=null,c=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var l=e[this.validatedSchemasKey].indexOf(t);if(-1!==l)return this.errors=this.errors.concat(e[this.validationErrorsKey][l]),null}if(Object.isFrozen(e)&&-1!==(s=this.scannedFrozen.indexOf(e))){var h=this.scannedFrozenSchemas[s].indexOf(t);if(-1!==h)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[s][h]),null}if(this.scanned.push(e),Object.isFrozen(e))-1===s&&(s=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[s].length,this.scannedFrozenSchemas[s][u]=t,this.scannedFrozenValidationErrors[s][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0});}catch(t){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[];}c=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][c]=t,e[this.validationErrorsKey][c]=[];}}var f=this.errors.length,d=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;)delete this.scanned.pop()[this.validatedSchemasKey];this.scannedFrozen=[],this.scannedFrozenSchemas=[];}if(d||f!==this.errors.length)for(;r&&r.length||n&&n.length;){var p=r&&r.length?""+r.pop():null,m=n&&n.length?""+n.pop():null;d&&(d=d.prefixWith(p,m)),this.prefixErrors(f,p,m);}return null!==u?this.scannedFrozenValidationErrors[s][u]=this.errors.slice(a):null!==c&&(e[this.validationErrorsKey][c]=this.errors.slice(a)),this.handleError(d)},c.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return "string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},c.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if(void 0!==t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var s=(0, o[i])(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var a=s.code;if("string"==typeof a){if(!v[a])throw new Error("Undefined error code (use defineError): "+a);a=v[a];}else"number"!=typeof a&&(a=v.KEYWORD_CUSTOM);var u="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},c=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(a,u,s.dataPath||null,c,null,e,t)}}return null},c.prototype.validateBasic=function(e,t,r){var n;return (n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},c.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1==0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},c.prototype.validateEnum=function(e,t){if(void 0===t.enum)return null;for(var r=0;r<t.enum.length;r++)if(l(e,t.enum[r]))return null;return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},c.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var h=Math.pow(2,-51),f=1-h;function d(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function p(e,t){return t=d(t||""),e=d(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+(r=t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname,n=[],r.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,(function(e){"/.."===e?n.pop():n.push(e);})),n.join("").replace(/^\//,"/"===r.charAt(0)?"/":""))+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null;var r,n;}function m(e){return e.split("#")[0]}function y(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=p(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)y(e[r],t);else for(var n in"string"==typeof e.$ref&&(e.$ref=p(t,e.$ref)),e)"enum"!==n&&y(e[n],t);}function g(e){var t=E[e=e||"en"];return function(e){var r=t[e.code]||w[e.code];if("string"!=typeof r)return "Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,(function(e,t){var r=n[t];return "string"==typeof r||"number"==typeof r?r:e}))}}c.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=h&&n<f)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},c.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},c.prototype.validateNaN=function(e,t){return "number"!=typeof e?null:!0===isNaN(e)||e===1/0||e===-1/0?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},c.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},c.prototype.validateStringLength=function(e,t){return "string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},c.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o);}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},c.prototype.validateArray=function(e,t,r){return Array.isArray(e)&&(this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r))||null},c.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},c.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var n=r+1;n<e.length;n++)if(l(e[r],e[n])){var o=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:n},"","/uniqueItems",null,e,t);if(this.handleError(o))return o}return null},c.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},c.prototype.validateObject=function(e,t,r){return "object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},c.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},c.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},c.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),s=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(s=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var a in t.patternProperties)if(new RegExp(a).test(o)&&(s=!0,n=this.validateAll(e[o],t.patternProperties[a],[o],["patternProperties",a],i)))return n;if(s)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0);}return null},c.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var s=0;s<i.length;s++){var a=i[s];if(void 0===e[a]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:a},"","/"+s,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},c.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},c.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},c.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var a=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,h=this.validateAll(e,c,[],["anyOf",u],r);if(null===h&&l===this.errors.length){if(this.errors=this.errors.slice(0,s),this.trackUnknownProperties){for(var f in this.knownPropertyPaths)o[f]=!0,delete n[f];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0);a=!1;continue}return null}h&&i.push(h.prefixWith(null,""+u).prefixWith(null,"anyOf"));}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),a?(i=i.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},c.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,s=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,h=this.validateAll(e,c,[],["oneOf",u],r);if(null===h&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var f in this.knownPropertyPaths)o[f]=!0,delete n[f];for(var d in this.unknownPropertyPaths)o[d]||(n[d]=!0);}}else h&&s.push(h);}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(s=s.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",s,e,t)):(this.errors=this.errors.slice(0,a),null)},c.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var s=this.validateAll(e,t.not,null,null,r),a=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===s&&0===a.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},c.prototype.validateHypermedia=function(e,t,r){if(!t.links)return null;for(var n,o=0;o<t.links.length;o++){var i=t.links[o];if("describedby"===i.rel){for(var s=new u(i.href),a=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){a=!1;break}if(a){var l={$ref:s.fillFromObject(e)};if(n=this.validateAll(e,l,[],["links",o],r))return n}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},b={};for(var _ in v)b[v[_]]=_;var w={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};function P(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace;}}P.prototype=Object.create(Error.prototype),P.prototype.constructor=P,P.prototype.name="ValidationError",P.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},S=function e(t){var r,n,o=new c,i={setErrorReporter:function(e){return "string"==typeof e?this.language(e):(n=e,!0)},addFormat:function(){o.addFormat.apply(o,arguments);},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(r=e,e)):r},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n])for(r in E[e]=Object.create(E[n]),t)void 0===E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r];else E[e]=t,E[n]=t;return this},freshApi:function(t){var r=e();return t&&r.language(t),r},validate:function(e,t,i,s){var a=g(r),u=new c(o,!1,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t);var l=u.validateAll(e,t,null,null,"");return !l&&s&&(l=u.banUnknownProperties(e,t)),this.error=l,this.missing=u.missing,this.valid=null===l,this.valid},validateResult:function(){var e={toString:function(){return this.valid?"valid":this.error.message}};return this.validate.apply(e,arguments),e},validateMultiple:function(e,t,i,s){var a=g(r),u=new c(o,!0,n?function(e,t,r){return n(e,t,r)||a(e,t,r)}:a,i,s);"string"==typeof t&&(t={$ref:t}),u.addSchema("",t),u.validateAll(e,t,null,null,""),s&&u.banUnknownProperties(e,t);var l={toString:function(){return this.valid?"valid":this.error.message}};return l.errors=u.errors,l.missing=u.missing,l.valid=0===l.errors.length,l},addSchema:function(){return o.addSchema.apply(o,arguments)},getSchema:function(){return o.getSchema.apply(o,arguments)},getSchemaMap:function(){return o.getSchemaMap.apply(o,arguments)},getSchemaUris:function(){return o.getSchemaUris.apply(o,arguments)},getMissingUris:function(){return o.getMissingUris.apply(o,arguments)},dropSchemas:function(){o.dropSchemas.apply(o,arguments);},defineKeyword:function(){o.defineKeyword.apply(o,arguments);},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!=0||t<1e4)throw new Error("Code number must be an integer > 10000");if(void 0!==v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if(void 0!==b[t])throw new Error("Error code already used: "+b[t]+" as "+t);for(var n in v[e]=t,b[t]=e,w[e]=w[t]=r,E){var o=E[n];o[e]&&(o[t]=o[t]||o[e]);}},reset:function(){o.reset(),this.error=null,this.missing=[],this.valid=!0;},missing:[],error:null,valid:!0,normSchema:y,resolveUrl:p,getDocumentUri:m,errorCodes:v};return i.language(t||"en"),i}();return S.addLanguage("en-gb",w),S.tv4=S,S})?n.apply(t,o):n)||(e.exports=i);},function(e,t){var r={uris:{},schemas:{},aliases:{},declare:function(e,t,r,n){var o=e+"/"+t;if(n.extends){var i,s=n.extends.split("/");i=1===s.length?e+"/"+s.shift():s.join("/");var a=this.uris[i];if(!a)throw"Type '"+o+"' tries to extend unknown schema '"+i+"'";n.extends=this.schemas[a];}this.uris[o]=r,this.aliases[r]=o,this.schemas[r]=n;},resolveAlias:function(e){return this.uris[e]},getSchema:function(e){return this.schemas[e]},inScope:function(e){var t=e.length,r={};for(var n in this.uris)if(n.substr(0,t+1)===e+"/"){var o=this.uris[n];r[o]=this.schemas[o];}return r}},n=function(e){var t=new Error("Schema not found: "+e);return t.name="SchemaNotFound",t};n.prototype=Error.prototype,r.SchemaNotFound=n,e.exports=r;},function(e,t){function r(e){this.defaultValue=e,this._canPropagate=!1,this._storage={},this._itemsRev={},this.activatePropagation();}r.prototype={get:function(e){e=e.toLowerCase();var t=this._storage[e];return void 0===t&&(t=this.defaultValue,this._storage[e]=t),t},set:function(e,t){return e=e.toLowerCase(),this._storage[e]===t?t:(this._storage[e]=t,t||delete this._itemsRev[e],this._updateParentFolderItemRev(e,t),this._canPropagate&&this._propagate(e),t)},delete:function(e){return this.set(e,null)},deactivatePropagation:function(){return this._canPropagate=!1,!0},activatePropagation:function(){return !!this._canPropagate||(this._generateFolderRev("/"),this._canPropagate=!0,!0)},_hashCode:function(e){var t,r=0;if(0===e.length)return r;for(t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return r},_generateHash:function(e){var t=e.sort().join("|");return ""+this._hashCode(t)},_updateParentFolderItemRev:function(e,t){if("/"!==e){var r=this._getParentFolder(e);this._itemsRev[r]||(this._itemsRev[r]={});var n=this._itemsRev[r];t?n[e]=t:delete n[e],this._updateParentFolderItemRev(r,this.defaultValue);}},_getParentFolder:function(e){return e.substr(0,e.lastIndexOf("/",e.length-2)+1)},_propagate:function(e){if("/"!==e){var t=this._getParentFolder(e),r=this._itemsRev[t],n=[];for(var o in r)n.push(r[o]);var i=this._generateHash(n);this.set(t,i);}},_generateFolderRev:function(e){var t=this._itemsRev[e],r=this.defaultValue;if(t){var n=[];for(var o in t){var i=void 0;i="/"===o.substr(-1)?this._generateFolderRev(o):t[o],n.push(i);}n.length>0&&(r=this._generateHash(n));}return this.set(e,r),r}},e.exports=r;},function(e,t,r){var n;
    /*!
     * webfinger.js
     *   version 2.7.0
     *   http://github.com/silverbucket/webfinger.js
     *
     * Developed and Maintained by:
     *   Nick Jennings <nick@silverbucket.net> 2012
     *
     * webfinger.js is released under the AGPL (see LICENSE).
     *
     * You don't have to do anything special to choose one license or the other and you don't
     * have to notify anyone which license you are using.
     * Please see the corresponding license file for details of these licenses.
     * You are free to use, modify and distribute this software, but all copyright
     * information must remain.
     *
     */"function"!=typeof fetch&&"function"!=typeof XMLHttpRequest&&(XMLHttpRequest=r(26)),function(r){var o={"http://webfist.org/spec/rel":"webfist","http://webfinger.net/rel/avatar":"avatar",remotestorage:"remotestorage","http://tools.ietf.org/id/draft-dejong-remotestorage":"remotestorage",remoteStorage:"remotestorage","http://www.packetizer.com/rel/share":"share","http://webfinger.net/rel/profile-page":"profile",me:"profile",vcard:"vcard",blog:"blog","http://packetizer.com/rel/blog":"blog","http://schemas.google.com/g/2010#updates-from":"updates","https://camlistore.org/rel/server":"camilstore"},i={avatar:[],remotestorage:[],blog:[],vcard:[],updates:[],share:[],profile:[],webfist:[],camlistore:[]},s=["webfinger","host-meta","host-meta.json"];function a(e){return e.toString=function(){return this.message},e}function u(e){"object"!=typeof e&&(e={}),this.config={tls_only:void 0===e.tls_only||e.tls_only,webfist_fallback:void 0!==e.webfist_fallback&&e.webfist_fallback,uri_fallback:void 0!==e.uri_fallback&&e.uri_fallback,request_timeout:void 0!==e.request_timeout?e.request_timeout:1e4};}u.prototype.__fetchJRD=function(e,t,r){if("function"==typeof fetch)return this.__fetchJRD_fetch(e,t,r);if("function"==typeof XMLHttpRequest)return this.__fetchJRD_XHR(e,t,r);throw new Error("add a polyfill for fetch or XMLHttpRequest")},u.prototype.__fetchJRD_fetch=function(e,t,r){var n,o=this;"function"==typeof AbortController&&(n=new AbortController);var i=fetch(e,{headers:{Accept:"application/jrd+json, application/json"},signal:n?n.signal:void 0}).then((function(t){if(t.ok)return t.text();throw 404===t.status?a({message:"resource not found",url:e,status:t.status}):a({message:"error during request",url:e,status:t.status})}),(function(t){throw a({message:"error during request",url:e,status:void 0,err:t})})).then((function(t){if(o.__isValidJSON(t))return t;throw a({message:"invalid json",url:e,status:void 0})})),s=new Promise((function(t,r){setTimeout((function(){r(a({message:"request timed out",url:e,status:void 0})),n&&n.abort();}),o.config.request_timeout);}));Promise.race([i,s]).then((function(e){r(e);})).catch((function(e){t(e);}));},u.prototype.__fetchJRD_XHR=function(e,t,r){var n=this,o=!1,i=new XMLHttpRequest;function s(){if(!o){if(o=!0,200===i.status)return n.__isValidJSON(i.responseText)?r(i.responseText):t(a({message:"invalid json",url:e,status:i.status}));if(404===i.status)return t(a({message:"resource not found",url:e,status:i.status}));if(i.status>=301&&i.status<=302){var s=i.getResponseHeader("Location");return function(e){return "string"==typeof e&&"https"===e.split("://")[0]}(s)?u():t(a({message:"no redirect URL found",url:e,status:i.status}))}return t(a({message:"error during request",url:e,status:i.status}))}}function u(){i.onreadystatechange=function(){4===i.readyState&&s();},i.onload=function(){s();},i.ontimeout=function(){return t(a({message:"request timed out",url:e,status:i.status}))},i.open("GET",e,!0),i.timeout=n.config.request_timeout,i.setRequestHeader("Accept","application/jrd+json, application/json"),i.send();}return u()},u.prototype.__isValidJSON=function(e){try{JSON.parse(e);}catch(e){return !1}return !0},u.prototype.__isLocalhost=function(e){return /^localhost(\.localdomain)?(\:[0-9]+)?$/.test(e)},u.prototype.__processJRD=function(e,t,r,n){var s=JSON.parse(t);if("object"!=typeof s||"object"!=typeof s.links)return void 0!==s.error?r(a({message:s.error,request:e})):r(a({message:"unknown response from server",request:e}));var u=s.links;Array.isArray(u)||(u=[]);var c={object:s,json:t,idx:{}};c.idx.properties={name:void 0},c.idx.links=JSON.parse(JSON.stringify(i)),u.map((function(e,t){if(o.hasOwnProperty(e.rel)&&c.idx.links[o[e.rel]]){var r={};Object.keys(e).map((function(t,n){r[t]=e[t];})),c.idx.links[o[e.rel]].push(r);}}));var l=JSON.parse(t).properties;for(var h in l)l.hasOwnProperty(h)&&"http://packetizer.com/ns/name"===h&&(c.idx.properties.name=l[h]);return n(c)},u.prototype.lookup=function(e,t){if("string"!=typeof e)throw new Error("first parameter must be a user address");if("function"!=typeof t)throw new Error("second parameter must be a callback");var r=this,n="";n=e.indexOf("://")>-1?e.replace(/ /g,"").split("/")[2]:e.replace(/ /g,"").split("@")[1];var o=0,i="https";function a(){var t="";return e.split("://")[1]||(t="acct:"),i+"://"+n+"/.well-known/"+s[o]+"?resource="+t+e}function u(e){if(r.config.uri_fallback&&"webfist.org"!==n&&o!==s.length-1)return o+=1,c();if(!r.config.tls_only&&"https"===i)return o=0,i="http",c();if(!r.config.webfist_fallback||"webfist.org"===n)return t(e);o=0,i="http",n="webfist.org";var u=a();r.__fetchJRD(u,t,(function(e){r.__processJRD(u,e,t,(function(e){"object"==typeof e.idx.links.webfist&&"string"==typeof e.idx.links.webfist[0].href&&r.__fetchJRD(e.idx.links.webfist[0].href,t,(function(e){r.__processJRD(u,e,t,(function(e){return t(null,t)}));}));}));}));}function c(){var e=a();r.__fetchJRD(e,u,(function(n){r.__processJRD(e,n,t,(function(e){t(null,e);}));}));}return(r.__isLocalhost(n)&&(i="http"),setTimeout(c,0))},u.prototype.lookupLink=function(e,t,r){if(!i.hasOwnProperty(t))return r("unsupported rel "+t);this.lookup(e,(function(e,n){var o=n.idx.links[t];return e?r(e):0===o.length?r('no links found with rel="'+t+'"'):r(null,o[0])}));},void 0===(n=function(){return u}.apply(t,[]))||(e.exports=n);}();},function(e,t){e.exports=XMLHttpRequest;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(0),i=r(1),s=r(28),a=r(3),u={features:[],featuresDone:0,readyFired:!1,loadFeatures:function(){var e=this;for(var t in this.features=[],this.featuresDone=0,this.readyFired=!1,this.featureModules={WireClient:r(6),Dropbox:r(11),GoogleDrive:r(13),Access:r(15),Discover:r(14),Authorize:r(4),BaseClient:r(5),Env:r(12)},a.cache&&o.extend(this.featureModules,{Caching:r(16),IndexedDB:r(29),LocalStorage:r(30),InMemoryStorage:r(31),Sync:r(7)}),a.disableFeatures.forEach((function(t){e.featureModules[t]&&delete e.featureModules[t];})),this._allLoaded=!1,this.featureModules)this.loadFeature(t);},hasFeature:function(e){for(var t=this.features.length-1;t>=0;t--)if(this.features[t].name===e)return this.features[t].supported;return !1},loadFeature:function(e){var t=this,r=this.featureModules[e],o=!r._rs_supported||r._rs_supported();i("[RemoteStorage] [FEATURE ".concat(e,"] initializing ...")),"object"===n(o)?o.then((function(){t.featureSupported(e,!0),t.initFeature(e);}),(function(){t.featureSupported(e,!1);})):"boolean"==typeof o?(this.featureSupported(e,o),o&&this.initFeature(e)):this.featureSupported(e,!1);},initFeature:function(e){var t,r=this,o=this.featureModules[e];try{t=o._rs_init(this);}catch(t){return void this.featureFailed(e,t)}"object"===n(t)&&"function"==typeof t.then?t.then((function(){r.featureInitialized(e);}),(function(t){r.featureFailed(e,t);})):this.featureInitialized(e);},featureFailed:function(e,t){i("[RemoteStorage] [FEATURE ".concat(e,"] initialization failed (").concat(t,")")),this.featureDone();},featureSupported:function(e,t){i("[RemoteStorage] [FEATURE ".concat(e,"]  ").concat(t?"":" not"," supported")),t||this.featureDone();},featureInitialized:function(e){i("[RemoteStorage] [FEATURE ".concat(e,"] initialized.")),this.features.push({name:e,init:this.featureModules[e]._rs_init,supported:!0,cleanup:this.featureModules[e]._rs_cleanup}),this.featureDone();},featureDone:function(){this.featuresDone++,this.featuresDone===Object.keys(this.featureModules).length&&setTimeout(this.featuresLoaded.bind(this),0);},_setCachingModule:function(){var e=this;["IndexedDB","LocalStorage","InMemoryStorage"].some((function(t){if(e.features.some((function(e){return e.name===t})))return e.features.local=e.featureModules[t],!0}));},_fireReady:function(){try{this.readyFired||(this._emit("ready"),this.readyFired=!0);}catch(e){console.error("'ready' failed: ",e,e.stack),this._emit("error",e);}},featuresLoaded:function(){var e=this;i("[REMOTESTORAGE] All features loaded !"),this._setCachingModule(),this.local=a.cache&&this.features.local&&new this.features.local,this.local&&this.remote?(this._setGPD(s,this),this._bindChange(this.local)):this.remote&&this._setGPD(this.remote,this.remote),this.remote&&(this.remote.on("connected",(function(){e._fireReady(),e._emit("connected");})),this.remote.on("not-connected",(function(){e._fireReady(),e._emit("not-connected");})),this.remote.connected&&(this._fireReady(),this._emit("connected")),this.hasFeature("Authorize")||this.remote.stopWaitingForToken()),this._collectCleanupFunctions();try{this._allLoaded=!0,this._emit("features-loaded");}catch(e){o.logError(e),this._emit("error",e);}this._processPending();},_collectCleanupFunctions:function(){this._cleanups=[];for(var e=0;e<this.features.length;e++){var t=this.features[e].cleanup;"function"==typeof t&&this._cleanups.push(t);}}};e.exports=u;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(1);function i(e){return "dropbox"===this.backend&&e.match(/^\/public\/.*[^\/]$/)}var s={get:function(e,t){if(this.local){if(void 0===t)t="object"===n((r=this).remote)&&r.remote.connected&&r.remote.online?2*r.getSyncInterval():(o("Not setting default maxAge, because remote is offline or not connected"),!1);else if("number"!=typeof t&&!1!==t)return Promise.reject("Argument 'maxAge' must be 'false' or a number");return this.local.get(e,t,this.sync.queueGetRequest.bind(this.sync))}return this.remote.get(e);var r;},put:function(e,t,r){return i.bind(this)(e)?s._wrapBusyDone.call(this,this.remote.put(e,t,r)):this.local?this.local.put(e,t,r):s._wrapBusyDone.call(this,this.remote.put(e,t,r))},delete:function(e){return this.local?this.local.delete(e):s._wrapBusyDone.call(this,this.remote.delete(e))},_wrapBusyDone:function(e){var t=this;return this._emit("wire-busy"),e.then((function(e){return t._emit("wire-done",{success:!0}),Promise.resolve(e)}),(function(e){return t._emit("wire-done",{success:!1}),Promise.reject(e)}))}};e.exports=s;},function(e,t,r){function n(e){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o,i=r(1),s=r(8),a=r(2),u=r(0),c=function(e){this.db=e||o,this.db?(s(this),a(this,"change","local-events-done"),this.getsRunning=0,this.putsRunning=0,this.changesQueued={},this.changesRunning={}):i("[IndexedDB] Failed to open DB");};c.prototype={getNodes:function(e){for(var t=[],r={},n=0,o=e.length;n<o;n++)void 0!==this.changesQueued[e[n]]?r[e[n]]=u.deepClone(this.changesQueued[e[n]]||void 0):void 0!==this.changesRunning[e[n]]?r[e[n]]=u.deepClone(this.changesRunning[e[n]]||void 0):t.push(e[n]);return t.length>0?this.getNodesFromDb(t).then((function(e){for(var t in r)e[t]=r[t];return e})):Promise.resolve(r)},setNodes:function(e){for(var t in e)this.changesQueued[t]=e[t]||!1;return this.maybeFlush(),Promise.resolve()},maybeFlush:function(){0===this.putsRunning?this.flushChangesQueued():this.commitSlownessWarning||(this.commitSlownessWarning=setInterval((function(){console.warn("WARNING: waited more than 10 seconds for previous commit to finish");}),1e4));},flushChangesQueued:function(){this.commitSlownessWarning&&(clearInterval(this.commitSlownessWarning),this.commitSlownessWarning=null),Object.keys(this.changesQueued).length>0&&(this.changesRunning=this.changesQueued,this.changesQueued={},this.setNodesInDb(this.changesRunning).then(this.flushChangesQueued.bind(this)));},getNodesFromDb:function(e){var t=this;return new Promise((function(r,n){var o=t.db.transaction(["nodes"],"readonly"),i=o.objectStore("nodes"),s={};t.getsRunning++,e.map((function(e){i.get(e).onsuccess=function(t){s[e]=t.target.result;};})),o.oncomplete=function(){r(s),this.getsRunning--;}.bind(t),o.onerror=o.onabort=function(){n("get transaction error/abort"),this.getsRunning--;}.bind(t);}))},setNodesInDb:function(e){var t=this;return new Promise((function(r,o){var s=t.db.transaction(["nodes"],"readwrite"),a=s.objectStore("nodes"),u=(new Date).getTime();for(var c in t.putsRunning++,i("[IndexedDB] Starting put",e,t.putsRunning),e){var l=e[c];if("object"===n(l))try{a.put(l);}catch(e){throw i("[IndexedDB] Error while putting",l,e),e}else try{a.delete(c);}catch(e){throw i("[IndexedDB] Error while removing",a,l,e),e}}s.oncomplete=function(){this.putsRunning--,i("[IndexedDB] Finished put",e,this.putsRunning,(new Date).getTime()-u+"ms"),r();}.bind(t),s.onerror=function(){this.putsRunning--,o("transaction error");}.bind(t),s.onabort=function(){o("transaction abort"),this.putsRunning--;}.bind(t);}))},reset:function(e){var t=this,r=this.db.name;this.db.close(),c.clean(this.db.name,(function(){c.open(r,(function(r,n){r?i("[IndexedDB] Error while resetting local storage",r):t.db=n,"function"==typeof e&&e(self);}));}));},forAllNodes:function(e){var t=this;return new Promise((function(r){t.db.transaction(["nodes"],"readonly").objectStore("nodes").openCursor().onsuccess=function(n){var o=n.target.result;o?(e(t.migrate(o.value)),o.continue()):r();};}))},closeDB:function(){0===this.putsRunning?this.db.close():setTimeout(this.closeDB.bind(this),100);}},c.open=function(e,t){var r=setTimeout((function(){t("timeout trying to open db");}),1e4);try{var n=indexedDB.open(e,2);n.onerror=function(){i("[IndexedDB] Opening DB failed",n),clearTimeout(r),t(n.error);},n.onupgradeneeded=function(e){var t=n.result;i("[IndexedDB] Upgrade: from ",e.oldVersion," to ",e.newVersion),1!==e.oldVersion&&(i("[IndexedDB] Creating object store: nodes"),t.createObjectStore("nodes",{keyPath:"path"})),i("[IndexedDB] Creating object store: changes"),t.createObjectStore("changes",{keyPath:"path"});},n.onsuccess=function(){clearTimeout(r);var o=n.result;if(!o.objectStoreNames.contains("nodes")||!o.objectStoreNames.contains("changes"))return i("[IndexedDB] Missing object store. Resetting the database."),void c.clean(e,(function(){c.open(e,t);}));t(null,n.result);};}catch(n){i("[IndexedDB] Failed to open database: "+n),i("[IndexedDB] Resetting database and trying again."),clearTimeout(r),c.clean(e,(function(){c.open(e,t);}));}},c.clean=function(e,t){var r=indexedDB.deleteDatabase(e);r.onsuccess=function(){i("[IndexedDB] Done removing DB"),t();},r.onerror=r.onabort=function(t){console.error('Failed to remove database "'+e+'"',t);};},c._rs_init=function(e){return new Promise((function(t,r){c.open("remotestorage",(function(n,i){n?r(n):(o=i,i.onerror=function(){e._emit("error",n);},t());}));}))},c._rs_supported=function(){return new Promise((function(e,t){var r=u.getGlobalContext(),n=!1;if("undefined"!=typeof navigator&&navigator.userAgent.match(/Android (2|3|4\.[0-3])/)&&(navigator.userAgent.match(/Chrome|Firefox/)||(n=!0)),"indexedDB"in r&&!n)try{var o=indexedDB.open("rs-check");o.onerror=function(){t();},o.onsuccess=function(){o.result.close(),indexedDB.deleteDatabase("rs-check"),e();};}catch(e){t();}else t();}))},c._rs_cleanup=function(e){return new Promise((function(t){e.local&&e.local.closeDB(),c.clean("remotestorage",t);}))},e.exports=c;},function(e,t,r){var n=r(8),o=r(1),i=r(2),s=r(0),a="remotestorage:cache:nodes:",u=function(){n(this),o("[LocalStorage] Registering events"),i(this,"change","local-events-done");};function c(e){return e.substr(0,a.length)===a||"remotestorage:cache:changes:"===e.substr(0,"remotestorage:cache:changes:".length)}u.prototype={getNodes:function(e){for(var t={},r=0,n=e.length;r<n;r++)try{t[e[r]]=JSON.parse(localStorage[a+e[r]]);}catch(n){t[e[r]]=void 0;}return Promise.resolve(t)},setNodes:function(e){for(var t in e)localStorage[a+t]=JSON.stringify(e[t]);return Promise.resolve()},forAllNodes:function(e){for(var t,r=0,n=localStorage.length;r<n;r++)if(localStorage.key(r).substr(0,a.length)===a){try{t=this.migrate(JSON.parse(localStorage[localStorage.key(r)]));}catch(e){t=void 0;}t&&e(t);}return Promise.resolve()}},u._rs_init=function(){},u._rs_supported=function(){return s.localStorageAvailable()},u._rs_cleanup=function(){for(var e=[],t=0,r=localStorage.length;t<r;t++){var n=localStorage.key(t);c(n)&&e.push(n);}e.forEach((function(e){o("[LocalStorage] Removing",e),delete localStorage[e];}));},e.exports=u;},function(e,t,r){var n=r(2),o=r(1),i=r(8),s=function(){i(this),o("[InMemoryStorage] Registering events"),n(this,"change","local-events-done"),this._storage={};};s.prototype={getNodes:function(e){for(var t={},r=0,n=e.length;r<n;r++)t[e[r]]=this._storage[e[r]];return Promise.resolve(t)},setNodes:function(e){for(var t in e)void 0===e[t]?delete this._storage[t]:this._storage[t]=e[t];return Promise.resolve()},forAllNodes:function(e){for(var t in this._storage)e(this.migrate(this._storage[t]));return Promise.resolve()}},s._rs_init=function(){},s._rs_supported=function(){return !0},s._rs_cleanup=function(){},e.exports=s;},function(e,t,r){var n=r(5),o=r(9);o.prototype.addModule=function(e){var t=e.name,r=e.builder;if(Object.defineProperty(this,t,{configurable:!0,get:function(){var e=this._loadModule(t,r);return Object.defineProperty(this,t,{value:e}),e}}),-1!==t.indexOf("-")){var n=t.replace(/\-[a-z]/g,(function(e){return e[1].toUpperCase()}));Object.defineProperty(this,n,{get:function(){return this[t]}});}},o.prototype._loadModule=function(e,t){if(t)return t(new n(this,"/"+e+"/"),new n(this,"/public/"+e+"/")).exports;throw"Unknown module: "+e};}])}));

    });

    var RemoteStorage = unwrapExports(remotestorage);
    var remotestorage_1 = remotestorage.RemoteStorage;

    var main$5 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKLanguageSwitcherCodesMap () {
    		return {
    			en: 'English',
    			fr: 'Français',
    			es: 'Español',
    			pt: 'Português',
    		};
    	},

    	OLSKLanguageSwitcherLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKLanguageSwitcherLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKLanguageSwitcherLauncherItemSwitch (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamLanguageCode !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamRouteConstant !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCanonical !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: ['OLSKLanguageSwitcherLauncherItemSwitch', params.ParamLanguageCode].join('-'),
    			LCHRecipeName: mod.OLSKLanguageSwitcherCodesMap()[params.ParamLanguageCode],
    			LCHRecipeCallback () {
    				(debug.DebugWindow || window).location.href = params.OLSKCanonical(params.ParamRouteConstant, {
    					OLSKRoutingLanguage: params.ParamLanguageCode,
    				});
    			},
    			LCHRecipeIsExcluded () {
    				return !!params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKLanguageSwitcherRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!Array.isArray(params.ParamLanguageCodes)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamCurrentLanguage !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKLanguageSwitcherLauncherFakeItemProxy(),
    		].concat(params.ParamLanguageCodes.filter(function (e) {
    			return e !== params.ParamCurrentLanguage;
    		}).map(function (ParamLanguageCode) {
    			return mod.OLSKLanguageSwitcherLauncherItemSwitch(Object.assign(Object.assign(Object.assign({}, params), {}), {
    				ParamLanguageCode,
    			}))
    		})).filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$6 = createCommonjsModule(function (module, exports) {
    const uIsFilled = function (inputData) {
    	return typeof inputData === 'string' && inputData.trim() !== '';
    };

    const uIsDate = function (inputData) {
    	return (inputData instanceof Date) && !Number.isNaN(inputData.getTime());
    };

    const uRandomElement = function () {
    	const array = [].concat(...arguments);
    	return array[Date.now() % array.length];
    };

    const mod = {

    	OLSKPactAuthTypeEmail () {
    		return 'OLSK_PACT_AUTH_TYPE_EMAIL';
    	},

    	OLSKPactAuthTypeRemoteStorage () {
    		return 'OLSK_PACT_AUTH_TYPE_REMOTE_STORAGE';
    	},

    	OLSKPactAuthTypeFission () {
    		return 'OLSK_PACT_AUTH_TYPE_FISSION';
    	},

    	OLSKPactAuthTypes () {
    		return [
    			mod.OLSKPactAuthTypeEmail(),
    			mod.OLSKPactAuthTypeRemoteStorage(),
    			mod.OLSKPactAuthTypeFission(),
    		];
    	},

    	OLSKPactAuthIdentityIsCloudAddress (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return !!inputData.match(/\w+\@\w+\.\w+/);
    	},

    	OLSKPactAuthModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!mod.OLSKPactAuthTypes().includes(inputData.OLSKPactAuthType)) {
    			_error('OLSKPactAuthType', 'OLSKErrorNotAuthType');
    		}

    		if (!uIsFilled(inputData.OLSKPactAuthIdentity)) {
    			_error('OLSKPactAuthIdentity', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactAuthProof)) {
    			_error('OLSKPactAuthProof', 'OLSKErrorNotFilled');
    		}

    		if (inputData.OLSKPactAuthType === mod.OLSKPactAuthTypeRemoteStorage()) {
    			if (!mod.OLSKPactAuthIdentityIsCloudAddress(inputData.OLSKPactAuthIdentity)) {
    				_error('OLSKPactAuthIdentity', 'OLSKErrorNotValid');
    			}

    			const metadata = inputData.OLSKPactAuthMetadata;

    			_error('OLSKPactAuthMetadata', (function() {
    				if (typeof metadata !== 'object' || metadata === null) {
    					return 'OLSKErrorNotObject';
    				}

    				if (!uIsFilled(metadata.OLSKPactAuthMetadataModuleName)) {
    					return 'OLSKErrorNotValid';
    				}

    				if (!uIsFilled(metadata.OLSKPactAuthMetadataFolderPath)) {
    					return 'OLSKErrorNotValid';
    				}

    				if (!metadata.OLSKPactAuthMetadataFolderPath.slice(0, -1).trim()) {
    					return 'OLSKErrorNotValid';
    				}

    				if (metadata.OLSKPactAuthMetadataFolderPath.slice(-1) !== '/') {
    					return 'OLSKErrorNotValid';
    				}
    			})());
    		}

    		if (inputData.OLSKPactAuthType === mod.OLSKPactAuthTypeEmail()) {
    			if (!outputData.OLSKPactAuthIdentity && !mod.OLSKPactAuthIdentityIsCloudAddress(inputData.OLSKPactAuthIdentity)) {
    				_error('OLSKPactAuthIdentity', 'OLSKErrorNotValid');
    			}
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    	OLSKPactPayProcessorStripe () {
    		return 'OLSK_PACT_PAY_PROCESSOR_STRIPE';
    	},

    	OLSKPactPayProcessorPayPal () {
    		return 'OLSK_PACT_PAY_PROCESSOR_PAYPAL';
    	},

    	OLSKPactPayProcessors () {
    		return [
    			mod.OLSKPactPayProcessorStripe(),
    			mod.OLSKPactPayProcessorPayPal(),
    		];
    	},

    	OLSKPactPayModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!uIsFilled(inputData.OLSKPactPayIdentity)) {
    			_error('OLSKPactPayIdentity', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactPayClue)) {
    			_error('OLSKPactPayClue', 'OLSKErrorNotFilled');
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    	OLSKPactMetadataCompress (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		const result = {};

    		if (inputData.OLSKPactIntentIdentity) {
    			result.a = inputData.OLSKPactIntentIdentity;
    		}

    		if (inputData.OLSKPactIntentClue) {
    			result.b = inputData.OLSKPactIntentClue;
    		}

    		if (inputData.OLSKPactIntentProject) {
    			result.c = inputData.OLSKPactIntentProject;
    		}

    		if (inputData.OLSKPactIntentVoucher) {
    			result.d = inputData.OLSKPactIntentVoucher;
    		}

    		return JSON.stringify(result);
    	},

    	OLSKPactMetadataDecompress (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const result = {};

    		try {
    			Object.assign(result, JSON.parse(inputData));
    		} catch {
    			throw new Error('OLSKErrorInputFailedJSONParse');
    		}

    		return {
    			OLSKPactIntentIdentity: result.a,
    			OLSKPactIntentClue: result.b,
    			OLSKPactIntentProject: result.c,
    			OLSKPactIntentVoucher: result.d,
    		};
    	},

    	OLSKPactGrantFrequencyOptionYearly () {
    		return 'OLSK_PACT_GRANT_FREQUENCY_YEARLY';
    	},

    	OLSKPactGrantFrequencyOptionMonthly () {
    		return 'OLSK_PACT_GRANT_FREQUENCY_MONTHLY';
    	},

    	OLSKPactGrantFrequencyOptionOnce () {
    		return 'OLSK_PACT_GRANT_FREQUENCY_ONCE';
    	},

    	OLSKPactGrantFrequencyOptions () {
    		return [
    			mod.OLSKPactGrantFrequencyOptionYearly(),
    			mod.OLSKPactGrantFrequencyOptionMonthly(),
    			mod.OLSKPactGrantFrequencyOptionOnce(),
    		];
    	},

    	OLSKPactIntentModelIsValid (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('RCSErrorInputNotValid');
    		}

    		if (typeof inputData.OLSKPactIntentIdentity !== 'string') {
    			return false;
    		}

    		if (parseInt(inputData.OLSKPactIntentAmount) !== inputData.OLSKPactIntentAmount) {
    			return false;
    		}

    		if (!mod.OLSKPactGrantFrequencyOptions().includes(inputData.OLSKPactIntentFrequency)) {
    			return false;
    		}

    		if (typeof inputData.OLSKPactIntentClue !== 'string') {
    			return false;
    		}

    		if (typeof inputData.OLSKPactIntentProject !== 'string') {
    			return false;
    		}

    		return true;
    	},

    	OLSKPactGrantModelErrors (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const outputData = {};
    		const _error = function (param1, param2) {
    			if (!param2) {
    				return;
    			}

    			outputData[param1] = (outputData[param1] || []).concat(param2);
    		};

    		if (!Array.isArray(inputData.OLSKPactGrantPublicNumbers)) {
    			_error('OLSKPactGrantPublicNumbers', 'OLSKErrorNotArray');
    		} else if (!inputData.OLSKPactGrantPublicNumbers.length) {
    			_error('OLSKPactGrantPublicNumbers', 'OLSKErrorNotFilled');
    		}

    		if (!uIsFilled(inputData.OLSKPactGrantProject)) {
    			_error('OLSKPactGrantProject', 'OLSKErrorNotFilled');
    		}

    		if (!uIsDate(inputData.OLSKPactGrantStartDate)) {
    			_error('OLSKPactGrantStartDate', 'OLSKErrorNotDate');
    		}

    		if (!uIsDate(inputData.OLSKPactGrantEndDate)) {
    			_error('OLSKPactGrantEndDate', 'OLSKErrorNotDate');
    		}

    		if (typeof inputData.OLSKPactGrantContribution !== 'number') {
    			_error('OLSKPactGrantContribution', 'OLSKErrorNotNumber');
    		}

    		if (!mod.OLSKPactGrantFrequencyOptions().includes(inputData.OLSKPactGrantFrequencyOption)) {
    			_error('OLSKPactGrantFrequencyOption', 'OLSKErrorNotValid');
    		}

    		if (!mod.OLSKPactPayProcessors().includes(inputData.OLSKPactGrantProcessor)) {
    			_error('OLSKPactGrantProcessor', 'OLSKErrorNotValid');
    		}

    		if (!uIsFilled(inputData.OLSKPactGrantProcessorReference)) {
    			_error('OLSKPactGrantProcessorReference', 'OLSKErrorNotFilled');
    		}

    		if (typeof inputData.OLSKPactGrantActive !== 'boolean') {
    			_error('OLSKPactGrantActive', 'OLSKErrorNotBoolean');
    		}
    		
    		if (inputData.OLSKPactGrantVoucher) {
    			if (!uIsFilled(inputData.OLSKPactGrantVoucher)) {
    				_error('OLSKPactGrantVoucher', 'OLSKErrorNotFilled');
    			}
    		}

    		return Object.entries(outputData).length ? outputData : null;
    	},

    	OLSKPactPayMatchProcessor (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData.startsWith('I-')) {
    			return mod.OLSKPactPayProcessorPayPal();
    		}

    		if (inputData.startsWith('sub_')) {
    			return mod.OLSKPactPayProcessorStripe();
    		}

    		throw new Error('OLSKErrorInputNotValid');
    	},

    	// DATA

    	OLSKPactDataGrantObjectValid (inputData) {
    		return Object.assign({
    			OLSKPactGrantPublicNumbers: [Math.random().toString()],
    			OLSKPactGrantProject: Math.random().toString(),
    			OLSKPactGrantStartDate: new Date(),
    			OLSKPactGrantEndDate: new Date(),
    			OLSKPactGrantContribution: 100,
    			OLSKPactGrantFrequencyOption: uRandomElement(mod.OLSKPactGrantFrequencyOptions()),
    			OLSKPactGrantProcessor: uRandomElement(mod.OLSKPactPayProcessors()),
    			OLSKPactGrantProcessorReference: Math.random().toString(),
    			OLSKPactGrantActive: true,
    		}, inputData);
    	},

    };

    Object.assign(exports, mod);
    });

    var cryptico_1 = createCommonjsModule(function (module) {
    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.
    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // (public) Constructor

    function BigInteger(a, b, c) {
        if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a) this.fromString(a, 256);
        else this.fromString(a, b);
    }

    // return new, unset BigInteger

    function nbi() {
        return new BigInteger(null);
    }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.
    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)

    function am1(i, x, w, j, c, n) {
        while (--n >= 0) {
            var v = x * this[i++] + w[j] + c;
            c = Math.floor(v / 0x4000000);
            w[j++] = v & 0x3ffffff;
        }
        return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)

    function am2(i, x, w, j, c, n) {
        var xl = x & 0x7fff,
            xh = x >> 15;
        while (--n >= 0) {
            var l = this[i] & 0x7fff;
            var h = this[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w[j++] = l & 0x3fffffff;
        }
        return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.

    function am3(i, x, w, j, c, n) {
        var xl = x & 0x3fff,
            xh = x >> 14;
        while (--n >= 0) {
            var l = this[i] & 0x3fff;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 0xfffffff;
        }
        return c;
    }
    if ( (navigator.appName == "Microsoft Internet Explorer")) {
        BigInteger.prototype.am = am2;
        dbits = 30;
    }
    else if ( (navigator.appName != "Netscape")) {
        BigInteger.prototype.am = am1;
        dbits = 26;
    }
    else { // Mozilla/Netscape seems to prefer am3
        BigInteger.prototype.am = am3;
        dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1 << dbits) - 1);
    BigInteger.prototype.DV = (1 << dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr, vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) {
        return BI_RM.charAt(n);
    }

    function intAt(s, i) {
        var c = BI_RC[s.charCodeAt(i)];
        return (c == null) ? -1 : c;
    }

    // (protected) copy this to r

    function bnpCopyTo(r) {
        for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
        r.t = this.t;
        r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV

    function bnpFromInt(x) {
        this.t = 1;
        this.s = (x < 0) ? -1 : 0;
        if (x > 0) this[0] = x;
        else if (x < -1) this[0] = x + DV;
        else this.t = 0;
    }

    // return bigint initialized to value

    function nbv(i) {
        var r = nbi();
        r.fromInt(i);
        return r;
    }

    // (protected) set from string and radix

    function bnpFromString(s, b) {
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 256) k = 8; // byte array
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else {
            this.fromRadix(s, b);
            return;
        }
        this.t = 0;
        this.s = 0;
        var i = s.length,
            mi = false,
            sh = 0;
        while (--i >= 0) {
            var x = (k == 8) ? s[i] & 0xff : intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-") mi = true;
                continue;
            }
            mi = false;
            if (sh == 0) this[this.t++] = x;
            else if (sh + k > this.DB) {
                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
                this[this.t++] = (x >> (this.DB - sh));
            }
            else this[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB) sh -= this.DB;
        }
        if (k == 8 && (s[0] & 0x80) != 0) {
            this.s = -1;
            if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
        }
        this.clamp();
        if (mi) BigInteger.ZERO.subTo(this, this);
    }

    // (protected) clamp off excess high words

    function bnpClamp() {
        var c = this.s & this.DM;
        while (this.t > 0 && this[this.t - 1] == c)--this.t;
    }

    // (public) return string representation in given radix

    function bnToString(b) {
        if (this.s < 0) return "-" + this.negate().toString(b);
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 64) k = 6;
        else if (b == 4) k = 2;
        else return this.toRadix(b);
        var km = (1 << k) - 1,
            d, m = false,
            r = "",
            i = this.t;
        var p = this.DB - (i * this.DB) % k;
        if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
                m = true;
                r = int2char(d);
            }
            while (i >= 0) {
                if (p < k) {
                    d = (this[i] & ((1 << p) - 1)) << (k - p);
                    d |= this[--i] >> (p += this.DB - k);
                }
                else {
                    d = (this[i] >> (p -= k)) & km;
                    if (p <= 0) {
                        p += this.DB;
                        --i;
                    }
                }
                if (d > 0) m = true;
                if (m) r += int2char(d);
            }
        }
        return m ? r : "0";
    }

    // (public) -this

    function bnNegate() {
        var r = nbi();
        BigInteger.ZERO.subTo(this, r);
        return r;
    }

    // (public) |this|

    function bnAbs() {
        return (this.s < 0) ? this.negate() : this;
    }

    // (public) return + if this > a, - if this < a, 0 if equal

    function bnCompareTo(a) {
        var r = this.s - a.s;
        if (r != 0) return r;
        var i = this.t;
        r = i - a.t;
        if (r != 0) return r;
        while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
        return 0;
    }

    // returns bit length of the integer x

    function nbits(x) {
        var r = 1,
            t;
        if ((t = x >>> 16) != 0) {
            x = t;
            r += 16;
        }
        if ((t = x >> 8) != 0) {
            x = t;
            r += 8;
        }
        if ((t = x >> 4) != 0) {
            x = t;
            r += 4;
        }
        if ((t = x >> 2) != 0) {
            x = t;
            r += 2;
        }
        if ((t = x >> 1) != 0) {
            x = t;
            r += 1;
        }
        return r;
    }

    // (public) return the number of bits in "this"

    function bnBitLength() {
        if (this.t <= 0) return 0;
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
    }

    // (protected) r = this << n*DB

    function bnpDLShiftTo(n, r) {
        var i;
        for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
        for (i = n - 1; i >= 0; --i) r[i] = 0;
        r.t = this.t + n;
        r.s = this.s;
    }

    // (protected) r = this >> n*DB

    function bnpDRShiftTo(n, r) {
        for (var i = n; i < this.t; ++i) r[i - n] = this[i];
        r.t = Math.max(this.t - n, 0);
        r.s = this.s;
    }

    // (protected) r = this << n

    function bnpLShiftTo(n, r) {
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << cbs) - 1;
        var ds = Math.floor(n / this.DB),
            c = (this.s << bs) & this.DM,
            i;
        for (i = this.t - 1; i >= 0; --i) {
            r[i + ds + 1] = (this[i] >> cbs) | c;
            c = (this[i] & bm) << bs;
        }
        for (i = ds - 1; i >= 0; --i) r[i] = 0;
        r[ds] = c;
        r.t = this.t + ds + 1;
        r.s = this.s;
        r.clamp();
    }

    // (protected) r = this >> n

    function bnpRShiftTo(n, r) {
        r.s = this.s;
        var ds = Math.floor(n / this.DB);
        if (ds >= this.t) {
            r.t = 0;
            return;
        }
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << bs) - 1;
        r[0] = this[ds] >> bs;
        for (var i = ds + 1; i < this.t; ++i) {
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs;
        }
        if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
        r.t = this.t - ds;
        r.clamp();
    }

    // (protected) r = this - a

    function bnpSubTo(a, r) {
        var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
        while (i < m) {
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        if (a.t < this.t) {
            c -= a.s;
            while (i < this.t) {
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += this.s;
        }
        else {
            c += this.s;
            while (i < a.t) {
                c -= a[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c -= a.s;
        }
        r.s = (c < 0) ? -1 : 0;
        if (c < -1) r[i++] = this.DV + c;
        else if (c > 0) r[i++] = c;
        r.t = i;
        r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.

    function bnpMultiplyTo(a, r) {
        var x = this.abs(),
            y = a.abs();
        var i = x.t;
        r.t = i + y.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
        r.s = 0;
        r.clamp();
        if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)

    function bnpSquareTo(r) {
        var x = this.abs();
        var i = r.t = 2 * x.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                r[i + x.t] -= x.DV;
                r[i + x.t + 1] = 1;
            }
        }
        if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
        r.s = 0;
        r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.

    function bnpDivRemTo(m, q, r) {
        var pm = m.abs();
        if (pm.t <= 0) return;
        var pt = this.abs();
        if (pt.t < pm.t) {
            if (q != null) q.fromInt(0);
            if (r != null) this.copyTo(r);
            return;
        }
        if (r == null) r = nbi();
        var y = nbi(),
            ts = this.s,
            ms = m.s;
        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
        if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
        }
        else {
            pm.copyTo(y);
            pt.copyTo(r);
        }
        var ys = y.t;
        var y0 = y[ys - 1];
        if (y0 == 0) return;
        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);
        var d1 = this.FV / yt,
            d2 = (1 << this.F1) / yt,
            e = 1 << this.F2;
        var i = r.t,
            j = i - ys,
            t = (q == null) ? nbi() : q;
        y.dlShiftTo(j, t);
        if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r);
        }
        BigInteger.ONE.dlShiftTo(ys, t);
        t.subTo(y, y); // "negative" y so we can replace sub with am later
        while (y.t < ys) y[y.t++] = 0;
        while (--j >= 0) {
            // Estimate quotient digit
            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out
                y.dlShiftTo(j, t);
                r.subTo(t, r);
                while (r[i] < --qd) r.subTo(t, r);
            }
        }
        if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms) BigInteger.ZERO.subTo(q, q);
        }
        r.t = ys;
        r.clamp();
        if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
        if (ts < 0) BigInteger.ZERO.subTo(r, r);
    }

    // (public) this mod a

    function bnMod(a) {
        var r = nbi();
        this.abs().divRemTo(a, null, r);
        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
        return r;
    }

    // Modular reduction using "classic" algorithm

    function Classic(m) {
        this.m = m;
    }

    function cConvert(x) {
        if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
        else return x;
    }

    function cRevert(x) {
        return x;
    }

    function cReduce(x) {
        x.divRemTo(this.m, null, x);
    }

    function cMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }

    function cSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.

    function bnpInvDigit() {
        if (this.t < 1) return 0;
        var x = this[0];
        if ((x & 1) == 0) return 0;
        var y = x & 3; // y == 1/x mod 2^2
        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
        // last step - calculate inverse mod DV directly;
        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits
        // we really want the negative inverse, and -DV < y < DV
        return (y > 0) ? this.DV - y : -y;
    }

    // Montgomery reduction

    function Montgomery(m) {
        this.m = m;
        this.mp = m.invDigit();
        this.mpl = this.mp & 0x7fff;
        this.mph = this.mp >> 15;
        this.um = (1 << (m.DB - 15)) - 1;
        this.mt2 = 2 * m.t;
    }

    // xR mod m

    function montConvert(x) {
        var r = nbi();
        x.abs().dlShiftTo(this.m.t, r);
        r.divRemTo(this.m, null, r);
        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
        return r;
    }

    // x/R mod m

    function montRevert(x) {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }

    // x = x/R mod m (HAC 14.32)

    function montReduce(x) {
        while (x.t <= this.mt2) // pad x so am has enough room later
        x[x.t++] = 0;
        for (var i = 0; i < this.m.t; ++i) {
            // faster way of calculating u0 = x[i]*mp mod DV
            var j = x[i] & 0x7fff;
            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
            // use am to combine the multiply-shift-add into one call
            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            // propagate carry
            while (x[j] >= x.DV) {
                x[j] -= x.DV;
                x[++j]++;
            }
        }
        x.clamp();
        x.drShiftTo(this.m.t, x);
        if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }

    // r = "x^2/R mod m"; x != r

    function montSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }

    // r = "xy/R mod m"; x,y != r

    function montMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even

    function bnpIsEven() {
        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;
    }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)

    function bnpExp(e, z) {
        if (e > 0xffffffff || e < 1) return BigInteger.ONE;
        var r = nbi(),
            r2 = nbi(),
            g = z.convert(this),
            i = nbits(e) - 1;
        g.copyTo(r);
        while (--i >= 0) {
            z.sqrTo(r, r2);
            if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
            else {
                var t = r;
                r = r2;
                r2 = t;
            }
        }
        return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32

    function bnModPowInt(e, m) {
        var z;
        if (e < 256 || m.isEven()) z = new Classic(m);
        else z = new Montgomery(m);
        return this.exp(e, z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);


    function bnClone() {
        var r = nbi();
        this.copyTo(r);
        return r;
    }

    // (public) return value as integer

    function bnIntValue() {
        if (this.s < 0) {
            if (this.t == 1) return this[0] - this.DV;
            else if (this.t == 0) return -1;
        }
        else if (this.t == 1) return this[0];
        else if (this.t == 0) return 0;
        // assumes 16 < DB < 32
        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
    }

    // (public) return value as byte

    function bnByteValue() {
        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;
    }

    // (public) return value as short (assumes DB>=16)

    function bnShortValue() {
        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;
    }

    // (protected) return x s.t. r^x < DV

    function bnpChunkSize(r) {
        return Math.floor(Math.LN2 * this.DB / Math.log(r));
    }

    // (public) 0 if this == 0, 1 if this > 0

    function bnSigNum() {
        if (this.s < 0) return -1;
        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
        else return 1;
    }

    // (protected) convert to radix string

    function bnpToRadix(b) {
        if (b == null) b = 10;
        if (this.signum() == 0 || b < 2 || b > 36) return "0";
        var cs = this.chunkSize(b);
        var a = Math.pow(b, cs);
        var d = nbv(a),
            y = nbi(),
            z = nbi(),
            r = "";
        this.divRemTo(d, y, z);
        while (y.signum() > 0) {
            r = (a + z.intValue()).toString(b).substr(1) + r;
            y.divRemTo(d, y, z);
        }
        return z.intValue().toString(b) + r;
    }

    // (protected) convert from radix string

    function bnpFromRadix(s, b) {
        this.fromInt(0);
        if (b == null) b = 10;
        var cs = this.chunkSize(b);
        var d = Math.pow(b, cs),
            mi = false,
            j = 0,
            w = 0;
        for (var i = 0; i < s.length; ++i) {
            var x = intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
                continue;
            }
            w = b * w + x;
            if (++j >= cs) {
                this.dMultiply(d);
                this.dAddOffset(w, 0);
                j = 0;
                w = 0;
            }
        }
        if (j > 0) {
            this.dMultiply(Math.pow(b, j));
            this.dAddOffset(w, 0);
        }
        if (mi) BigInteger.ZERO.subTo(this, this);
    }

    // (protected) alternate constructor

    function bnpFromNumber(a, b, c) {
        if ("number" == typeof b) {
            // new BigInteger(int,int,RNG)
            if (a < 2) this.fromInt(1);
            else {
                this.fromNumber(a, c);
                if (!this.testBit(a - 1)) // force MSB set
                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
                if (this.isEven()) this.dAddOffset(1, 0); // force odd
                while (!this.isProbablePrime(b)) {
                    this.dAddOffset(2, 0);
                    if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
                }
            }
        }
        else {
            // new BigInteger(int,RNG)
            var x = new Array(),
                t = a & 7;
            x.length = (a >> 3) + 1;
            b.nextBytes(x);
            if (t > 0) x[0] &= ((1 << t) - 1);
            else x[0] = 0;
            this.fromString(x, 256);
        }
    }

    // (public) convert to bigendian byte array

    function bnToByteArray() {
        var i = this.t,
            r = new Array();
        r[0] = this.s;
        var p = this.DB - (i * this.DB) % 8,
            d, k = 0;
        if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | (this.s << (this.DB - p));
            while (i >= 0) {
                if (p < 8) {
                    d = (this[i] & ((1 << p) - 1)) << (8 - p);
                    d |= this[--i] >> (p += this.DB - 8);
                }
                else {
                    d = (this[i] >> (p -= 8)) & 0xff;
                    if (p <= 0) {
                        p += this.DB;
                        --i;
                    }
                }
                if ((d & 0x80) != 0) d |= -256;
                if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;
                if (k > 0 || d != this.s) r[k++] = d;
            }
        }
        return r;
    }

    function bnEquals(a) {
        return (this.compareTo(a) == 0);
    }

    function bnMin(a) {
        return (this.compareTo(a) < 0) ? this : a;
    }

    function bnMax(a) {
        return (this.compareTo(a) > 0) ? this : a;
    }

    // (protected) r = this op a (bitwise)

    function bnpBitwiseTo(a, op, r) {
        var i, f, m = Math.min(a.t, this.t);
        for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
        if (a.t < this.t) {
            f = a.s & this.DM;
            for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
            r.t = this.t;
        }
        else {
            f = this.s & this.DM;
            for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
            r.t = a.t;
        }
        r.s = op(this.s, a.s);
        r.clamp();
    }

    // (public) this & a

    function op_and(x, y) {
        return x & y;
    }

    function bnAnd(a) {
        var r = nbi();
        this.bitwiseTo(a, op_and, r);
        return r;
    }

    // (public) this | a

    function op_or(x, y) {
        return x | y;
    }

    function bnOr(a) {
        var r = nbi();
        this.bitwiseTo(a, op_or, r);
        return r;
    }

    // (public) this ^ a

    function op_xor(x, y) {
        return x ^ y;
    }

    function bnXor(a) {
        var r = nbi();
        this.bitwiseTo(a, op_xor, r);
        return r;
    }

    // (public) this & ~a

    function op_andnot(x, y) {
        return x & ~y;
    }

    function bnAndNot(a) {
        var r = nbi();
        this.bitwiseTo(a, op_andnot, r);
        return r;
    }

    // (public) ~this

    function bnNot() {
        var r = nbi();
        for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
        r.t = this.t;
        r.s = ~this.s;
        return r;
    }

    // (public) this << n

    function bnShiftLeft(n) {
        var r = nbi();
        if (n < 0) this.rShiftTo(-n, r);
        else this.lShiftTo(n, r);
        return r;
    }

    // (public) this >> n

    function bnShiftRight(n) {
        var r = nbi();
        if (n < 0) this.lShiftTo(-n, r);
        else this.rShiftTo(n, r);
        return r;
    }

    // return index of lowest 1-bit in x, x < 2^31

    function lbit(x) {
        if (x == 0) return -1;
        var r = 0;
        if ((x & 0xffff) == 0) {
            x >>= 16;
            r += 16;
        }
        if ((x & 0xff) == 0) {
            x >>= 8;
            r += 8;
        }
        if ((x & 0xf) == 0) {
            x >>= 4;
            r += 4;
        }
        if ((x & 3) == 0) {
            x >>= 2;
            r += 2;
        }
        if ((x & 1) == 0)++r;
        return r;
    }

    // (public) returns index of lowest 1-bit (or -1 if none)

    function bnGetLowestSetBit() {
        for (var i = 0; i < this.t; ++i)
        if (this[i] != 0) return i * this.DB + lbit(this[i]);
        if (this.s < 0) return this.t * this.DB;
        return -1;
    }

    // return number of 1 bits in x

    function cbit(x) {
        var r = 0;
        while (x != 0) {
            x &= x - 1;
            ++r;
        }
        return r;
    }

    // (public) return number of set bits

    function bnBitCount() {
        var r = 0,
            x = this.s & this.DM;
        for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
        return r;
    }

    // (public) true iff nth bit is set

    function bnTestBit(n) {
        var j = Math.floor(n / this.DB);
        if (j >= this.t) return (this.s != 0);
        return ((this[j] & (1 << (n % this.DB))) != 0);
    }

    // (protected) this op (1<<n)

    function bnpChangeBit(n, op) {
        var r = BigInteger.ONE.shiftLeft(n);
        this.bitwiseTo(r, op, r);
        return r;
    }

    // (public) this | (1<<n)

    function bnSetBit(n) {
        return this.changeBit(n, op_or);
    }

    // (public) this & ~(1<<n)

    function bnClearBit(n) {
        return this.changeBit(n, op_andnot);
    }

    // (public) this ^ (1<<n)

    function bnFlipBit(n) {
        return this.changeBit(n, op_xor);
    }

    // (protected) r = this + a

    function bnpAddTo(a, r) {
        var i = 0,
            c = 0,
            m = Math.min(a.t, this.t);
        while (i < m) {
            c += this[i] + a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        if (a.t < this.t) {
            c += a.s;
            while (i < this.t) {
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += this.s;
        }
        else {
            c += this.s;
            while (i < a.t) {
                c += a[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += a.s;
        }
        r.s = (c < 0) ? -1 : 0;
        if (c > 0) r[i++] = c;
        else if (c < -1) r[i++] = this.DV + c;
        r.t = i;
        r.clamp();
    }

    // (public) this + a

    function bnAdd(a) {
        var r = nbi();
        this.addTo(a, r);
        return r;
    }

    // (public) this - a

    function bnSubtract(a) {
        var r = nbi();
        this.subTo(a, r);
        return r;
    }

    // (public) this * a

    function bnMultiply(a) {
        var r = nbi();
        this.multiplyTo(a, r);
        return r;
    }

    // (public) this^2

    function bnSquare() {
        var r = nbi();
        this.squareTo(r);
        return r;
    }

    // (public) this / a

    function bnDivide(a) {
        var r = nbi();
        this.divRemTo(a, r, null);
        return r;
    }

    // (public) this % a

    function bnRemainder(a) {
        var r = nbi();
        this.divRemTo(a, null, r);
        return r;
    }

    // (public) [this/a,this%a]

    function bnDivideAndRemainder(a) {
        var q = nbi(),
            r = nbi();
        this.divRemTo(a, q, r);
        return new Array(q, r);
    }

    // (protected) this *= n, this >= 0, 1 < n < DV

    function bnpDMultiply(n) {
        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
        ++this.t;
        this.clamp();
    }

    // (protected) this += n << w words, this >= 0

    function bnpDAddOffset(n, w) {
        if (n == 0) return;
        while (this.t <= w) this[this.t++] = 0;
        this[w] += n;
        while (this[w] >= this.DV) {
            this[w] -= this.DV;
            if (++w >= this.t) this[this.t++] = 0;
            ++this[w];
        }
    }

    // A "null" reducer

    function NullExp() {}

    function nNop(x) {
        return x;
    }

    function nMulTo(x, y, r) {
        x.multiplyTo(y, r);
    }

    function nSqrTo(x, r) {
        x.squareTo(r);
    }

    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;

    // (public) this^e

    function bnPow(e) {
        return this.exp(e, new NullExp());
    }

    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.

    function bnpMultiplyLowerTo(a, n, r) {
        var i = Math.min(this.t + a.t, n);
        r.s = 0; // assumes a,this >= 0
        r.t = i;
        while (i > 0) r[--i] = 0;
        var j;
        for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
        for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);
        r.clamp();
    }

    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.

    function bnpMultiplyUpperTo(a, n, r) {
        --n;
        var i = r.t = this.t + a.t - n;
        r.s = 0; // assumes a,this >= 0
        while (--i >= 0) r[i] = 0;
        for (i = Math.max(n - this.t, 0); i < a.t; ++i)
        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
        r.clamp();
        r.drShiftTo(1, r);
    }

    // Barrett modular reduction

    function Barrett(m) {
        // setup Barrett
        this.r2 = nbi();
        this.q3 = nbi();
        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
        this.mu = this.r2.divide(m);
        this.m = m;
    }

    function barrettConvert(x) {
        if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
        else if (x.compareTo(this.m) < 0) return x;
        else {
            var r = nbi();
            x.copyTo(r);
            this.reduce(r);
            return r;
        }
    }

    function barrettRevert(x) {
        return x;
    }

    // x = x mod m (HAC 14.42)

    function barrettReduce(x) {
        x.drShiftTo(this.m.t - 1, this.r2);
        if (x.t > this.m.t + 1) {
            x.t = this.m.t + 1;
            x.clamp();
        }
        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
        while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
        x.subTo(this.r2, x);
        while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }

    // r = x^2 mod m; x != r

    function barrettSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }

    // r = x*y mod m; x,y != r

    function barrettMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }

    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;

    // (public) this^e % m (HAC 14.85)

    function bnModPow(e, m) {
        var i = e.bitLength(),
            k, r = nbv(1),
            z;
        if (i <= 0) return r;
        else if (i < 18) k = 1;
        else if (i < 48) k = 3;
        else if (i < 144) k = 4;
        else if (i < 768) k = 5;
        else k = 6;
        if (i < 8) z = new Classic(m);
        else if (m.isEven()) z = new Barrett(m);
        else z = new Montgomery(m);

        // precomputation
        var g = new Array(),
            n = 3,
            k1 = k - 1,
            km = (1 << k) - 1;
        g[1] = z.convert(this);
        if (k > 1) {
            var g2 = nbi();
            z.sqrTo(g[1], g2);
            while (n <= km) {
                g[n] = nbi();
                z.mulTo(g2, g[n - 2], g[n]);
                n += 2;
            }
        }

        var j = e.t - 1,
            w, is1 = true,
            r2 = nbi(),
            t;
        i = nbits(e[j]) - 1;
        while (j >= 0) {
            if (i >= k1) w = (e[j] >> (i - k1)) & km;
            else {
                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
                if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
            }

            n = k;
            while ((w & 1) == 0) {
                w >>= 1;
                --n;
            }
            if ((i -= n) < 0) {
                i += this.DB;
                --j;
            }
            if (is1) { // ret == 1, don't bother squaring or multiplying it
                g[w].copyTo(r);
                is1 = false;
            }
            else {
                while (n > 1) {
                    z.sqrTo(r, r2);
                    z.sqrTo(r2, r);
                    n -= 2;
                }
                if (n > 0) z.sqrTo(r, r2);
                else {
                    t = r;
                    r = r2;
                    r2 = t;
                }
                z.mulTo(r2, g[w], r);
            }

            while (j >= 0 && (e[j] & (1 << i)) == 0) {
                z.sqrTo(r, r2);
                t = r;
                r = r2;
                r2 = t;
                if (--i < 0) {
                    i = this.DB - 1;
                    --j;
                }
            }
        }
        return z.revert(r);
    }

    // (public) gcd(this,a) (HAC 14.54)

    function bnGCD(a) {
        var x = (this.s < 0) ? this.negate() : this.clone();
        var y = (a.s < 0) ? a.negate() : a.clone();
        if (x.compareTo(y) < 0) {
            var t = x;
            x = y;
            y = t;
        }
        var i = x.getLowestSetBit(),
            g = y.getLowestSetBit();
        if (g < 0) return x;
        if (i < g) g = i;
        if (g > 0) {
            x.rShiftTo(g, x);
            y.rShiftTo(g, y);
        }
        while (x.signum() > 0) {
            if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
            if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
            if (x.compareTo(y) >= 0) {
                x.subTo(y, x);
                x.rShiftTo(1, x);
            }
            else {
                y.subTo(x, y);
                y.rShiftTo(1, y);
            }
        }
        if (g > 0) y.lShiftTo(g, y);
        return y;
    }

    // (protected) this % n, n < 2^26

    function bnpModInt(n) {
        if (n <= 0) return 0;
        var d = this.DV % n,
            r = (this.s < 0) ? n - 1 : 0;
        if (this.t > 0) if (d == 0) r = this[0] % n;
        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
        return r;
    }

    // (public) 1/this % m (HAC 14.61)

    function bnModInverse(m) {
        var ac = m.isEven();
        if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
        var u = m.clone(),
            v = this.clone();
        var a = nbv(1),
            b = nbv(0),
            c = nbv(0),
            d = nbv(1);
        while (u.signum() != 0) {
            while (u.isEven()) {
                u.rShiftTo(1, u);
                if (ac) {
                    if (!a.isEven() || !b.isEven()) {
                        a.addTo(this, a);
                        b.subTo(m, b);
                    }
                    a.rShiftTo(1, a);
                }
                else if (!b.isEven()) b.subTo(m, b);
                b.rShiftTo(1, b);
            }
            while (v.isEven()) {
                v.rShiftTo(1, v);
                if (ac) {
                    if (!c.isEven() || !d.isEven()) {
                        c.addTo(this, c);
                        d.subTo(m, d);
                    }
                    c.rShiftTo(1, c);
                }
                else if (!d.isEven()) d.subTo(m, d);
                d.rShiftTo(1, d);
            }
            if (u.compareTo(v) >= 0) {
                u.subTo(v, u);
                if (ac) a.subTo(c, a);
                b.subTo(d, b);
            }
            else {
                v.subTo(u, v);
                if (ac) c.subTo(a, c);
                d.subTo(b, d);
            }
        }
        if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
        if (d.compareTo(m) >= 0) return d.subtract(m);
        if (d.signum() < 0) d.addTo(m, d);
        else return d;
        if (d.signum() < 0) return d.add(m);
        else return d;
    }

    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

    // (public) test primality with certainty >= 1-.5^t

    function bnIsProbablePrime(t) {
        var i, x = this.abs();
        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
            for (i = 0; i < lowprimes.length; ++i)
            if (x[0] == lowprimes[i]) return true;
            return false;
        }
        if (x.isEven()) return false;
        i = 1;
        while (i < lowprimes.length) {
            var m = lowprimes[i],
                j = i + 1;
            while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
            m = x.modInt(m);
            while (i < j) if (m % lowprimes[i++] == 0) return false;
        }
        return x.millerRabin(t);
    }

    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)

    function bnpMillerRabin(t) {
        var n1 = this.subtract(BigInteger.ONE);
        var k = n1.getLowestSetBit();
        if (k <= 0) return false;
        var r = n1.shiftRight(k);
        t = (t + 1) >> 1;
        if (t > lowprimes.length) t = lowprimes.length;
        var a = nbi();
        for (var i = 0; i < t; ++i) {
            //Pick bases at random, instead of starting at 2
            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
            var y = a.modPow(r, this);
            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
                var j = 1;
                while (j++ < k && y.compareTo(n1) != 0) {
                    y = y.modPowInt(2, this);
                    if (y.compareTo(BigInteger.ONE) == 0) return false;
                }
                if (y.compareTo(n1) != 0) return false;
            }
        }
        return true;
    }

    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;

    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;



















    // seedrandom.js version 2.0.
    // Author: David Bau 4/2/2011
    //
    // Defines a method Math.seedrandom() that, when called, substitutes
    // an explicitly seeded RC4-based algorithm for Math.random().  Also
    // supports automatic seeding from local or network sources of entropy.
    //
    // Usage:
    //
    //   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
    //
    //   Math.seedrandom('yipee'); Sets Math.random to a function that is
    //                             initialized using the given explicit seed.
    //
    //   Math.seedrandom();        Sets Math.random to a function that is
    //                             seeded using the current time, dom state,
    //                             and other accumulated local entropy.
    //                             The generated seed string is returned.
    //
    //   Math.seedrandom('yowza', true);
    //                             Seeds using the given explicit seed mixed
    //                             together with accumulated entropy.
    //
    //   <script src="http://bit.ly/srandom-512"></script>
    //                             Seeds using physical random bits downloaded
    //                             from random.org.
    //
    //   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
    //   </script>                 Seeds using urandom bits from call.jsonlib.com,
    //                             which is faster than random.org.
    //
    // Examples:
    //
    //   Math.seedrandom("hello");            // Use "hello" as the seed.
    //   document.write(Math.random());       // Always 0.5463663768140734
    //   document.write(Math.random());       // Always 0.43973793770592234
    //   var rng1 = Math.random;              // Remember the current prng.
    //
    //   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
    //   document.write(Math.random());       // Pretty much unpredictable.
    //
    //   Math.random = rng1;                  // Continue "hello" prng sequence.
    //   document.write(Math.random());       // Always 0.554769432473455
    //
    //   Math.seedrandom(autoseed);           // Restart at the previous seed.
    //   document.write(Math.random());       // Repeat the 'unpredictable' value.
    //
    // Notes:
    //
    // Each time seedrandom('arg') is called, entropy from the passed seed
    // is accumulated in a pool to help generate future seeds for the
    // zero-argument form of Math.seedrandom, so entropy can be injected over
    // time by calling seedrandom with explicit data repeatedly.
    //
    // On speed - This javascript implementation of Math.random() is about
    // 3-10x slower than the built-in Math.random() because it is not native
    // code, but this is typically fast enough anyway.  Seeding is more expensive,
    // especially if you use auto-seeding.  Some details (timings on Chrome 4):
    //
    // Our Math.random()            - avg less than 0.002 milliseconds per call
    // seedrandom('explicit')       - avg less than 0.5 milliseconds per call
    // seedrandom('explicit', true) - avg less than 2 milliseconds per call
    // seedrandom()                 - avg about 38 milliseconds per call
    //
    // LICENSE (BSD):
    //
    // Copyright 2010 David Bau, all rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are met:
    // 
    //   1. Redistributions of source code must retain the above copyright
    //      notice, this list of conditions and the following disclaimer.
    //
    //   2. Redistributions in binary form must reproduce the above copyright
    //      notice, this list of conditions and the following disclaimer in the
    //      documentation and/or other materials provided with the distribution.
    // 
    //   3. Neither the name of this module nor the names of its contributors may
    //      be used to endorse or promote products derived from this software
    //      without specific prior written permission.
    // 
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    //
    /**
     * All code is in an anonymous closure to keep the global namespace clean.
     *
     * @param {number=} overflow 
     * @param {number=} startdenom
     */
    (function (pool, math, width, chunks, significance, overflow, startdenom)
    {


        //
        // seedrandom()
        // This is the seedrandom function described above.
        //
        math['seedrandom'] = function seedrandom(seed, use_entropy)
        {
            var key = [];
            var arc4;

            // Flatten the seed string or build one from local entropy if needed.
            seed = mixkey(flatten(
            use_entropy ? [seed, pool] : arguments.length ? seed : [new Date().getTime(), pool, window], 3), key);

            // Use the seed to initialize an ARC4 generator.
            arc4 = new ARC4(key);

            // Mix the randomness into accumulated entropy.
            mixkey(arc4.S, pool);

            // Override Math.random
            // This function returns a random double in [0, 1) that contains
            // randomness in every bit of the mantissa of the IEEE 754 value.
            math['random'] = function random()
            { // Closure to return a random double:
                var n = arc4.g(chunks); // Start with a numerator n < 2 ^ 48
                var d = startdenom; //   and denominator d = 2 ^ 48.
                var x = 0; //   and no 'extra last byte'.
                while (n < significance)
                { // Fill up all significant digits by
                    n = (n + x) * width; //   shifting numerator and
                    d *= width; //   denominator and generating a
                    x = arc4.g(1); //   new least-significant-byte.
                }
                while (n >= overflow)
                { // To avoid rounding up, before adding
                    n /= 2; //   last byte, shift everything
                    d /= 2; //   right using integer math until
                    x >>>= 1; //   we have exactly the desired bits.
                }
                return (n + x) / d; // Form the number within [0, 1).
            };

            // Return the seed that was used
            return seed;
        };

        //
        // ARC4
        //
        // An ARC4 implementation.  The constructor takes a key in the form of
        // an array of at most (width) integers that should be 0 <= x < (width).
        //
        // The g(count) method returns a pseudorandom integer that concatenates
        // the next (count) outputs from ARC4.  Its return value is a number x
        // that is in the range 0 <= x < (width ^ count).
        //
        /** @constructor */

        function ARC4(key)
        {
            var t, u, me = this,
                keylen = key.length;
            var i = 0,
                j = me.i = me.j = me.m = 0;
            me.S = [];
            me.c = [];

            // The empty key [] is treated as [0].
            if (!keylen)
            {
                key = [keylen++];
            }

            // Set up S using the standard key scheduling algorithm.
            while (i < width)
            {
                me.S[i] = i++;
            }
            for (i = 0; i < width; i++)
            {
                t = me.S[i];
                j = lowbits(j + t + key[i % keylen]);
                u = me.S[j];
                me.S[i] = u;
                me.S[j] = t;
            }

            // The "g" method returns the next (count) outputs as one number.
            me.g = function getnext(count)
            {
                var s = me.S;
                var i = lowbits(me.i + 1);
                var t = s[i];
                var j = lowbits(me.j + t);
                var u = s[j];
                s[i] = u;
                s[j] = t;
                var r = s[lowbits(t + u)];
                while (--count)
                {
                    i = lowbits(i + 1);
                    t = s[i];
                    j = lowbits(j + t);
                    u = s[j];
                    s[i] = u;
                    s[j] = t;
                    r = r * width + s[lowbits(t + u)];
                }
                me.i = i;
                me.j = j;
                return r;
            };
            // For robust unpredictability discard an initial batch of values.
            // See http://www.rsa.com/rsalabs/node.asp?id=2009
            me.g(width);
        }

        //
        // flatten()
        // Converts an object tree to nested arrays of strings.
        //
        /** @param {Object=} result 
         * @param {string=} prop
         * @param {string=} typ */

        function flatten(obj, depth, result, prop, typ)
        {
            result = [];
            typ = typeof (obj);
            if (depth && typ == 'object')
            {
                for (prop in obj)
                {
                    if (prop.indexOf('S') < 5)
                    { // Avoid FF3 bug (local/sessionStorage)
                        try
                        {
                            result.push(flatten(obj[prop], depth - 1));
                        }
                        catch (e)
                        {}
                    }
                }
            }
            return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
        }

        //
        // mixkey()
        // Mixes a string seed into a key that is an array of integers, and
        // returns a shortened string seed that is equivalent to the result key.
        //
        /** @param {number=} smear 
         * @param {number=} j */

        function mixkey(seed, key, smear, j)
        {
            seed += ''; // Ensure the seed is a string
            smear = 0;
            for (j = 0; j < seed.length; j++)
            {
                key[lowbits(j)] = lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
            }
            seed = '';
            for (j in key)
            {
                seed += String.fromCharCode(key[j]);
            }
            return seed;
        }

        //
        // lowbits()
        // A quick "n mod width" for width a power of 2.
        //


        function lowbits(n)
        {
            return n & (width - 1);
        }

        //
        // The following constants are related to IEEE 754 limits.
        //
        startdenom = math.pow(width, chunks);
        significance = math.pow(2, significance);
        overflow = significance * 2;

        //
        // When seedrandom.js is loaded, we immediately mix a few bits
        // from the built-in RNG into the entropy pool.  Because we do
        // not want to intefere with determinstic PRNG state later,
        // seedrandom will not call math.random on its own again after
        // initialization.
        //
        mixkey(math.random(), pool);

        // End anonymous scope, and pass initial values.
    })([], // pool: entropy pool starts empty
    Math, // math: package containing random, pow, and seedrandom
    256, // width: each RC4 output is 0 <= x < 256
    6, // chunks: at least six RC4 outputs for each double
    52 // significance: there are 52 significant digits in a double
    );


    // This is not really a random number generator object, and two SeededRandom
    // objects will conflict with one another, but it's good enough for generating 
    // the rsa key.
    function SeededRandom(){}

    function SRnextBytes(ba)
    {
        var i;
        for(i = 0; i < ba.length; i++)
        {
            ba[i] = Math.floor(Math.random() * 256);
        }
    }

    SeededRandom.prototype.nextBytes = SRnextBytes;

    // prng4.js - uses Arcfour as a PRNG

    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for(i = 0; i < 256; ++i)
        this.S[i] = i;
      j = 0;
      for(i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
      return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;

    // Random number generator - requires a PRNG backend, e.g. prng4.js

    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.

    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if(rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if(navigator.appName == "Netscape" && navigator.appVersion < "5" && window.crypto) {
        // Extract entropy (256 bits) from NS4 RNG if available
        var z = window.crypto.random(32);
        for(t = 0; t < z.length; ++t)
          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
      }  
      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
      //rng_seed_int(window.screenX);
      //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
      if(rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
          rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
        //rng_pool = null;
      }
      // TODO: allow reseeding after first request
      return rng_state.next();
    }

    function rng_get_bytes(ba) {
      var i;
      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;







    /**
    *
    *  Secure Hash Algorithm (SHA256)
    *  http://www.webtoolkit.info/
    *
    *  Original code by Angel Marin, Paul Johnston.
    *
    **/
     
    function SHA256(s){
     
    	var chrsz   = 8;
     
    	function safe_add (x, y) {
    		var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    		return (msw << 16) | (lsw & 0xFFFF);
    	}
     
    	function S (X, n) { return ( X >>> n ) | (X << (32 - n)); }
    	function R (X, n) { return ( X >>> n ); }
    	function Ch(x, y, z) { return ((x & y) ^ ((~x) & z)); }
    	function Maj(x, y, z) { return ((x & y) ^ (x & z) ^ (y & z)); }
    	function Sigma0256(x) { return (S(x, 2) ^ S(x, 13) ^ S(x, 22)); }
    	function Sigma1256(x) { return (S(x, 6) ^ S(x, 11) ^ S(x, 25)); }
    	function Gamma0256(x) { return (S(x, 7) ^ S(x, 18) ^ R(x, 3)); }
    	function Gamma1256(x) { return (S(x, 17) ^ S(x, 19) ^ R(x, 10)); }
     
    	function core_sha256 (m, l) {
    		var K = new Array(0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2);
    		var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
    		var W = new Array(64);
    		var a, b, c, d, e, f, g, h, i, j;
    		var T1, T2;
     
    		m[l >> 5] |= 0x80 << (24 - l % 32);
    		m[((l + 64 >> 9) << 4) + 15] = l;
     
    		for ( var i = 0; i<m.length; i+=16 ) {
    			a = HASH[0];
    			b = HASH[1];
    			c = HASH[2];
    			d = HASH[3];
    			e = HASH[4];
    			f = HASH[5];
    			g = HASH[6];
    			h = HASH[7];
     
    			for ( var j = 0; j<64; j++) {
    				if (j < 16) W[j] = m[j + i];
    				else W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
     
    				T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
    				T2 = safe_add(Sigma0256(a), Maj(a, b, c));
     
    				h = g;
    				g = f;
    				f = e;
    				e = safe_add(d, T1);
    				d = c;
    				c = b;
    				b = a;
    				a = safe_add(T1, T2);
    			}
     
    			HASH[0] = safe_add(a, HASH[0]);
    			HASH[1] = safe_add(b, HASH[1]);
    			HASH[2] = safe_add(c, HASH[2]);
    			HASH[3] = safe_add(d, HASH[3]);
    			HASH[4] = safe_add(e, HASH[4]);
    			HASH[5] = safe_add(f, HASH[5]);
    			HASH[6] = safe_add(g, HASH[6]);
    			HASH[7] = safe_add(h, HASH[7]);
    		}
    		return HASH;
    	}
     
    	function str2binb (str) {
    		var bin = Array();
    		var mask = (1 << chrsz) - 1;
    		for(var i = 0; i < str.length * chrsz; i += chrsz) {
    			bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i%32);
    		}
    		return bin;
    	}
     
    	function Utf8Encode(string) {
    		string = string.replace(/\r\n/g,"\n");
    		var utftext = "";
     
    		for (var n = 0; n < string.length; n++) {
     
    			var c = string.charCodeAt(n);
     
    			if (c < 128) {
    				utftext += String.fromCharCode(c);
    			}
    			else if((c > 127) && (c < 2048)) {
    				utftext += String.fromCharCode((c >> 6) | 192);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
    			else {
    				utftext += String.fromCharCode((c >> 12) | 224);
    				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
     
    		}
     
    		return utftext;
    	}
     
    	function binb2hex (binarray) {
    		var hex_tab =  "0123456789abcdef";
    		var str = "";
    		for(var i = 0; i < binarray.length * 4; i++) {
    			str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
    			hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
    		}
    		return str;
    	}
     
    	s = Utf8Encode(s);
    	return binb2hex(core_sha256(str2binb(s), s.length * chrsz));
    }

    var sha256 = {};
    sha256.hex = function(s)
    {
        return SHA256(s);
    };

    /**
    *
    *  Secure Hash Algorithm (SHA1)
    *  http://www.webtoolkit.info/
    *
    **/
     
    function SHA1 (msg) {
     
    	function rotate_left(n,s) {
    		var t4 = ( n<<s ) | (n>>>(32-s));
    		return t4;
    	} 
    	function cvt_hex(val) {
    		var str="";
    		var i;
    		var v;
     
    		for( i=7; i>=0; i-- ) {
    			v = (val>>>(i*4))&0x0f;
    			str += v.toString(16);
    		}
    		return str;
    	} 
     
    	function Utf8Encode(string) {
    		string = string.replace(/\r\n/g,"\n");
    		var utftext = "";
     
    		for (var n = 0; n < string.length; n++) {
     
    			var c = string.charCodeAt(n);
     
    			if (c < 128) {
    				utftext += String.fromCharCode(c);
    			}
    			else if((c > 127) && (c < 2048)) {
    				utftext += String.fromCharCode((c >> 6) | 192);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
    			else {
    				utftext += String.fromCharCode((c >> 12) | 224);
    				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
     
    		}
     
    		return utftext;
    	} 
    	var blockstart;
    	var i, j;
    	var W = new Array(80);
    	var H0 = 0x67452301;
    	var H1 = 0xEFCDAB89;
    	var H2 = 0x98BADCFE;
    	var H3 = 0x10325476;
    	var H4 = 0xC3D2E1F0;
    	var A, B, C, D, E;
    	var temp;
     
    	msg = Utf8Encode(msg);
     
    	var msg_len = msg.length;
     
    	var word_array = new Array();
    	for( i=0; i<msg_len-3; i+=4 ) {
    		j = msg.charCodeAt(i)<<24 | msg.charCodeAt(i+1)<<16 |
    		msg.charCodeAt(i+2)<<8 | msg.charCodeAt(i+3);
    		word_array.push( j );
    	}
     
    	switch( msg_len % 4 ) {
    		case 0:
    			i = 0x080000000;
    		break;
    		case 1:
    			i = msg.charCodeAt(msg_len-1)<<24 | 0x0800000;
    		break;
     
    		case 2:
    			i = msg.charCodeAt(msg_len-2)<<24 | msg.charCodeAt(msg_len-1)<<16 | 0x08000;
    		break;
     
    		case 3:
    			i = msg.charCodeAt(msg_len-3)<<24 | msg.charCodeAt(msg_len-2)<<16 | msg.charCodeAt(msg_len-1)<<8	| 0x80;
    		break;
    	}
     
    	word_array.push( i );
     
    	while( (word_array.length % 16) != 14 ) word_array.push( 0 );
     
    	word_array.push( msg_len>>>29 );
    	word_array.push( (msg_len<<3)&0x0ffffffff );
     
     
    	for ( blockstart=0; blockstart<word_array.length; blockstart+=16 ) {
     
    		for( i=0; i<16; i++ ) W[i] = word_array[blockstart+i];
    		for( i=16; i<=79; i++ ) W[i] = rotate_left(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);
     
    		A = H0;
    		B = H1;
    		C = H2;
    		D = H3;
    		E = H4;
     
    		for( i= 0; i<=19; i++ ) {
    			temp = (rotate_left(A,5) + ((B&C) | (~B&D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
    			E = D;
    			D = C;
    			C = rotate_left(B,30);
    			B = A;
    			A = temp;
    		}
     
    		for( i=20; i<=39; i++ ) {
    			temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
    			E = D;
    			D = C;
    			C = rotate_left(B,30);
    			B = A;
    			A = temp;
    		}
     
    		for( i=40; i<=59; i++ ) {
    			temp = (rotate_left(A,5) + ((B&C) | (B&D) | (C&D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
    			E = D;
    			D = C;
    			C = rotate_left(B,30);
    			B = A;
    			A = temp;
    		}
     
    		for( i=60; i<=79; i++ ) {
    			temp = (rotate_left(A,5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
    			E = D;
    			D = C;
    			C = rotate_left(B,30);
    			B = A;
    			A = temp;
    		}
     
    		H0 = (H0 + A) & 0x0ffffffff;
    		H1 = (H1 + B) & 0x0ffffffff;
    		H2 = (H2 + C) & 0x0ffffffff;
    		H3 = (H3 + D) & 0x0ffffffff;
    		H4 = (H4 + E) & 0x0ffffffff;
     
    	}
     
    	var temp = cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4);
     
    	return temp.toLowerCase();
     
    }

    var sha1 = {};
    sha1.hex = function(s)
    {
        return SHA1(s);
    };

    /**
    *
    *  MD5 (Message-Digest Algorithm)
    *  http://www.webtoolkit.info/
    *
    **/
     
    var MD5 = function (string) {
     
    	function RotateLeft(lValue, iShiftBits) {
    		return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    	}
     
    	function AddUnsigned(lX,lY) {
    		var lX4,lY4,lX8,lY8,lResult;
    		lX8 = (lX & 0x80000000);
    		lY8 = (lY & 0x80000000);
    		lX4 = (lX & 0x40000000);
    		lY4 = (lY & 0x40000000);
    		lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
    		if (lX4 & lY4) {
    			return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
    		}
    		if (lX4 | lY4) {
    			if (lResult & 0x40000000) {
    				return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
    			} else {
    				return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
    			}
    		} else {
    			return (lResult ^ lX8 ^ lY8);
    		}
     	}
     
     	function F(x,y,z) { return (x & y) | ((~x) & z); }
     	function G(x,y,z) { return (x & z) | (y & (~z)); }
     	function H(x,y,z) { return (x ^ y ^ z); }
    	function I(x,y,z) { return (y ^ (x | (~z))); }
     
    	function FF(a,b,c,d,x,s,ac) {
    		a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
    		return AddUnsigned(RotateLeft(a, s), b);
    	} 
    	function GG(a,b,c,d,x,s,ac) {
    		a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
    		return AddUnsigned(RotateLeft(a, s), b);
    	} 
    	function HH(a,b,c,d,x,s,ac) {
    		a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
    		return AddUnsigned(RotateLeft(a, s), b);
    	} 
    	function II(a,b,c,d,x,s,ac) {
    		a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
    		return AddUnsigned(RotateLeft(a, s), b);
    	} 
    	function ConvertToWordArray(string) {
    		var lWordCount;
    		var lMessageLength = string.length;
    		var lNumberOfWords_temp1=lMessageLength + 8;
    		var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
    		var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
    		var lWordArray=Array(lNumberOfWords-1);
    		var lBytePosition = 0;
    		var lByteCount = 0;
    		while ( lByteCount < lMessageLength ) {
    			lWordCount = (lByteCount-(lByteCount % 4))/4;
    			lBytePosition = (lByteCount % 4)*8;
    			lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));
    			lByteCount++;
    		}
    		lWordCount = (lByteCount-(lByteCount % 4))/4;
    		lBytePosition = (lByteCount % 4)*8;
    		lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
    		lWordArray[lNumberOfWords-2] = lMessageLength<<3;
    		lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
    		return lWordArray;
    	} 
    	function WordToHex(lValue) {
    		var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
    		for (lCount = 0;lCount<=3;lCount++) {
    			lByte = (lValue>>>(lCount*8)) & 255;
    			WordToHexValue_temp = "0" + lByte.toString(16);
    			WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
    		}
    		return WordToHexValue;
    	} 
    	function Utf8Encode(string) {
    		string = string.replace(/\r\n/g,"\n");
    		var utftext = "";
     
    		for (var n = 0; n < string.length; n++) {
     
    			var c = string.charCodeAt(n);
     
    			if (c < 128) {
    				utftext += String.fromCharCode(c);
    			}
    			else if((c > 127) && (c < 2048)) {
    				utftext += String.fromCharCode((c >> 6) | 192);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
    			else {
    				utftext += String.fromCharCode((c >> 12) | 224);
    				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
    				utftext += String.fromCharCode((c & 63) | 128);
    			}
     
    		}
     
    		return utftext;
    	} 
    	var x=Array();
    	var k,AA,BB,CC,DD,a,b,c,d;
    	var S11=7, S12=12, S13=17, S14=22;
    	var S21=5, S22=9 , S23=14, S24=20;
    	var S31=4, S32=11, S33=16, S34=23;
    	var S41=6, S42=10, S43=15, S44=21;
     
    	string = Utf8Encode(string);
     
    	x = ConvertToWordArray(string);
     
    	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;
     
    	for (k=0;k<x.length;k+=16) {
    		AA=a; BB=b; CC=c; DD=d;
    		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
    		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
    		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
    		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
    		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
    		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
    		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
    		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
    		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
    		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
    		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
    		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
    		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
    		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
    		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
    		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
    		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
    		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
    		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
    		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
    		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
    		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
    		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
    		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
    		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
    		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
    		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
    		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
    		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
    		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
    		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
    		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
    		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
    		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
    		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
    		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
    		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
    		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
    		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
    		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
    		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
    		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
    		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
    		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
    		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
    		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
    		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
    		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
    		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
    		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
    		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
    		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
    		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
    		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
    		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
    		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
    		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
    		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
    		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
    		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
    		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
    		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
    		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
    		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
    		a=AddUnsigned(a,AA);
    		b=AddUnsigned(b,BB);
    		c=AddUnsigned(c,CC);
    		d=AddUnsigned(d,DD);
    	}
     
    	var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);
     
    	return temp.toLowerCase();
    };













    // Depends on jsbn.js and rng.js
    // Version 1.1: support utf-8 encoding in pkcs1pad2
    // convert a (hex) string to a bignum object


    function parseBigInt(str, r)
    {
        return new BigInteger(str, r);
    }

    // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint


    function pkcs1pad2(s, n)
    {
        if (n < s.length + 11)
        { // TODO: fix for utf-8
            //alert("Message too long for RSA (n=" + n + ", l=" + s.length + ")");
            //return null;
            throw "Message too long for RSA (n=" + n + ", l=" + s.length + ")";
        }
        var ba = new Array();
        var i = s.length - 1;
        while (i >= 0 && n > 0)
        {
            var c = s.charCodeAt(i--);
            if (c < 128)
            { // encode using utf-8
                ba[--n] = c;
            }
            else if ((c > 127) && (c < 2048))
            {
                ba[--n] = (c & 63) | 128;
                ba[--n] = (c >> 6) | 192;
            }
            else
            {
                ba[--n] = (c & 63) | 128;
                ba[--n] = ((c >> 6) & 63) | 128;
                ba[--n] = (c >> 12) | 224;
            }
        }
        ba[--n] = 0;
        var rng = new SecureRandom();
        var x = new Array();
        while (n > 2)
        { // random non-zero pad
            x[0] = 0;
            while (x[0] == 0) rng.nextBytes(x);
            ba[--n] = x[0];
        }
        ba[--n] = 2;
        ba[--n] = 0;
        return new BigInteger(ba);
    }

    // "empty" RSA key constructor


    function RSAKey()
    {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }
    // Set the public key fields N and e from hex strings


    function RSASetPublic(N, E)
    {
        if (N != null && E != null && N.length > 0 && E.length > 0)
        {
            this.n = parseBigInt(N, 16);
            this.e = parseInt(E, 16);
        }
        else throw new Error("Invalid RSA public key");
    }

    // Perform raw public operation on "x": return x^e (mod n)


    function RSADoPublic(x)
    {
        return x.modPowInt(this.e, this.n);
    }

    // Return the PKCS#1 RSA encryption of "text" as an even-length hex string


    function RSAEncrypt(text)
    {
        var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3);
        if (m == null) return null;
        var c = this.doPublic(m);
        if (c == null) return null;
        var h = c.toString(16);
        if ((h.length & 1) == 0) return h;
        else return "0" + h;
    }

    function RSAToJSON() {
        return {
            coeff: this.coeff.toString(16),
            d: this.d.toString(16),
            dmp1: this.dmp1.toString(16),
            dmq1: this.dmq1.toString(16),
            e: this.e.toString(16),
            n: this.n.toString(16),
            p: this.p.toString(16),
            q: this.q.toString(16),
        }
    }

    function RSAParse(rsaString) {
        var json = JSON.parse(rsaString);
        var rsa = new RSAKey();

        rsa.setPrivateEx(json.n, json.e, json.d, json.p, json.q, json.dmp1, json.dmq1, json.coeff);

        return rsa;
    }

    // Return the PKCS#1 RSA encryption of "text" as a Base64-encoded string
    //function RSAEncryptB64(text) {
    //  var h = this.encrypt(text);
    //  if(h) return hex2b64(h); else return null;
    //}
    // protected
    RSAKey.prototype.doPublic = RSADoPublic;

    // public
    RSAKey.prototype.setPublic = RSASetPublic;
    RSAKey.prototype.encrypt = RSAEncrypt;
    RSAKey.prototype.toJSON = RSAToJSON;
    RSAKey.parse = RSAParse;

    // Version 1.1: support utf-8 decoding in pkcs1unpad2
    // Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext

    function pkcs1unpad2(d, n)
    {
        var b = d.toByteArray();
        var i = 0;
        while (i < b.length && b[i] == 0)++i;
        if (b.length - i != n - 1 || b[i] != 2) return null;
        ++i;
        while (b[i] != 0)
        if (++i >= b.length) return null;
        var ret = "";
        while (++i < b.length)
        {
            var c = b[i] & 255;
            if (c < 128)
            { // utf-8 decode
                ret += String.fromCharCode(c);
            }
            else if ((c > 191) && (c < 224))
            {
                ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));
                ++i;
            }
            else
            {
                ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));
                i += 2;
            }
        }
        return ret;
    }

    // Set the private key fields N, e, and d from hex strings
    function RSASetPrivate(N, E, D)
    {
        if (N != null && E != null && N.length > 0 && E.length > 0)
        {
            this.n = parseBigInt(N, 16);
            this.e = parseInt(E, 16);
            this.d = parseBigInt(D, 16);
        }
        else throw new Error("Invalid RSA private key");
    }

    // Set the private key fields N, e, d and CRT params from hex strings
    function RSASetPrivateEx(N, E, D, P, Q, DP, DQ, C)
    {
        if (N != null && E != null && N.length > 0 && E.length > 0)
        {
            this.n = parseBigInt(N, 16);
            this.e = parseInt(E, 16);
            this.d = parseBigInt(D, 16);
            this.p = parseBigInt(P, 16);
            this.q = parseBigInt(Q, 16);
            this.dmp1 = parseBigInt(DP, 16);
            this.dmq1 = parseBigInt(DQ, 16);
            this.coeff = parseBigInt(C, 16);
        }
        else throw new Error("Invalid RSA private key");
    }

    // Generate a new random private key B bits long, using public expt E
    function RSAGenerate(B, E)
    {
        var rng = new SeededRandom();
        var qs = B >> 1;
        this.e = parseInt(E, 16);
        var ee = new BigInteger(E, 16);
        for (;;)
        {
            for (;;)
            {
                this.p = new BigInteger(B - qs, 1, rng);
                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) break;
            }
            for (;;)
            {
                this.q = new BigInteger(qs, 1, rng);
                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) break;
            }
            if (this.p.compareTo(this.q) <= 0)
            {
                var t = this.p;
                this.p = this.q;
                this.q = t;
            }
            var p1 = this.p.subtract(BigInteger.ONE);
            var q1 = this.q.subtract(BigInteger.ONE);
            var phi = p1.multiply(q1);
            if (phi.gcd(ee).compareTo(BigInteger.ONE) == 0)
            {
                this.n = this.p.multiply(this.q);
                this.d = ee.modInverse(phi);
                this.dmp1 = this.d.mod(p1);
                this.dmq1 = this.d.mod(q1);
                this.coeff = this.q.modInverse(this.p);
                break;
            }
        }
    }

    // Perform raw private operation on "x": return x^d (mod n)
    function RSADoPrivate(x)
    {
        if (this.p == null || this.q == null) return x.modPow(this.d, this.n);
        // TODO: re-calculate any missing CRT params
        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x.mod(this.q).modPow(this.dmq1, this.q);
        while (xp.compareTo(xq) < 0)
        xp = xp.add(this.p);
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
    }

    // Return the PKCS#1 RSA decryption of "ctext".
    // "ctext" is an even-length hex string and the output is a plain string.
    function RSADecrypt(ctext)
    {
        var c = parseBigInt(ctext, 16);
        var m = this.doPrivate(c);
        if (m == null) return null;
        return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);
    }

    // protected
    RSAKey.prototype.doPrivate = RSADoPrivate;

    // public
    RSAKey.prototype.setPrivate = RSASetPrivate;
    RSAKey.prototype.setPrivateEx = RSASetPrivateEx;
    RSAKey.prototype.generate = RSAGenerate;
    RSAKey.prototype.decrypt = RSADecrypt;


    //
    // rsa-sign.js - adding signing functions to RSAKey class.
    //
    //
    // version: 1.0 (2010-Jun-03)
    //
    // Copyright (c) 2010 Kenji Urushima (kenji.urushima@gmail.com)
    //
    // This software is licensed under the terms of the MIT License.
    // http://www.opensource.org/licenses/mit-license.php
    //
    // The above copyright and license notice shall be 
    // included in all copies or substantial portions of the Software.
    //
    // Depends on:
    //   function sha1.hex(s) of sha1.js
    //   jsbn.js
    //   jsbn2.js
    //   rsa.js
    //   rsa2.js
    //
    // keysize / pmstrlen
    //  512 /  128
    // 1024 /  256
    // 2048 /  512
    // 4096 / 1024
    // As for _RSASGIN_DIHEAD values for each hash algorithm, see PKCS#1 v2.1 spec (p38).
    var _RSASIGN_DIHEAD = [];
    _RSASIGN_DIHEAD['sha1'] = "3021300906052b0e03021a05000414";
    _RSASIGN_DIHEAD['sha256'] = "3031300d060960864801650304020105000420";
    //_RSASIGN_DIHEAD['md2'] = "3020300c06082a864886f70d020205000410";
    //_RSASIGN_DIHEAD['md5'] = "3020300c06082a864886f70d020505000410";
    //_RSASIGN_DIHEAD['sha384'] = "3041300d060960864801650304020205000430";
    //_RSASIGN_DIHEAD['sha512'] = "3051300d060960864801650304020305000440";
    var _RSASIGN_HASHHEXFUNC = [];
    _RSASIGN_HASHHEXFUNC['sha1'] = sha1.hex;
    _RSASIGN_HASHHEXFUNC['sha256'] = sha256.hex;

    // ========================================================================
    // Signature Generation
    // ========================================================================

    function _rsasign_getHexPaddedDigestInfoForString(s, keySize, hashAlg)
    {
        var pmStrLen = keySize / 4;
        var hashFunc = _RSASIGN_HASHHEXFUNC[hashAlg];
        var sHashHex = hashFunc(s);

        var sHead = "0001";
        var sTail = "00" + _RSASIGN_DIHEAD[hashAlg] + sHashHex;
        var sMid = "";
        var fLen = pmStrLen - sHead.length - sTail.length;
        for (var i = 0; i < fLen; i += 2)
        {
            sMid += "ff";
        }
        sPaddedMessageHex = sHead + sMid + sTail;
        return sPaddedMessageHex;
    }

    function _rsasign_signString(s, hashAlg)
    {
        var hPM = _rsasign_getHexPaddedDigestInfoForString(s, this.n.bitLength(), hashAlg);
        var biPaddedMessage = parseBigInt(hPM, 16);
        var biSign = this.doPrivate(biPaddedMessage);
        var hexSign = biSign.toString(16);
        return hexSign;
    }

    function _rsasign_signStringWithSHA1(s)
    {
        var hPM = _rsasign_getHexPaddedDigestInfoForString(s, this.n.bitLength(), 'sha1');
        var biPaddedMessage = parseBigInt(hPM, 16);
        var biSign = this.doPrivate(biPaddedMessage);
        var hexSign = biSign.toString(16);
        return hexSign;
    }

    function _rsasign_signStringWithSHA256(s)
    {
        var hPM = _rsasign_getHexPaddedDigestInfoForString(s, this.n.bitLength(), 'sha256');
        var biPaddedMessage = parseBigInt(hPM, 16);
        var biSign = this.doPrivate(biPaddedMessage);
        var hexSign = biSign.toString(16);
        return hexSign;
    }

    // ========================================================================
    // Signature Verification
    // ========================================================================

    function _rsasign_getDecryptSignatureBI(biSig, hN, hE)
    {
        var rsa = new RSAKey();
        rsa.setPublic(hN, hE);
        var biDecryptedSig = rsa.doPublic(biSig);
        return biDecryptedSig;
    }

    function _rsasign_getHexDigestInfoFromSig(biSig, hN, hE)
    {
        var biDecryptedSig = _rsasign_getDecryptSignatureBI(biSig, hN, hE);
        var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '');
        return hDigestInfo;
    }

    function _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo)
    {
        for (var algName in _RSASIGN_DIHEAD)
        {
            var head = _RSASIGN_DIHEAD[algName];
            var len = head.length;
            if (hDigestInfo.substring(0, len) == head)
            {
                var a = [algName, hDigestInfo.substring(len)];
                return a;
            }
        }
        return [];
    }

    function _rsasign_verifySignatureWithArgs(sMsg, biSig, hN, hE)
    {
        var hDigestInfo = _rsasign_getHexDigestInfoFromSig(biSig, hN, hE);
        var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);
        if (digestInfoAry.length == 0) return false;
        var algName = digestInfoAry[0];
        var diHashValue = digestInfoAry[1];
        var ff = _RSASIGN_HASHHEXFUNC[algName];
        var msgHashValue = ff(sMsg);
        return (diHashValue == msgHashValue);
    }

    function _rsasign_verifyHexSignatureForMessage(hSig, sMsg)
    {
        var biSig = parseBigInt(hSig, 16);
        var result = _rsasign_verifySignatureWithArgs(sMsg, biSig, this.n.toString(16), this.e.toString(16));
        return result;
    }

    function _rsasign_verifyString(sMsg, hSig)
    {
        hSig = hSig.replace(/[ \n]+/g, "");
        var biSig = parseBigInt(hSig, 16);
        var biDecryptedSig = this.doPublic(biSig);
        var hDigestInfo = biDecryptedSig.toString(16).replace(/^1f+00/, '');
        var digestInfoAry = _rsasign_getAlgNameAndHashFromHexDisgestInfo(hDigestInfo);

        if (digestInfoAry.length == 0) return false;
        var algName = digestInfoAry[0];
        var diHashValue = digestInfoAry[1];
        var ff = _RSASIGN_HASHHEXFUNC[algName];
        var msgHashValue = ff(sMsg);
        return (diHashValue == msgHashValue);
    }

    RSAKey.prototype.signString = _rsasign_signString;
    RSAKey.prototype.signStringWithSHA1 = _rsasign_signStringWithSHA1;
    RSAKey.prototype.signStringWithSHA256 = _rsasign_signStringWithSHA256;

    RSAKey.prototype.verifyString = _rsasign_verifyString;
    RSAKey.prototype.verifyHexSignatureForMessage = _rsasign_verifyHexSignatureForMessage;



























    /*
     *  jsaes version 0.1  -  Copyright 2006 B. Poettering
     *
     *  This program is free software; you can redistribute it and/or
     *  modify it under the terms of the GNU General Public License as
     *  published by the Free Software Foundation; either version 2 of the
     *  License, or (at your option) any later version.
     *
     *  This program is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     *  General Public License for more details.
     *
     *  You should have received a copy of the GNU General Public License
     *  along with this program; if not, write to the Free Software
     *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
     *  02111-1307 USA
     */
     
     // later modifications by wwwtyro@github
     
    var aes = (function () {

        var my = {};

        my.Sbox = new Array(99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22);

        my.ShiftRowTab = new Array(0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11);

        my.Init = function () {
            my.Sbox_Inv = new Array(256);
            for (var i = 0; i < 256; i++)
            my.Sbox_Inv[my.Sbox[i]] = i;

            my.ShiftRowTab_Inv = new Array(16);
            for (var i = 0; i < 16; i++)
            my.ShiftRowTab_Inv[my.ShiftRowTab[i]] = i;

            my.xtime = new Array(256);
            for (var i = 0; i < 128; i++) {
                my.xtime[i] = i << 1;
                my.xtime[128 + i] = (i << 1) ^ 0x1b;
            }
        };

        my.Done = function () {
            delete my.Sbox_Inv;
            delete my.ShiftRowTab_Inv;
            delete my.xtime;
        };

        my.ExpandKey = function (key) {
            var kl = key.length,
                ks, Rcon = 1;
            switch (kl) {
            case 16:
                ks = 16 * (10 + 1);
                break;
            case 24:
                ks = 16 * (12 + 1);
                break;
            case 32:
                ks = 16 * (14 + 1);
                break;
            default:
                throw new Error("my.ExpandKey: Only key lengths of 16, 24 or 32 bytes allowed!");
            }
            for (var i = kl; i < ks; i += 4) {
                var temp = key.slice(i - 4, i);
                if (i % kl == 0) {
                    temp = new Array(my.Sbox[temp[1]] ^ Rcon, my.Sbox[temp[2]], my.Sbox[temp[3]], my.Sbox[temp[0]]);
                    if ((Rcon <<= 1) >= 256) Rcon ^= 0x11b;
                }
                else if ((kl > 24) && (i % kl == 16)) temp = new Array(my.Sbox[temp[0]], my.Sbox[temp[1]], my.Sbox[temp[2]], my.Sbox[temp[3]]);
                for (var j = 0; j < 4; j++)
                key[i + j] = key[i + j - kl] ^ temp[j];
            }
        };

        my.Encrypt = function (block, key) {
            var l = key.length;
            my.AddRoundKey(block, key.slice(0, 16));
            for (var i = 16; i < l - 16; i += 16) {
                my.SubBytes(block, my.Sbox);
                my.ShiftRows(block, my.ShiftRowTab);
                my.MixColumns(block);
                my.AddRoundKey(block, key.slice(i, i + 16));
            }
            my.SubBytes(block, my.Sbox);
            my.ShiftRows(block, my.ShiftRowTab);
            my.AddRoundKey(block, key.slice(i, l));
        };

        my.Decrypt = function (block, key) {
            var l = key.length;
            my.AddRoundKey(block, key.slice(l - 16, l));
            my.ShiftRows(block, my.ShiftRowTab_Inv);
            my.SubBytes(block, my.Sbox_Inv);
            for (var i = l - 32; i >= 16; i -= 16) {
                my.AddRoundKey(block, key.slice(i, i + 16));
                my.MixColumns_Inv(block);
                my.ShiftRows(block, my.ShiftRowTab_Inv);
                my.SubBytes(block, my.Sbox_Inv);
            }
            my.AddRoundKey(block, key.slice(0, 16));
        };

        my.SubBytes = function (state, sbox) {
            for (var i = 0; i < 16; i++)
            state[i] = sbox[state[i]];
        };

        my.AddRoundKey = function (state, rkey) {
            for (var i = 0; i < 16; i++)
            state[i] ^= rkey[i];
        };

        my.ShiftRows = function (state, shifttab) {
            var h = new Array().concat(state);
            for (var i = 0; i < 16; i++)
            state[i] = h[shifttab[i]];
        };

        my.MixColumns = function (state) {
            for (var i = 0; i < 16; i += 4) {
                var s0 = state[i + 0],
                    s1 = state[i + 1];
                var s2 = state[i + 2],
                    s3 = state[i + 3];
                var h = s0 ^ s1 ^ s2 ^ s3;
                state[i + 0] ^= h ^ my.xtime[s0 ^ s1];
                state[i + 1] ^= h ^ my.xtime[s1 ^ s2];
                state[i + 2] ^= h ^ my.xtime[s2 ^ s3];
                state[i + 3] ^= h ^ my.xtime[s3 ^ s0];
            }
        };

        my.MixColumns_Inv = function (state) {
            for (var i = 0; i < 16; i += 4) {
                var s0 = state[i + 0],
                    s1 = state[i + 1];
                var s2 = state[i + 2],
                    s3 = state[i + 3];
                var h = s0 ^ s1 ^ s2 ^ s3;
                var xh = my.xtime[h];
                var h1 = my.xtime[my.xtime[xh ^ s0 ^ s2]] ^ h;
                var h2 = my.xtime[my.xtime[xh ^ s1 ^ s3]] ^ h;
                state[i + 0] ^= h1 ^ my.xtime[s0 ^ s1];
                state[i + 1] ^= h2 ^ my.xtime[s1 ^ s2];
                state[i + 2] ^= h1 ^ my.xtime[s2 ^ s3];
                state[i + 3] ^= h2 ^ my.xtime[s3 ^ s0];
            }
        };

        return my;

    }());

    var cryptico = (function() {

        var my = {};

        aes.Init();

        var base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

        my.b256to64 = function(t) {
            var a, c, n;
            var r = '', s = 0;
            var tl = t.length;
            for (n = 0; n < tl; n++)
            {
                c = t.charCodeAt(n);
                if (s == 0)
                {
                    r += base64Chars.charAt((c >> 2) & 63);
                    a = (c & 3) << 4;
                }
                else if (s == 1)
                {
                    r += base64Chars.charAt((a | (c >> 4) & 15));
                    a = (c & 15) << 2;
                }
                else if (s == 2)
                {
                    r += base64Chars.charAt(a | ((c >> 6) & 3));
                    r += base64Chars.charAt(c & 63);
                }
                s += 1;
                if (s == 3) s = 0;
            }
            if (s > 0)
            {
                r += base64Chars.charAt(a);
                r += '=';
            }
            if (s == 1)
            {
                r += '=';
            }
            return r;
        };

        my.b64to256 = function(t) 
        {
            var c, n;
            var r = '', s = 0, a = 0;
            var tl = t.length;
            for (n = 0; n < tl; n++)
            {
                c = base64Chars.indexOf(t.charAt(n));
                if (c >= 0)
                {
                    if (s) r += String.fromCharCode(a | (c >> (6 - s)) & 255);
                    s = (s + 2) & 7;
                    a = (c << s) & 255;
                }
            }
            return r;
        };    

        my.b16to64 = function(h) {
            var i;
            var c;
            var ret = "";
            if(h.length % 2 == 1)
            {
                h = "0" + h;
            }
            for (i = 0; i + 3 <= h.length; i += 3)
            {
                c = parseInt(h.substring(i, i + 3), 16);
                ret += base64Chars.charAt(c >> 6) + base64Chars.charAt(c & 63);
            }
            if (i + 1 == h.length)
            {
                c = parseInt(h.substring(i, i + 1), 16);
                ret += base64Chars.charAt(c << 2);
            }
            else if (i + 2 == h.length)
            {
                c = parseInt(h.substring(i, i + 2), 16);
                ret += base64Chars.charAt(c >> 2) + base64Chars.charAt((c & 3) << 4);
            }
            while ((ret.length & 3) > 0) ret += "=";
            return ret;
        };

        my.b64to16 = function(s) {
            var ret = "";
            var i;
            var k = 0;
            var v = 0;
            var slop;
            for (i = 0; i < s.length; ++i)
            {
                if (s.charAt(i) == "=") break;
                v = base64Chars.indexOf(s.charAt(i));
                if (v < 0) continue;
                if (k == 0)
                {
                    ret += int2char(v >> 2);
                    slop = v & 3;
                    k = 1;
                }
                else if (k == 1)
                {
                    ret += int2char((slop << 2) | (v >> 4));
                    slop = v & 0xf;
                    k = 2;
                }
                else if (k == 2)
                {
                    ret += int2char(slop);
                    ret += int2char(v >> 2);
                    slop = v & 3;
                    k = 3;
                }
                else
                {
                    ret += int2char((slop << 2) | (v >> 4));
                    ret += int2char(v & 0xf);
                    k = 0;
                }
            }
            if (k == 1) ret += int2char(slop << 2);
            return ret;
        };
        
        // Converts a string to a byte array.
        my.string2bytes = function(string)
        {
            var bytes = new Array();
            for(var i = 0; i < string.length; i++) 
            {
                bytes.push(string.charCodeAt(i));
            }
            return bytes;
        };

        // Converts a byte array to a string.
        my.bytes2string = function(bytes)
        {
            var string = "";
            for(var i = 0; i < bytes.length; i++)
            {
                string += String.fromCharCode(bytes[i]);
            }   
            return string;
        };
        
        // Returns a XOR b, where a and b are 16-byte byte arrays.
        my.blockXOR = function(a, b)
        {
            var xor = new Array(16);
            for(var i = 0; i < 16; i++)
            {
                xor[i] = a[i] ^ b[i];
            }
            return xor;
        };
        
        // Returns a 16-byte initialization vector.
        my.blockIV = function()
        {
            var r = new SecureRandom();
            var IV = new Array(16);
            r.nextBytes(IV);
            return IV;
        };
        
        // Returns a copy of bytes with zeros appended to the end
        // so that the (length of bytes) % 16 == 0.
        my.pad16 = function(bytes)
        {
            var newBytes = bytes.slice(0);
            var padding = (16 - (bytes.length % 16)) % 16;
            for(i = bytes.length; i < bytes.length + padding; i++)
            {
                newBytes.push(0);
            }
            return newBytes;
        };
        
        // Removes trailing zeros from a byte array.
        my.depad = function(bytes)
        {
            var newBytes = bytes.slice(0);
            while(newBytes[newBytes.length - 1] == 0)
            {
                newBytes = newBytes.slice(0, newBytes.length - 1);
            }
            return newBytes;
        };
        
        // AES CBC Encryption.
        my.encryptAESCBC = function(plaintext, key)
        {
            var exkey = key.slice(0);
            aes.ExpandKey(exkey);
            var blocks = my.string2bytes(plaintext);
            blocks = my.pad16(blocks);
            var encryptedBlocks = my.blockIV();
            for(var i = 0; i < blocks.length/16; i++)
            {
                var tempBlock = blocks.slice(i * 16, i * 16 + 16);
                var prevBlock = encryptedBlocks.slice((i) * 16, (i) * 16 + 16);
                tempBlock = my.blockXOR(prevBlock, tempBlock);
                aes.Encrypt(tempBlock, exkey);
                encryptedBlocks = encryptedBlocks.concat(tempBlock);
            }
            var ciphertext = my.bytes2string(encryptedBlocks);
            return my.b256to64(ciphertext)
        };

        // AES CBC Decryption.
        my.decryptAESCBC = function(encryptedText, key)
        {
            var exkey = key.slice(0);
            aes.ExpandKey(exkey);
            var encryptedText = my.b64to256(encryptedText);
            var encryptedBlocks = my.string2bytes(encryptedText);
            var decryptedBlocks = new Array();
            for(var i = 1; i < encryptedBlocks.length/16; i++)
            {
                var tempBlock = encryptedBlocks.slice(i * 16, i * 16 + 16);
                var prevBlock = encryptedBlocks.slice((i-1) * 16, (i-1) * 16 + 16);
                aes.Decrypt(tempBlock, exkey);
                tempBlock = my.blockXOR(prevBlock, tempBlock);
                decryptedBlocks = decryptedBlocks.concat(tempBlock);
            }
            decryptedBlocks = my.depad(decryptedBlocks);
            return my.bytes2string(decryptedBlocks);
        };
        
        // Wraps a string to 60 characters.
        my.wrap60 = function(string) 
        {
            var outstr = "";
            for(var i = 0; i < string.length; i++) {
                if(i % 60 == 0 && i != 0) outstr += "\n";
                outstr += string[i]; }
            return outstr; 
        };

        // Generate a random key for the AES-encrypted message.
        my.generateAESKey = function()
        {
            var key = new Array(32);
            var r = new SecureRandom();
            r.nextBytes(key);
            return key;
        };

        // Generates an RSA key from a passphrase.
        my.generateRSAKey = function(passphrase, bitlength)
        {
            Math.seedrandom(sha256.hex(passphrase));
            var rsa = new RSAKey();
            rsa.generate(bitlength, "03");
            return rsa;
        };

        // Returns the ascii-armored version of the public key.
        my.publicKeyString = function(rsakey) 
        {
            return my.b16to64(rsakey.n.toString(16));
        };
        
        // Returns an MD5 sum of a publicKeyString for easier identification.
        my.publicKeyID = function(publicKeyString)
        {
            return MD5(publicKeyString);
        };
        
        my.publicKeyFromString = function(string)
        {
            var N = my.b64to16(string.split("|")[0]);
            var E = "03";
            var rsa = new RSAKey();
            rsa.setPublic(N, E);
            return rsa
        };
        
        my.encrypt = function(plaintext, publickeystring, signingkey)
        {
            var cipherblock = "";
            var aeskey = my.generateAESKey();
            try
            {
                var publickey = my.publicKeyFromString(publickeystring);
                cipherblock += my.b16to64(publickey.encrypt(my.bytes2string(aeskey))) + "?";
            }
            catch(err)
            {
                return {status: "Invalid public key"};
            }
            if(signingkey)
            {
                signString = cryptico.b16to64(signingkey.signString(plaintext, "sha256"));
                plaintext += "::52cee64bb3a38f6403386519a39ac91c::";
                plaintext += cryptico.publicKeyString(signingkey);
                plaintext += "::52cee64bb3a38f6403386519a39ac91c::";
                plaintext += signString;
            }
            cipherblock += my.encryptAESCBC(plaintext, aeskey);    
            return {status: "success", cipher: cipherblock};
        };

        my.decrypt = function(ciphertext, key)
        {
            var cipherblock = ciphertext.split("?");
            var aeskey = key.decrypt(my.b64to16(cipherblock[0]));
            if(aeskey == null)
            {
                return {status: "failure"};
            }
            aeskey = my.string2bytes(aeskey);
            var plaintext = my.decryptAESCBC(cipherblock[1], aeskey).split("::52cee64bb3a38f6403386519a39ac91c::");
            if(plaintext.length == 3)
            {
                var publickey = my.publicKeyFromString(plaintext[1]);
                var signature = my.b64to16(plaintext[2]);
                if(publickey.verifyString(plaintext[0], signature))
                {
                    return {status: "success", 
                            plaintext: plaintext[0], 
                            signature: "verified", 
                            publicKeyString: my.publicKeyString(publickey)};
                }
                else
                {
                    return {status: "success", 
                            plaintext: plaintext[0], 
                            signature: "forged", 
                            publicKeyString: my.publicKeyString(publickey)};
                }
            }
            else
            {
                return {status: "success", plaintext: plaintext[0], signature: "unsigned"};
            }
        };

        return my;

    }());

    {
        module.exports = cryptico;
        module.exports.RSAKey = RSAKey;
    }
    });
    var cryptico_2 = cryptico_1.RSAKey;

    var aesJs = createCommonjsModule(function (module, exports) {
    /*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
    (function(root) {

        function checkInt(value) {
            return (parseInt(value) === value);
        }

        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }

            return true;
        }

        function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && arg.name === 'Uint8Array') {

                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }

                return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }

                return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
        }

        function createArray(length) {
            return new Uint8Array(length);
        }

        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }



        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                    // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return coerceArray(result);
            }

            function fromBytes(bytes) {
                var result = [], i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }

                return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();

        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();


        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14};

        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }

        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });

            this._prepare();
        };


        AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;

                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];

                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));

                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }

                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        };

        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };

        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };


        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
        };

        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);

                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }

                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);

                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }

                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
        };

        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);

                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
        };

        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);

            } else {
                this.setBytes(initialValue);
            }
        };

        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }

            // We cannot safely handle numbers beyond the safe range for integers
            if (value > Number.MAX_SAFE_INTEGER) {
                throw new Error('integer value out of safe range');
            }

            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = parseInt(value / 256);
            }
        };

        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
        };

        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };


        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
                counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


        ///////////////////////
        // Padding

        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }

        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }

        ///////////////////////
        // Exporting


        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },

            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },

            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },

            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };


        // node.js
        {
            module.exports = aesjs;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }


    })();
    });

    var hashes = createCommonjsModule(function (module, exports) {
    /**
     * jshashes - https://github.com/h2non/jshashes
     * Released under the "New BSD" license
     *
     * Algorithms specification:
     *
     * MD5 - http://www.ietf.org/rfc/rfc1321.txt
     * RIPEMD-160 - http://homes.esat.kuleuven.be/~bosselae/ripemd160.html
     * SHA1   - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * SHA256 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * SHA512 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     * HMAC - http://www.ietf.org/rfc/rfc2104.txt
     */
    (function() {
      var Hashes;

      function utf8Encode(str) {
        var x, y, output = '',
          i = -1,
          l;

        if (str && str.length) {
          l = str.length;
          while ((i += 1) < l) {
            /* Decode utf-16 surrogate pairs */
            x = str.charCodeAt(i);
            y = i + 1 < l ? str.charCodeAt(i + 1) : 0;
            if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
              x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
              i += 1;
            }
            /* Encode output as utf-8 */
            if (x <= 0x7F) {
              output += String.fromCharCode(x);
            } else if (x <= 0x7FF) {
              output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),
                0x80 | (x & 0x3F));
            } else if (x <= 0xFFFF) {
              output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                0x80 | ((x >>> 6) & 0x3F),
                0x80 | (x & 0x3F));
            } else if (x <= 0x1FFFFF) {
              output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                0x80 | ((x >>> 12) & 0x3F),
                0x80 | ((x >>> 6) & 0x3F),
                0x80 | (x & 0x3F));
            }
          }
        }
        return output;
      }

      function utf8Decode(str) {
        var i, ac, c1, c2, c3, arr = [],
          l;
        i = ac = c1 = c2 = c3 = 0;

        if (str && str.length) {
          l = str.length;
          str += '';

          while (i < l) {
            c1 = str.charCodeAt(i);
            ac += 1;
            if (c1 < 128) {
              arr[ac] = String.fromCharCode(c1);
              i += 1;
            } else if (c1 > 191 && c1 < 224) {
              c2 = str.charCodeAt(i + 1);
              arr[ac] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
              i += 2;
            } else {
              c2 = str.charCodeAt(i + 1);
              c3 = str.charCodeAt(i + 2);
              arr[ac] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
              i += 3;
            }
          }
        }
        return arr.join('');
      }

      /**
       * Add integers, wrapping at 2^32. This uses 16-bit operations internally
       * to work around bugs in some JS interpreters.
       */

      function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
          msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
      }

      /**
       * Bitwise rotate a 32-bit number to the left.
       */

      function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
      }

      /**
       * Convert a raw string to a hex string
       */

      function rstr2hex(input, hexcase) {
        var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef',
          output = '',
          x, i = 0,
          l = input.length;
        for (; i < l; i += 1) {
          x = input.charCodeAt(i);
          output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
        }
        return output;
      }

      /**
       * Convert an array of big-endian words to a string
       */

      function binb2rstr(input) {
        var i, l = input.length * 32,
          output = '';
        for (i = 0; i < l; i += 8) {
          output += String.fromCharCode((input[i >> 5] >>> (24 - i % 32)) & 0xFF);
        }
        return output;
      }

      /**
       * Convert an array of little-endian words to a string
       */

      function binl2rstr(input) {
        var i, l = input.length * 32,
          output = '';
        for (i = 0; i < l; i += 8) {
          output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
      }

      /**
       * Convert a raw string to an array of little-endian words
       * Characters >255 have their high-byte silently ignored.
       */

      function rstr2binl(input) {
        var i, l = input.length * 8,
          output = Array(input.length >> 2),
          lo = output.length;
        for (i = 0; i < lo; i += 1) {
          output[i] = 0;
        }
        for (i = 0; i < l; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
      }

      /**
       * Convert a raw string to an array of big-endian words
       * Characters >255 have their high-byte silently ignored.
       */

      function rstr2binb(input) {
        var i, l = input.length * 8,
          output = Array(input.length >> 2),
          lo = output.length;
        for (i = 0; i < lo; i += 1) {
          output[i] = 0;
        }
        for (i = 0; i < l; i += 8) {
          output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
        }
        return output;
      }

      /**
       * Convert a raw string to an arbitrary string encoding
       */

      function rstr2any(input, encoding) {
        var divisor = encoding.length,
          remainders = Array(),
          i, q, x, ld, quotient, dividend, output, full_length;

        /* Convert to an array of 16-bit big-endian values, forming the dividend */
        dividend = Array(Math.ceil(input.length / 2));
        ld = dividend.length;
        for (i = 0; i < ld; i += 1) {
          dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
        }

        /**
         * Repeatedly perform a long division. The binary array forms the dividend,
         * the length of the encoding is the divisor. Once computed, the quotient
         * forms the dividend for the next step. We stop when the dividend is zerHashes.
         * All remainders are stored for later use.
         */
        while (dividend.length > 0) {
          quotient = Array();
          x = 0;
          for (i = 0; i < dividend.length; i += 1) {
            x = (x << 16) + dividend[i];
            q = Math.floor(x / divisor);
            x -= q * divisor;
            if (quotient.length > 0 || q > 0) {
              quotient[quotient.length] = q;
            }
          }
          remainders[remainders.length] = x;
          dividend = quotient;
        }

        /* Convert the remainders to the output string */
        output = '';
        for (i = remainders.length - 1; i >= 0; i--) {
          output += encoding.charAt(remainders[i]);
        }

        /* Append leading zero equivalents */
        full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
        for (i = output.length; i < full_length; i += 1) {
          output = encoding[0] + output;
        }
        return output;
      }

      /**
       * Convert a raw string to a base-64 string
       */

      function rstr2b64(input, b64pad) {
        var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
          output = '',
          len = input.length,
          i, j, triplet;
        b64pad = b64pad || '=';
        for (i = 0; i < len; i += 3) {
          triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
          for (j = 0; j < 4; j += 1) {
            if (i * 8 + j * 6 > input.length * 8) {
              output += b64pad;
            } else {
              output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
            }
          }
        }
        return output;
      }

      Hashes = {
        /**
         * @property {String} version
         * @readonly
         */
        VERSION: '1.0.6',
        /**
         * @member Hashes
         * @class Base64
         * @constructor
         */
        Base64: function() {
          // private properties
          var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            pad = '=', // default pad according with the RFC standard
            utf8 = true; // by default enable UTF-8 support encoding

          // public method for encoding
          this.encode = function(input) {
            var i, j, triplet,
              output = '',
              len = input.length;

            pad = pad || '=';
            input = (utf8) ? utf8Encode(input) : input;

            for (i = 0; i < len; i += 3) {
              triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
              for (j = 0; j < 4; j += 1) {
                if (i * 8 + j * 6 > len * 8) {
                  output += pad;
                } else {
                  output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
                }
              }
            }
            return output;
          };

          // public method for decoding
          this.decode = function(input) {
            // var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var i, o1, o2, o3, h1, h2, h3, h4, bits, ac,
              dec = '',
              arr = [];
            if (!input) {
              return input;
            }

            i = ac = 0;
            input = input.replace(new RegExp('\\' + pad, 'gi'), ''); // use '='
            //input += '';

            do { // unpack four hexets into three octets using index points in b64
              h1 = tab.indexOf(input.charAt(i += 1));
              h2 = tab.indexOf(input.charAt(i += 1));
              h3 = tab.indexOf(input.charAt(i += 1));
              h4 = tab.indexOf(input.charAt(i += 1));

              bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

              o1 = bits >> 16 & 0xff;
              o2 = bits >> 8 & 0xff;
              o3 = bits & 0xff;
              ac += 1;

              if (h3 === 64) {
                arr[ac] = String.fromCharCode(o1);
              } else if (h4 === 64) {
                arr[ac] = String.fromCharCode(o1, o2);
              } else {
                arr[ac] = String.fromCharCode(o1, o2, o3);
              }
            } while (i < input.length);

            dec = arr.join('');
            dec = (utf8) ? utf8Decode(dec) : dec;

            return dec;
          };

          // set custom pad string
          this.setPad = function(str) {
            pad = str || pad;
            return this;
          };
          // set custom tab string characters
          this.setTab = function(str) {
            tab = str || tab;
            return this;
          };
          this.setUTF8 = function(bool) {
            if (typeof bool === 'boolean') {
              utf8 = bool;
            }
            return this;
          };
        },

        /**
         * CRC-32 calculation
         * @member Hashes
         * @method CRC32
         * @static
         * @param {String} str Input String
         * @return {String}
         */
        CRC32: function(str) {
          var crc = 0,
            x = 0,
            y = 0,
            table, i, iTop;
          str = utf8Encode(str);

          table = [
            '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 ',
            '79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 ',
            '84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F ',
            '63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD ',
            'A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC ',
            '51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 ',
            'B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 ',
            '06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 ',
            'E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 ',
            '12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 ',
            'D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 ',
            '33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 ',
            'CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 ',
            '9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E ',
            '7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D ',
            '806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 ',
            '60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA ',
            'AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 ',
            '5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 ',
            'B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 ',
            '05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 ',
            'F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA ',
            '11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 ',
            'D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F ',
            '30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E ',
            'C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D'
          ].join('');

          crc = crc ^ (-1);
          for (i = 0, iTop = str.length; i < iTop; i += 1) {
            y = (crc ^ str.charCodeAt(i)) & 0xFF;
            x = '0x' + table.substr(y * 9, 8);
            crc = (crc >>> 8) ^ x;
          }
          // always return a positive number (that's what >>> 0 does)
          return (crc ^ (-1)) >>> 0;
        },
        /**
         * @member Hashes
         * @class MD5
         * @constructor
         * @param {Object} [config]
         *
         * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
         * Digest Algorithm, as defined in RFC 1321.
         * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See <http://pajhome.org.uk/crypt/md5> for more infHashes.
         */
        MD5: function(options) {
          /**
           * Private config properties. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

          // privileged (public) methods
          this.hex = function(s) {
            return rstr2hex(rstr(s), hexcase);
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d), hexcase);
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * Enable/disable uppercase hexadecimal returned string
           * @param {Boolean}
           * @return {Object} this
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {String} Pad
           * @return {Object} this
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {Boolean}
           * @return {Object} [this]
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the MD5 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binl2rstr(binl(rstr2binl(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-MD5, of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            var bkey, ipad, opad, hash, i;

            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            bkey = rstr2binl(key);
            if (bkey.length > 16) {
              bkey = binl(bkey, key.length * 8);
            }

            ipad = Array(16), opad = Array(16);
            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
            return binl2rstr(binl(opad.concat(hash), 512 + 128));
          }

          /**
           * Calculate the MD5 of an array of little-endian words, and a bit length.
           */

          function binl(x, len) {
            var i, olda, oldb, oldc, oldd,
              a = 1732584193,
              b = -271733879,
              c = -1732584194,
              d = 271733878;

            /* append padding */
            x[len >> 5] |= 0x80 << ((len) % 32);
            x[(((len + 64) >>> 9) << 4) + 14] = len;

            for (i = 0; i < x.length; i += 16) {
              olda = a;
              oldb = b;
              oldc = c;
              oldd = d;

              a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
              d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
              c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
              b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
              a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
              d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
              c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
              b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
              a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
              d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
              c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
              b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
              a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
              d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
              c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
              b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

              a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
              d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
              c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
              b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
              a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
              d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
              c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
              b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
              a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
              d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
              c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
              b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
              a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
              d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
              c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
              b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

              a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
              d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
              c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
              b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
              a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
              d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
              c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
              b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
              a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
              d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
              c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
              b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
              a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
              d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
              c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
              b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

              a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
              d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
              c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
              b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
              a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
              d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
              c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
              b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
              a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
              d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
              c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
              b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
              a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
              d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
              c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
              b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

              a = safe_add(a, olda);
              b = safe_add(b, oldb);
              c = safe_add(c, oldc);
              d = safe_add(d, oldd);
            }
            return Array(a, b, c, d);
          }

          /**
           * These functions implement the four basic operations the algorithm uses.
           */

          function md5_cmn(q, a, b, x, s, t) {
            return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
          }

          function md5_ff(a, b, c, d, x, s, t) {
            return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
          }

          function md5_gg(a, b, c, d, x, s, t) {
            return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
          }

          function md5_hh(a, b, c, d, x, s, t) {
            return md5_cmn(b ^ c ^ d, a, b, x, s, t);
          }

          function md5_ii(a, b, c, d, x, s, t) {
            return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
          }
        },
        /**
         * @member Hashes
         * @class Hashes.SHA1
         * @param {Object} [config]
         * @constructor
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined in FIPS 180-1
         * Version 2.2 Copyright Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         */
        SHA1: function(options) {
          /**
           * Private config properties. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

          // public methods
          this.hex = function(s) {
            return rstr2hex(rstr(s), hexcase);
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-SHA1 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            var bkey, ipad, opad, i, hash;
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            bkey = rstr2binb(key);

            if (bkey.length > 16) {
              bkey = binb(bkey, key.length * 8);
            }
            ipad = Array(16), opad = Array(16);
            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 512 + 160));
          }

          /**
           * Calculate the SHA-1 of an array of big-endian words, and a bit length
           */

          function binb(x, len) {
            var i, j, t, olda, oldb, oldc, oldd, olde,
              w = Array(80),
              a = 1732584193,
              b = -271733879,
              c = -1732584194,
              d = 271733878,
              e = -1009589776;

            /* append padding */
            x[len >> 5] |= 0x80 << (24 - len % 32);
            x[((len + 64 >> 9) << 4) + 15] = len;

            for (i = 0; i < x.length; i += 16) {
              olda = a;
              oldb = b;
              oldc = c;
              oldd = d;
              olde = e;

              for (j = 0; j < 80; j += 1) {
                if (j < 16) {
                  w[j] = x[i + j];
                } else {
                  w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                }
                t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
                  safe_add(safe_add(e, w[j]), sha1_kt(j)));
                e = d;
                d = c;
                c = bit_rol(b, 30);
                b = a;
                a = t;
              }

              a = safe_add(a, olda);
              b = safe_add(b, oldb);
              c = safe_add(c, oldc);
              d = safe_add(d, oldd);
              e = safe_add(e, olde);
            }
            return Array(a, b, c, d, e);
          }

          /**
           * Perform the appropriate triplet combination function for the current
           * iteration
           */

          function sha1_ft(t, b, c, d) {
            if (t < 20) {
              return (b & c) | ((~b) & d);
            }
            if (t < 40) {
              return b ^ c ^ d;
            }
            if (t < 60) {
              return (b & c) | (b & d) | (c & d);
            }
            return b ^ c ^ d;
          }

          /**
           * Determine the appropriate additive constant for the current iteration
           */

          function sha1_kt(t) {
            return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :
              (t < 60) ? -1894007588 : -899497514;
          }
        },
        /**
         * @class Hashes.SHA256
         * @param {config}
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined in FIPS 180-2
         * Version 2.2 Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         * Also http://anmar.eu.org/projects/jssha2/
         */
        SHA256: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            sha256_K;

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s, utf8));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s, utf8), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s, utf8), e);
          };
          this.raw = function(s) {
            return rstr(s, utf8);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          // private methods

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s, utf8) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-sha256 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            var hash, i = 0,
              bkey = rstr2binb(key),
              ipad = Array(16),
              opad = Array(16);

            if (bkey.length > 16) {
              bkey = binb(bkey, key.length * 8);
            }

            for (; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }

            hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 512 + 256));
          }

          /*
           * Main sha256 function, with its support functions
           */

          function sha256_S(X, n) {
            return (X >>> n) | (X << (32 - n));
          }

          function sha256_R(X, n) {
            return (X >>> n);
          }

          function sha256_Ch(x, y, z) {
            return ((x & y) ^ ((~x) & z));
          }

          function sha256_Maj(x, y, z) {
            return ((x & y) ^ (x & z) ^ (y & z));
          }

          function sha256_Sigma0256(x) {
            return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));
          }

          function sha256_Sigma1256(x) {
            return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));
          }

          function sha256_Gamma0256(x) {
            return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));
          }

          function sha256_Gamma1256(x) {
            return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));
          }

          sha256_K = [
            1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,
            1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,
            264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,
            113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
            1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,
            430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
            1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998
          ];

          function binb(m, l) {
            var HASH = [1779033703, -1150833019, 1013904242, -1521486534,
              1359893119, -1694144372, 528734635, 1541459225
            ];
            var W = new Array(64);
            var a, b, c, d, e, f, g, h;
            var i, j, T1, T2;

            /* append padding */
            m[l >> 5] |= 0x80 << (24 - l % 32);
            m[((l + 64 >> 9) << 4) + 15] = l;

            for (i = 0; i < m.length; i += 16) {
              a = HASH[0];
              b = HASH[1];
              c = HASH[2];
              d = HASH[3];
              e = HASH[4];
              f = HASH[5];
              g = HASH[6];
              h = HASH[7];

              for (j = 0; j < 64; j += 1) {
                if (j < 16) {
                  W[j] = m[j + i];
                } else {
                  W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
                    sha256_Gamma0256(W[j - 15])), W[j - 16]);
                }

                T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
                  sha256_K[j]), W[j]);
                T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
                h = g;
                g = f;
                f = e;
                e = safe_add(d, T1);
                d = c;
                c = b;
                b = a;
                a = safe_add(T1, T2);
              }

              HASH[0] = safe_add(a, HASH[0]);
              HASH[1] = safe_add(b, HASH[1]);
              HASH[2] = safe_add(c, HASH[2]);
              HASH[3] = safe_add(d, HASH[3]);
              HASH[4] = safe_add(e, HASH[4]);
              HASH[5] = safe_add(f, HASH[5]);
              HASH[6] = safe_add(g, HASH[6]);
              HASH[7] = safe_add(h, HASH[7]);
            }
            return HASH;
          }

        },

        /**
         * @class Hashes.SHA512
         * @param {config}
         *
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-512, as defined in FIPS 180-2
         * Version 2.2 Copyright Anonymous Contributor, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         */
        SHA512: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
            /* hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            sha512_k;

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            b64pad = a || b64pad;
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          /* private methods */

          /**
           * Calculate the SHA-512 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binb2rstr(binb(rstr2binb(s), s.length * 8));
          }
          /*
           * Calculate the HMAC-SHA-512 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;

            var hash, i = 0,
              bkey = rstr2binb(key),
              ipad = Array(32),
              opad = Array(32);

            if (bkey.length > 32) {
              bkey = binb(bkey, key.length * 8);
            }

            for (; i < 32; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }

            hash = binb(ipad.concat(rstr2binb(data)), 1024 + data.length * 8);
            return binb2rstr(binb(opad.concat(hash), 1024 + 512));
          }

          /**
           * Calculate the SHA-512 of an array of big-endian dwords, and a bit length
           */

          function binb(x, len) {
            var j, i, l,
              W = new Array(80),
              hash = new Array(16),
              //Initial hash values
              H = [
                new int64(0x6a09e667, -205731576),
                new int64(-1150833019, -2067093701),
                new int64(0x3c6ef372, -23791573),
                new int64(-1521486534, 0x5f1d36f1),
                new int64(0x510e527f, -1377402159),
                new int64(-1694144372, 0x2b3e6c1f),
                new int64(0x1f83d9ab, -79577749),
                new int64(0x5be0cd19, 0x137e2179)
              ],
              T1 = new int64(0, 0),
              T2 = new int64(0, 0),
              a = new int64(0, 0),
              b = new int64(0, 0),
              c = new int64(0, 0),
              d = new int64(0, 0),
              e = new int64(0, 0),
              f = new int64(0, 0),
              g = new int64(0, 0),
              h = new int64(0, 0),
              //Temporary variables not specified by the document
              s0 = new int64(0, 0),
              s1 = new int64(0, 0),
              Ch = new int64(0, 0),
              Maj = new int64(0, 0),
              r1 = new int64(0, 0),
              r2 = new int64(0, 0),
              r3 = new int64(0, 0);

            if (sha512_k === undefined) {
              //SHA512 constants
              sha512_k = [
                new int64(0x428a2f98, -685199838), new int64(0x71374491, 0x23ef65cd),
                new int64(-1245643825, -330482897), new int64(-373957723, -2121671748),
                new int64(0x3956c25b, -213338824), new int64(0x59f111f1, -1241133031),
                new int64(-1841331548, -1357295717), new int64(-1424204075, -630357736),
                new int64(-670586216, -1560083902), new int64(0x12835b01, 0x45706fbe),
                new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, -704662302),
                new int64(0x72be5d74, -226784913), new int64(-2132889090, 0x3b1696b1),
                new int64(-1680079193, 0x25c71235), new int64(-1046744716, -815192428),
                new int64(-459576895, -1628353838), new int64(-272742522, 0x384f25e3),
                new int64(0xfc19dc6, -1953704523), new int64(0x240ca1cc, 0x77ac9c65),
                new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
                new int64(0x5cb0a9dc, -1119749164), new int64(0x76f988da, -2096016459),
                new int64(-1740746414, -295247957), new int64(-1473132947, 0x2db43210),
                new int64(-1341970488, -1728372417), new int64(-1084653625, -1091629340),
                new int64(-958395405, 0x3da88fc2), new int64(-710438585, -1828018395),
                new int64(0x6ca6351, -536640913), new int64(0x14292967, 0xa0e6e70),
                new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
                new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, -1651133473),
                new int64(0x650a7354, -1951439906), new int64(0x766a0abb, 0x3c77b2a8),
                new int64(-2117940946, 0x47edaee6), new int64(-1838011259, 0x1482353b),
                new int64(-1564481375, 0x4cf10364), new int64(-1474664885, -1136513023),
                new int64(-1035236496, -789014639), new int64(-949202525, 0x654be30),
                new int64(-778901479, -688958952), new int64(-694614492, 0x5565a910),
                new int64(-200395387, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
                new int64(0x19a4c116, -1194143544), new int64(0x1e376c08, 0x5141ab53),
                new int64(0x2748774c, -544281703), new int64(0x34b0bcb5, -509917016),
                new int64(0x391c0cb3, -976659869), new int64(0x4ed8aa4a, -482243893),
                new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, -692930397),
                new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
                new int64(-2067236844, -1578062990), new int64(-1933114872, 0x1a6439ec),
                new int64(-1866530822, 0x23631e28), new int64(-1538233109, -561857047),
                new int64(-1090935817, -1295615723), new int64(-965641998, -479046869),
                new int64(-903397682, -366583396), new int64(-779700025, 0x21c0c207),
                new int64(-354779690, -840897762), new int64(-176337025, -294727304),
                new int64(0x6f067aa, 0x72176fba), new int64(0xa637dc5, -1563912026),
                new int64(0x113f9804, -1090974290), new int64(0x1b710b35, 0x131c471b),
                new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
                new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, -1676669620),
                new int64(0x4cc5d4be, -885112138), new int64(0x597f299c, -60457430),
                new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)
              ];
            }

            for (i = 0; i < 80; i += 1) {
              W[i] = new int64(0, 0);
            }

            // append padding to the source string. The format is described in the FIPS.
            x[len >> 5] |= 0x80 << (24 - (len & 0x1f));
            x[((len + 128 >> 10) << 5) + 31] = len;
            l = x.length;
            for (i = 0; i < l; i += 32) { //32 dwords is the block size
              int64copy(a, H[0]);
              int64copy(b, H[1]);
              int64copy(c, H[2]);
              int64copy(d, H[3]);
              int64copy(e, H[4]);
              int64copy(f, H[5]);
              int64copy(g, H[6]);
              int64copy(h, H[7]);

              for (j = 0; j < 16; j += 1) {
                W[j].h = x[i + 2 * j];
                W[j].l = x[i + 2 * j + 1];
              }

              for (j = 16; j < 80; j += 1) {
                //sigma1
                int64rrot(r1, W[j - 2], 19);
                int64revrrot(r2, W[j - 2], 29);
                int64shr(r3, W[j - 2], 6);
                s1.l = r1.l ^ r2.l ^ r3.l;
                s1.h = r1.h ^ r2.h ^ r3.h;
                //sigma0
                int64rrot(r1, W[j - 15], 1);
                int64rrot(r2, W[j - 15], 8);
                int64shr(r3, W[j - 15], 7);
                s0.l = r1.l ^ r2.l ^ r3.l;
                s0.h = r1.h ^ r2.h ^ r3.h;

                int64add4(W[j], s1, W[j - 7], s0, W[j - 16]);
              }

              for (j = 0; j < 80; j += 1) {
                //Ch
                Ch.l = (e.l & f.l) ^ (~e.l & g.l);
                Ch.h = (e.h & f.h) ^ (~e.h & g.h);

                //Sigma1
                int64rrot(r1, e, 14);
                int64rrot(r2, e, 18);
                int64revrrot(r3, e, 9);
                s1.l = r1.l ^ r2.l ^ r3.l;
                s1.h = r1.h ^ r2.h ^ r3.h;

                //Sigma0
                int64rrot(r1, a, 28);
                int64revrrot(r2, a, 2);
                int64revrrot(r3, a, 7);
                s0.l = r1.l ^ r2.l ^ r3.l;
                s0.h = r1.h ^ r2.h ^ r3.h;

                //Maj
                Maj.l = (a.l & b.l) ^ (a.l & c.l) ^ (b.l & c.l);
                Maj.h = (a.h & b.h) ^ (a.h & c.h) ^ (b.h & c.h);

                int64add5(T1, h, s1, Ch, sha512_k[j], W[j]);
                int64add(T2, s0, Maj);

                int64copy(h, g);
                int64copy(g, f);
                int64copy(f, e);
                int64add(e, d, T1);
                int64copy(d, c);
                int64copy(c, b);
                int64copy(b, a);
                int64add(a, T1, T2);
              }
              int64add(H[0], H[0], a);
              int64add(H[1], H[1], b);
              int64add(H[2], H[2], c);
              int64add(H[3], H[3], d);
              int64add(H[4], H[4], e);
              int64add(H[5], H[5], f);
              int64add(H[6], H[6], g);
              int64add(H[7], H[7], h);
            }

            //represent the hash as an array of 32-bit dwords
            for (i = 0; i < 8; i += 1) {
              hash[2 * i] = H[i].h;
              hash[2 * i + 1] = H[i].l;
            }
            return hash;
          }

          //A constructor for 64-bit numbers

          function int64(h, l) {
            this.h = h;
            this.l = l;
            //this.toString = int64toString;
          }

          //Copies src into dst, assuming both are 64-bit numbers

          function int64copy(dst, src) {
            dst.h = src.h;
            dst.l = src.l;
          }

          //Right-rotates a 64-bit number by shift
          //Won't handle cases of shift>=32
          //The function revrrot() is for that

          function int64rrot(dst, x, shift) {
            dst.l = (x.l >>> shift) | (x.h << (32 - shift));
            dst.h = (x.h >>> shift) | (x.l << (32 - shift));
          }

          //Reverses the dwords of the source and then rotates right by shift.
          //This is equivalent to rotation by 32+shift

          function int64revrrot(dst, x, shift) {
            dst.l = (x.h >>> shift) | (x.l << (32 - shift));
            dst.h = (x.l >>> shift) | (x.h << (32 - shift));
          }

          //Bitwise-shifts right a 64-bit number by shift
          //Won't handle shift>=32, but it's never needed in SHA512

          function int64shr(dst, x, shift) {
            dst.l = (x.l >>> shift) | (x.h << (32 - shift));
            dst.h = (x.h >>> shift);
          }

          //Adds two 64-bit numbers
          //Like the original implementation, does not rely on 32-bit operations

          function int64add(dst, x, y) {
            var w0 = (x.l & 0xffff) + (y.l & 0xffff);
            var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);
            var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);
            var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }

          //Same, except with 4 addends. Works faster than adding them one by one.

          function int64add4(dst, a, b, c, d) {
            var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff);
            var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (w0 >>> 16);
            var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (w1 >>> 16);
            var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }

          //Same, except with 5 addends

          function int64add5(dst, a, b, c, d, e) {
            var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff),
              w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16),
              w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16),
              w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);
            dst.l = (w0 & 0xffff) | (w1 << 16);
            dst.h = (w2 & 0xffff) | (w3 << 16);
          }
        },
        /**
         * @class Hashes.RMD160
         * @constructor
         * @param {Object} [config]
         *
         * A JavaScript implementation of the RIPEMD-160 Algorithm
         * Version 2.2 Copyright Jeremy Lin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         * See http://pajhome.org.uk/crypt/md5 for details.
         * Also http://www.ocf.berkeley.edu/~jjlin/jsotp/
         */
        RMD160: function(options) {
          /**
           * Private properties configuration variables. You may need to tweak these to be compatible with
           * the server-side, but the defaults work in most cases.
           * @see this.setUpperCase() method
           * @see this.setPad() method
           */
          var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
            /* hexadecimal output case format. false - lowercase; true - uppercase  */
            b64pad = (options && typeof options.pad === 'string') ? options.pa : '=',
            /* base-64 pad character. Default '=' for strict RFC compliance   */
            utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
            /* enable/disable utf8 encoding */
            rmd160_r1 = [
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
              7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
              3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
              1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
              4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
            ],
            rmd160_r2 = [
              5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
              6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
              15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
              8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
              12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
            ],
            rmd160_s1 = [
              11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
              7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
              11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
              11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
              9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
            ],
            rmd160_s2 = [
              8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
              9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
              9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
              15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
              8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
            ];

          /* privileged (public) methods */
          this.hex = function(s) {
            return rstr2hex(rstr(s));
          };
          this.b64 = function(s) {
            return rstr2b64(rstr(s), b64pad);
          };
          this.any = function(s, e) {
            return rstr2any(rstr(s), e);
          };
          this.raw = function(s) {
            return rstr(s);
          };
          this.hex_hmac = function(k, d) {
            return rstr2hex(rstr_hmac(k, d));
          };
          this.b64_hmac = function(k, d) {
            return rstr2b64(rstr_hmac(k, d), b64pad);
          };
          this.any_hmac = function(k, d, e) {
            return rstr2any(rstr_hmac(k, d), e);
          };
          /**
           * Perform a simple self-test to see if the VM is working
           * @return {String} Hexadecimal hash sample
           * @public
           */
          this.vm_test = function() {
            return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
          };
          /**
           * @description Enable/disable uppercase hexadecimal returned string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUpperCase = function(a) {
            if (typeof a === 'boolean') {
              hexcase = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {string} Pad
           * @return {Object} this
           * @public
           */
          this.setPad = function(a) {
            if (typeof a !== 'undefined') {
              b64pad = a;
            }
            return this;
          };
          /**
           * @description Defines a base64 pad string
           * @param {boolean}
           * @return {Object} this
           * @public
           */
          this.setUTF8 = function(a) {
            if (typeof a === 'boolean') {
              utf8 = a;
            }
            return this;
          };

          /* private methods */

          /**
           * Calculate the rmd160 of a raw string
           */

          function rstr(s) {
            s = (utf8) ? utf8Encode(s) : s;
            return binl2rstr(binl(rstr2binl(s), s.length * 8));
          }

          /**
           * Calculate the HMAC-rmd160 of a key and some data (raw strings)
           */

          function rstr_hmac(key, data) {
            key = (utf8) ? utf8Encode(key) : key;
            data = (utf8) ? utf8Encode(data) : data;
            var i, hash,
              bkey = rstr2binl(key),
              ipad = Array(16),
              opad = Array(16);

            if (bkey.length > 16) {
              bkey = binl(bkey, key.length * 8);
            }

            for (i = 0; i < 16; i += 1) {
              ipad[i] = bkey[i] ^ 0x36363636;
              opad[i] = bkey[i] ^ 0x5C5C5C5C;
            }
            hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
            return binl2rstr(binl(opad.concat(hash), 512 + 160));
          }

          /**
           * Convert an array of little-endian words to a string
           */

          function binl2rstr(input) {
            var i, output = '',
              l = input.length * 32;
            for (i = 0; i < l; i += 8) {
              output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
            }
            return output;
          }

          /**
           * Calculate the RIPE-MD160 of an array of little-endian words, and a bit length.
           */

          function binl(x, len) {
            var T, j, i, l,
              h0 = 0x67452301,
              h1 = 0xefcdab89,
              h2 = 0x98badcfe,
              h3 = 0x10325476,
              h4 = 0xc3d2e1f0,
              A1, B1, C1, D1, E1,
              A2, B2, C2, D2, E2;

            /* append padding */
            x[len >> 5] |= 0x80 << (len % 32);
            x[(((len + 64) >>> 9) << 4) + 14] = len;
            l = x.length;

            for (i = 0; i < l; i += 16) {
              A1 = A2 = h0;
              B1 = B2 = h1;
              C1 = C2 = h2;
              D1 = D2 = h3;
              E1 = E2 = h4;
              for (j = 0; j <= 79; j += 1) {
                T = safe_add(A1, rmd160_f(j, B1, C1, D1));
                T = safe_add(T, x[i + rmd160_r1[j]]);
                T = safe_add(T, rmd160_K1(j));
                T = safe_add(bit_rol(T, rmd160_s1[j]), E1);
                A1 = E1;
                E1 = D1;
                D1 = bit_rol(C1, 10);
                C1 = B1;
                B1 = T;
                T = safe_add(A2, rmd160_f(79 - j, B2, C2, D2));
                T = safe_add(T, x[i + rmd160_r2[j]]);
                T = safe_add(T, rmd160_K2(j));
                T = safe_add(bit_rol(T, rmd160_s2[j]), E2);
                A2 = E2;
                E2 = D2;
                D2 = bit_rol(C2, 10);
                C2 = B2;
                B2 = T;
              }

              T = safe_add(h1, safe_add(C1, D2));
              h1 = safe_add(h2, safe_add(D1, E2));
              h2 = safe_add(h3, safe_add(E1, A2));
              h3 = safe_add(h4, safe_add(A1, B2));
              h4 = safe_add(h0, safe_add(B1, C2));
              h0 = T;
            }
            return [h0, h1, h2, h3, h4];
          }

          // specific algorithm methods

          function rmd160_f(j, x, y, z) {
            return (0 <= j && j <= 15) ? (x ^ y ^ z) :
              (16 <= j && j <= 31) ? (x & y) | (~x & z) :
              (32 <= j && j <= 47) ? (x | ~y) ^ z :
              (48 <= j && j <= 63) ? (x & z) | (y & ~z) :
              (64 <= j && j <= 79) ? x ^ (y | ~z) :
              'rmd160_f: j out of range';
          }

          function rmd160_K1(j) {
            return (0 <= j && j <= 15) ? 0x00000000 :
              (16 <= j && j <= 31) ? 0x5a827999 :
              (32 <= j && j <= 47) ? 0x6ed9eba1 :
              (48 <= j && j <= 63) ? 0x8f1bbcdc :
              (64 <= j && j <= 79) ? 0xa953fd4e :
              'rmd160_K1: j out of range';
          }

          function rmd160_K2(j) {
            return (0 <= j && j <= 15) ? 0x50a28be6 :
              (16 <= j && j <= 31) ? 0x5c4dd124 :
              (32 <= j && j <= 47) ? 0x6d703ef3 :
              (48 <= j && j <= 63) ? 0x7a6d76e9 :
              (64 <= j && j <= 79) ? 0x00000000 :
              'rmd160_K2: j out of range';
          }
        }
      };

      // exposes Hashes
      (function(window, undefined$1) {
        var freeExports = false;
        {
          freeExports = exports;
          if (exports && typeof commonjsGlobal === 'object' && commonjsGlobal && commonjsGlobal === commonjsGlobal.global) {
            window = commonjsGlobal;
          }
        }

        if (typeof undefined$1 === 'function' && typeof undefined$1.amd === 'object' && undefined$1.amd) {
          // define as an anonymous module, so, through path mapping, it can be aliased
          undefined$1(function() {
            return Hashes;
          });
        } else if (freeExports) {
          // in Node.js or RingoJS v0.8.0+
          if ( module && module.exports === freeExports) {
            module.exports = Hashes;
          }
          // in Narwhal or RingoJS v0.7.0-
          else {
            freeExports.Hashes = Hashes;
          }
        } else {
          // in a browser or Rhino
          window.Hashes = Hashes;
        }
      }(this));
    }()); // IIFE
    });

    var main$7 = createCommonjsModule(function (module, exports) {
    (function() {

    const _cryptico = typeof commonjsRequire === 'undefined' ? window.cryptico : cryptico_1;
    const cryptico = _cryptico.default || _cryptico;
    const aesjs = typeof commonjsRequire === 'undefined' ? window.aesjs : aesJs;

    const kBitCount = 128;
    const kSHACount = 512;

    const mod = {

    	OLSKCryptoHMACSHA256Hash (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param1.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return (new (hashes).SHA256).hex_hmac(param1, param2);
    	},

    	OLSKCryptoShortHash (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return mod.OLSKCryptoHMACSHA256Hash(inputData, inputData).slice(0, 32);
    	},

    	async OLSKCryptoEncryptSigned (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param1.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param2.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param3 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param3.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		return cryptico.encrypt(param3, param1, (cryptico.RSAKey || RSAKey).parse(param2)).cipher;
    	},

    	async OLSKCryptoDecryptSigned (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param1.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param2 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param2.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof param3 !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!param3.trim()) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		const data = cryptico.decrypt(param3, (cryptico.RSAKey || RSAKey).parse(param1));

    		if (data.signature !== 'verified' || data.publicKeyString !== param2) {
    			return Promise.reject(new Error('OLSKErrorNotSigned'));
    		}

    		return data.plaintext;
    	},

    	async OLSKCryptoPBKDF2Key (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof window === 'undefined' || window.OLSKRequire) {
    			const _require = typeof window !== 'undefined' ? OLSKRequire : commonjsRequire;
    			return new Promise(function (res, rej) {
    				return _require('crypto').pbkdf2(inputData, inputData, 1, kBitCount / 8, 'sha' + kSHACount, function (err, result) {
    					return err ? rej(err) : res(result);
    				});
    			});
    		}

    		return window.crypto.subtle.importKey('raw', aesjs.utils.utf8.toBytes(inputData), 'PBKDF2', false, ['deriveBits','deriveKey']).then(function (keyMaterial) {
    			return window.crypto.subtle.deriveBits({
    				name: 'PBKDF2',
    				salt: aesjs.utils.utf8.toBytes(inputData),
    				iterations: 1,
    				hash: { name: 'SHA-' + kSHACount },
    			}, keyMaterial, kBitCount).then(function (result) {
    				return new Uint8Array(result);
    			});
    		});
    	},

    	OLSKCryptoPBKDF2Hash (inputData) {
    		return aesjs.utils.hex.fromBytes(inputData);
    	},

    	OLSKCryptoAESEncrypt (key, param2) {
    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return aesjs.utils.hex.fromBytes((new aesjs.ModeOfOperation.ctr(key)).encrypt(aesjs.utils.utf8.toBytes(param2)));
    	},

    	OLSKCryptoAESDecrypt (key, param2) {
    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return aesjs.utils.utf8.fromBytes((new aesjs.ModeOfOperation.ctr(key)).decrypt(aesjs.utils.hex.toBytes(param2)));
    	},

    	OLSKCryptoAESFunctions (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!inputData.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _OLSKCryptoAESFunctionsKey = aesjs.utils.hex.toBytes(inputData);

    		return {
    			_OLSKCryptoAESFunctionsKey,

    			OLSKCryptoAESFunctionsEncrypt: (function (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				return mod.OLSKCryptoAESEncrypt(_OLSKCryptoAESFunctionsKey, inputData);
    			}).bind(null),

    			OLSKCryptoAESFunctionsDecrypt: (function (inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('OLSKErrorInputNotValid');
    				}

    				return mod.OLSKCryptoAESDecrypt(_OLSKCryptoAESFunctionsKey, inputData);
    			}).bind(null),
    		};
    	},	

    };

    {
    	Object.assign(exports, mod);
    }

    if (typeof window === 'object') {
    	window.OLSKCrypto = mod;
    }
    	
    })();
    });

    var main$8 = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLKSLocalStorageSet (param1, param2, param3) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.setItem !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string' || !param2.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 === 'undefined') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		param3 ? param1.setItem(param2, JSON.stringify(param3)) : param1.removeItem(param2);

    		return param3;
    	},

    	OLKSLocalStorageGet (param1, param2) {
    		if (typeof param1 !== 'object' || param1 === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param1.setItem !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string' || !param2.trim()) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return JSON.parse(param1.getItem(param2));
    	},

    };

    Object.assign(exports, mod);
    });

    var main$9 = createCommonjsModule(function (module, exports) {
    const OLSKObject = mod$3.default || mod$3;

    const uIsFilled = function (inputData) {
    	return typeof inputData === 'string' && inputData.trim() !== '';
    };

    const mod = {

    	OLSKFundSetup (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod.OLSKFundSetupDispatchClue !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod._OLSKFundSetupDispatchUpdate !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamFormURL !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamProject !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamDocumentLimit !== 'undefined') {
    			if (typeof params.ParamDocumentLimit !== 'number') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    		}

    		const _this = this;

    		if (params.ParamSpecUI && window.location.search.match('FakeOLSKFundResponseIsPresent=true')) {
    			OLSKFund._OLSKFundFakeGrantResponseRandom();
    		}

    		const setHotfix = function (key, value) {
    			params.ParamMod[key] = value;

    			params.ParamMod._OLSKFundSetupDispatchUpdate(key);
    		};

    		if (params.ParamDocumentLimit) {
    			Object.assign(params.ParamMod, {

    				OLSKFundDocumentRemainder (inputData) {
    					setHotfix('_ValueDocumentRemainder', mod.OLSKFundRemainder(inputData, params.ParamDocumentLimit));
    				},

    			})._ValueDocumentRemainder = '';
    		}

    		setHotfix('_ValueFundClue', params.ParamMod.OLSKFundSetupDispatchClue());

    		return Object.assign(params.ParamMod, {

    			_OLSKAppToolbarDispatchFundNotConnected () {
    				if (!(debug.DebugWindow || window).confirm(params.OLSKLocalized('OLSKRemoteStorageConnectConfirmText'))) {
    					return;
    				}

    				setHotfix('_ValueCloudToolbarHidden', false);
    			},

    			_OLSKAppToolbarDispatchFundConnected () {
    				setHotfix('_ValueFundURL', mod.OLSKFundURL(Object.assign(Object.assign({}, params), {
    					ParamIdentity: params.ParamMod._ValueCloudIdentity,
    					ParamHomeURL: (debug.DebugWindow || window).location.origin + (debug.DebugWindow || window).location.pathname,
    				})));

    				params.ParamMod._OLSKWebView.modPublic.OLSKModalViewShow();

    				return _this.OLSKFundListen(params.ParamMod, debug);
    			},

    			OLSKFundDocumentGate () {
    				if (!(debug.DebugWindow || window).confirm(params.OLSKLocalized('OLSKFundGateText'))) {
    					return;
    				}

    				return params.ParamMod.OLSKAppToolbarDispatchFund();
    			},

    			OLSKAppToolbarDispatchFund () {
    				return params.ParamMod[params.ParamMod._ValueCloudIdentity ? '_OLSKAppToolbarDispatchFundConnected' : '_OLSKAppToolbarDispatchFundNotConnected']();
    			},

    			OLSKFundDispatchReceive (inputData) {
    				params.ParamMod._OLSKWebView.modPublic.OLSKModalViewClose();

    				params.ParamMod._ValueFundClue = inputData;

    				return params.ParamMod.OLSKFundDispatchPersist(inputData);
    			},

    			OLSKFundDispatchProgress (inputData) {
    				setHotfix('_ValueOLSKFundProgress', inputData);
    			},

    			OLSKFundDispatchFail () {
    				return params.ParamMod.OLSKFundDispatchPersist(null);
    			},

    			OLSKFundDispatchGrant (inputData) {
    				params.ParamMod._ValueOLSKFundGrant = OLSKObject.OLSKObjectPostJSONParse(inputData);
    			},

    		});
    	},

    	OLSKFundResponseIsPresent () {
    		return !!this._DataFoilOLSKLocalStorage.OLKSLocalStorageGet(typeof window === 'undefined' ? null : window.localStorage, mod._OLSKFundGrantData())
    	},

    	OLSKFundSetupPostPay (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params._ValueFundClue === 'undefined') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const clue = Object.fromEntries((new URLSearchParams((debug.DebugWindow || window).location.hash.replace(/^#+/, ''))).entries()).clue;

    		if (!clue) {
    			return
    		}

    		(debug.DebugWindow || window).location.hash = '';

    		if (params._ValueFundClue) {
    			return;
    		}

    		return params.OLSKFundDispatchPersist(clue);
    	},

    	_OLSKFundGrantData () {
    		return 'OLSK_FUND_GRANT_DATA';
    	},

    	async _OLSKFundSetupGrantDispatchPayload (params, payload, debug = {}) {
    		try {
    			return params.OLSKFundDispatchGrant(JSON.parse(await main$7.OLSKCryptoDecryptSigned(params.OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE, params.OLSK_CRYPTO_PAIR_SENDER_PUBLIC, payload.OLSK_FUND_GRANT_V1)));
    		} catch (e) {
    			if (e.message.match('Invalid RSA private key')) {
    				return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKFundGrantErrorDecryptionText'));
    			}

    			if (e.message.match('OLSKErrorNotSigned')) {
    				return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKFundGrantErrorSigningText'));
    			}
    			
    			throw e;
    		}
    	},

    	async OLSKFundSetupGrant (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!uIsFilled(params.OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (!uIsFilled(params.OLSK_CRYPTO_PAIR_SENDER_PUBLIC)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSK_FUND_API_URL !== 'string') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (main$6.OLSKPactAuthModelErrors(params.ParamBody)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (main$6.OLSKPactPayModelErrors(params.ParamBody)) {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKFundDispatchProgress !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKFundDispatchFail !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		if (typeof params.OLSKFundDispatchGrant !== 'function') {
    			return Promise.reject(new Error('OLSKErrorInputNotValid'));
    		}

    		const payload = params.ParamSpecUI ? null : await this._DataFoilOLSKLocalStorage.OLKSLocalStorageGet((debug.DebugWindow || window).localStorage, mod._OLSKFundGrantData());
    		if (payload) {
    			return mod._OLSKFundSetupGrantDispatchPayload(params, payload, debug);
    		}

    		let response;

    		try {
    			params.OLSKFundDispatchProgress(true);
    			
    			response = await (debug.DebugWindow || window).fetch(params.OLSK_FUND_API_URL, {
    				method: 'POST',
    				headers: {
    					'Content-Type': 'application/json',
    				},
    				body: JSON.stringify(params.ParamBody),
    			});
    		} catch (error) {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKFundGrantErrorConnectionText'));
    		}

    		const json = await response.json();

    		params.OLSKFundDispatchProgress(false);

    		if (response.status !== 200) {
    			return params.OLSKFundDispatchFail((debug.DebugWindow || window).alert(json.RCSAPIError));
    		}

    		return mod._OLSKFundSetupGrantDispatchPayload(params, await this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet((debug.DebugWindow || window).localStorage, mod._OLSKFundGrantData(), json), debug);
    	},

    	OLSKFundGate (param1, OLSKLocalized) {
    		if (!param1.location) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return param1.confirm(OLSKLocalized('OLSKFundGateText'));
    	},

    	OLSKFundURL (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamFormURL !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamProject !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamIdentity !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamHomeURL !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return Object.assign(new URL(params.ParamFormURL), {
    			hash: (new URLSearchParams({
    				seed: JSON.stringify({
    					project: params.ParamProject,
    					identity: params.ParamIdentity,
    					home: params.ParamHomeURL,
    				}),
    			})).toString(),
    		}).href;
    	},

    	OLSKFundListen (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchReceive !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return (debug.DebugWindow || window).addEventListener('message', function (event) {
    			if (typeof event.data !== 'object' || event.data === null) {
    				return;
    			}

    			if (!event.data.OLSK_FUND_CLUE) {
    				return;
    			}

    			return params.OLSKFundDispatchReceive(event.data.OLSK_FUND_CLUE);
    		}, false);
    	},

    	_OLSKFundPricingDate (inputData) {
    		const string = inputData.split(':').slice(0, -1).join(':');

    		const outputData = new Date(string);
    		return Number.isNaN(outputData.getTime()) ? new Date(parseInt(string)) : outputData;
    	},

    	_OLSKFundPricingStringRowErrors (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (inputData.slice(-1) === ';') {
    			return true;
    		}

    		if (inputData.split(':').length < 2) {
    			return true;
    		}

    		if (Number.isNaN(mod._OLSKFundPricingDate(inputData).getTime())) {
    			return true;
    		}

    		if (inputData.split(':').pop().split(' ').length !== 4) {
    			return true;
    		}

    		return false;
    	},

    	OLSKFundPricingStringIsValid (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const rows = inputData.split(';');

    		if (!rows.length) {
    			return false;
    		}

    		if (rows.filter(mod._OLSKFundPricingStringRowErrors).length) {
    			return false;
    		}

    		return true;
    	},

    	OLSKFundTier (param1, param2) {
    		if (!mod.OLSKFundPricingStringIsValid(param1)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param2 && main$6.OLSKPactGrantModelErrors(param2)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!param2) {
    			return 0;
    		}

    		const pricing = param1.split(';').filter(function (e) {
    			return e;
    		}).map(function (e) {
    			return {
    				OLKSFundPricingDate: mod._OLSKFundPricingDate(e),
    				OLKSFundPricingYearlySums: e.split(':').pop().split(' ').map(function (e, i) {
    					return e.split(',').map(function (e, index, original) {
    						return parseInt(e) * 100 * (i && original.length == 1 ? 12 : 1);
    					}).pop();
    				}),
    			};
    		});

    		return pricing.filter(function (e) {
    			return param2.OLSKPactGrantStartDate <= e.OLKSFundPricingDate;
    		}).concat(pricing.slice(-1)).shift().OLKSFundPricingYearlySums.filter(function (e) {
    			return (param2.OLSKPactGrantContribution * (param2.OLSKPactGrantFrequencyOption === main$6.OLSKPactGrantFrequencyOptionMonthly() ? 12 : 1)) >= e;
    		}).length + 1;
    	},

    	OLSKFundIsEligible (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMinimumTier !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamCurrentProject !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (!Array.isArray(params.ParamBundleProjects)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamGrantTier !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamGrantProject !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (params.ParamGrantTier < params.ParamMinimumTier) {
    			return false;
    		}

    		if (params.ParamGrantTier > params.ParamMinimumTier) {
    			return true;
    		}

    		if (params.ParamGrantProject === params.ParamCurrentProject) {
    			return params.ParamGrantTier === params.ParamMinimumTier;
    		}

    		if (params.ParamGrantTier === 2) {
    			return params.ParamBundleProjects.includes(params.ParamGrantProject);
    		}

    		if (params.ParamGrantTier > 2) {
    			return true;
    		}

    		return false;
    	},

    	OLSKFundRemainder (param1, param2) {
    		if (typeof param1 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param2 < 1) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return Math.max(0, param2 - param1);
    	},

    	async _OLSKFundFakeGrantResponseEncrypted (param1, param2, param3) {
    		return mod._DataFoilOLSKLocalStorage.OLKSLocalStorageSet(window.localStorage, mod._OLSKFundGrantData(), await main$7.OLSKCryptoEncryptSigned(param1, param2, JSON.stringify(param3)));
    	},

    	_OLSKFundFakeGrantResponseRandom () {
    		return mod._DataFoilOLSKLocalStorage.OLKSLocalStorageSet(localStorage, mod._OLSKFundGrantData(), Math.random().toString());
    	},

    	OLSKFundLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKFundLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	OLSKFundLauncherItemFakeFlipProgress (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKFundLauncherItemFakeFlipProgress',
    			LCHRecipeCallback () {
    				return inputData.OLSKFundDispatchProgress(!inputData._ValueOLSKFundProgress);
    			},
    		};
    	},

    	OLSKFundLauncherItemFakeTier2WithNoBundle (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKFundLauncherItemFakeTier2WithNoBundle',
    			LCHRecipeCallback () {
    				inputData._ValueOLSKFundGrant = main$6.OLSKPactDataGrantObjectValid({
    					OLSKPactGrantContribution: 1000,
    					OLSKPactGrantFrequencyOption: main$6.OLSKPactGrantFrequencyOptionYearly(),
    				});
    			},
    		};
    	},

    	OLSKFundLauncherItemFakeTier2WithBundle (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKFundLauncherItemFakeTier2WithBundle',
    			LCHRecipeCallback () {
    				inputData._ValueOLSKFundGrant = main$6.OLSKPactDataGrantObjectValid({
    					OLSKPactGrantContribution: 1000,
    					OLSKPactGrantFrequencyOption: main$6.OLSKPactGrantFrequencyOptionYearly(),
    					OLSKPactGrantProject: 'FakeBundleProject',
    				});
    			},
    		};
    	},

    	OLSKFundLauncherItemFakeTier2Proxy (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKFundLauncherItemFakeTier2Proxy',
    			LCHRecipeCallback () {},
    			LCHRecipeIsExcluded () {
    				return !inputData.DataIsEligible({
    					ParamMinimumTier: 2,
    				});
    			}
    		};
    	},

    	OLSKFundLauncherItemEnterClue (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamConnected !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamAuthorized !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _this = this;

    		return {
    			LCHRecipeSignature: 'OLSKFundLauncherItemEnterClue',
    			LCHRecipeName: params.OLSKLocalized('OLSKFundLauncherItemEnterClueText'),
    			LCHRecipeCallback () {
    				const item = ((debug.DebugWindow || window).prompt(params.OLSKLocalized('OLSKFundLauncherItemEnterCluePromptText')) || '').trim();

    				if (!item) {
    					return;
    				}

    				_this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet((debug.DebugWindow || window).localStorage, mod._OLSKFundGrantData(), null);

    				return params.OLSKFundDispatchPersist(item);
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamConnected || params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKFundLauncherItemClearClue (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamConnected !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamAuthorized !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchGrant !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKFundDispatchPersist !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _this = this;

    		return {
    			LCHRecipeSignature: 'OLSKFundLauncherItemClearClue',
    			LCHRecipeName: params.OLSKLocalized('OLSKFundLauncherItemClearClueText'),
    			LCHRecipeCallback () {
    				if (!(debug.DebugWindow || window).confirm(params.OLSKLocalized('OLSKFundLauncherItemClearClueConfirmText'))) {
    					return;
    				}

    				return params.OLSKFundDispatchPersist(params.OLSKFundDispatchGrant(_this._DataFoilOLSKLocalStorage.OLKSLocalStorageSet((debug.DebugWindow || window).localStorage, mod._OLSKFundGrantData(), null)));
    			},
    			LCHRecipeIsExcluded () {
    				return !params.ParamConnected || !params.ParamAuthorized;
    			},
    		};
    	},

    	OLSKFundRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKFundLauncherFakeItemProxy(),
    			mod.OLSKFundLauncherItemFakeFlipProgress(params.ParamMod),
    			mod.OLSKFundLauncherItemFakeTier2WithNoBundle(params.ParamMod),
    			mod.OLSKFundLauncherItemFakeTier2WithBundle(params.ParamMod),
    			mod.OLSKFundLauncherItemFakeTier2Proxy(params.ParamMod),
    			mod.OLSKFundLauncherItemEnterClue(params),
    			mod.OLSKFundLauncherItemClearClue(params),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    	// DATA

    	_DataFoilOLSKLocalStorage: main$8,

    };

    Object.assign(exports, mod);
    });

    var main$a = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKChainGather (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const _OLSKChainQueue = [];

    		const _OLSKChainGatherObject = function () {
    			return Object.keys(inputData).reduce(function (coll, item) {
    				return Object.assign(coll, typeof inputData[item] === 'function' ? {
    					[item]: function () {
    						const _arguments = arguments;

    						_OLSKChainQueue.push(function () {
    							return inputData[item](..._arguments);
    						});

    						return _OLSKChainGatherObject();
    					},
    				} : {});
    			}, {
    				_OLSKChainQueue,
    				OLSKChainExecute () {
    					return _OLSKChainQueue.reduce(async function (coll, e) {
    						return (await coll).concat(await e());
    					}, Promise.resolve([]));
    				},
    			});
    		};

    		return _OLSKChainGatherObject();
    	},

    };

    Object.assign(exports, mod);
    });

    var main$b = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKBeaconWait (inputData) {
    		if (typeof inputData !== 'undefined' && typeof inputData !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			return setTimeout(resolve, inputData || 650);
    		});
    	},

    	OLSKBeaconDeferFunction (inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return new Promise(function (resolve) {
    			const item = document.querySelector(inputData);

    			let listener = item.addEventListener('click', function () {
    				item.removeEventListener('click', listener);
    				resolve();
    			});
    		});
    	},

    	OLSKBeaconPointFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		const endRect = document.querySelector(param2).getBoundingClientRect();

    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left - (startRect.left - (endRect.left + endRect.width / 2 - startRect.width / 2)) * pct,
    				startRect.top - (startRect.top - (endRect.top + endRect.height / 2 - startRect.height / 2)) * pct,
    			);
    		};
    	},

    	_OLSKBeaconFire (el, etype) {
    		if (el.fireEvent) {
    		  return el.fireEvent('on' + etype);
    		}

    		const evObj = document.createEvent('Events');
    		evObj.initEvent(etype, true, false);
    		el.dispatchEvent(evObj);
    	},

    	OLSKBeaconClickFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const state = {
    			didClick: false,
    			didTouchDown: false,
    			didTouchUp: false,
    		};

    		const start = performance.now();

    		return function (pct) {
    			const time = performance.now() - start;

    			if (!state.didClick) {
    				mod._OLSKBeaconFire(document.querySelector(param1), 'click');

    				state.didClick = true;
    			}

    			if (!state.didTouchDown) {
    				document.querySelector(param2).classList.add(param3);

    				state.didTouchDown = true;

    				return
    			}

    			if (!state.didTouchUp && time > 250) {
    				document.querySelector(param2).classList.remove(param3);

    				state.didTouchUp = true;
    				
    				return
    			}
    		};
    	},

    	OLSKBeaconNudgeFunction (param1, param2, param3) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param3 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		const startRect = document.querySelector(param1).getBoundingClientRect();
    		return function (pct) {
    			return (function (el, left, top) {
    				el.style.left = left + 'px';
    				el.style.top = top + 'px';
    			})(
    				document.querySelector(param1),
    				startRect.left + param2 * pct,
    				startRect.top + param3 * pct,
    			);
    		};
    	},

    	OLSKBeaconFillFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2.slice(0, param2.length * pct);
    			mod._OLSKBeaconFire(document.querySelector(param1), 'input');
    		};
    	},

    	OLSKBeaconSetFunction (param1, param2) {
    		if (typeof param1 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'string') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return function (pct) {
    			document.querySelector(param1).value = param2;
    			mod._OLSKBeaconFire(document.querySelector(param1), 'change');
    		};
    	},

    	_OLSKBeaconAnimate (param1, param2) {
    		if (typeof param1 !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'undefined' && typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		// jsanimation/index.js at master · allenhwkim/jsanimation https://github.com/allenhwkim/jsanimation/blob/master/src/index.js

    		const start = performance.now();
    		return new Promise(function(resolve) {
    			const easeInOut = function(n) {
    				return 0.5 * (Math.sin((n - 0.5) * Math.PI) + 1);
    			};

    		  requestAnimationFrame(function animate(time) {
    		    let timeFraction = (time - start) / (param2 || 650);
    		    (timeFraction > 1) && (timeFraction = 1);
    		    param1(easeInOut(timeFraction), timeFraction);
    		    timeFraction < 1 ? requestAnimationFrame(animate) : resolve();
    		  });
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$c = createCommonjsModule(function (module, exports) {
    const mod = {

    	OLSKTransportExportBasename (debug = {}) {
    		return (debug.DebugWindow || window).location.hostname + '-' + (debug.DebugDate || Date).now();
    	},

    	OLSKTransportExportJSONFilename (debug = {}) {
    		return this.OLSKTransportExportBasename(debug) + '.json';
    	},

    	OLSKTransportLauncherFakeItemProxy () {
    		return {
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemProxy',
    			LCHRecipeCallback () {},
    		};
    	},

    	_AlertIfNotValid (text, params, debug = {}) {
    		if (!text.trim()) {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotFilledAlertText'));
    		}

    		if (!text.startsWith('{') || !text.endsWith('}')) {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotValidAlertText'));
    		}

    		try {
    			return params.OLSKTransportDispatchImportJSON(JSON.parse(text));
    		} catch {
    			return (debug.DebugWindow || window).alert(params.OLSKLocalized('OLSKTransportLauncherItemImportJSONErrorNotValidAlertText'));
    		}
    	},

    	OLSKTransportLauncherItemImportJSON (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKTransportDispatchImportJSON !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherItemImportJSON',
    			LCHRecipeName: params.OLSKLocalized('OLSKTransportLauncherItemImportJSONText'),
    			async LCHRecipeCallback () {
    				const text = await this.api.LCHReadTextFile({
    					accept: '.json',
    				});

    				return mod._AlertIfNotValid(text, params, debug);
    			},
    		};
    	},

    	OLSKTransportLauncherItemExportJSON (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKLocalized !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}
    		
    		if (typeof params.OLSKTransportDispatchExportInput !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherItemExportJSON',
    			LCHRecipeName: params.OLSKLocalized('OLSKTransportLauncherItemExportJSONText'),
    			async LCHRecipeCallback (inputData) {
    				return this.api.LCHSaveFile(JSON.stringify(inputData || await params.OLSKTransportDispatchExportInput()), mod.OLSKTransportExportJSONFilename(debug));
    			},
    		};
    	},

    	OLSKTransportLauncherFakeItemImportSerialized (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKTransportDispatchImportJSON !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemImportSerialized',
    			LCHRecipeCallback () {
    				return mod._AlertIfNotValid((debug.DebugWindow || window).prompt(), params);
    			},
    		};
    	},

    	OLSKTransportLauncherFakeItemExportSerialized (params, debug = {}) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKTransportDispatchExportInput !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeSignature: 'OLSKTransportLauncherFakeItemExportSerialized',
    			LCHRecipeName: 'OLSKTransportLauncherFakeItemExportSerialized',
    			async LCHRecipeCallback (inputData) {
    				return (debug.DebugWindow || window).alert(JSON.stringify({
    					OLSKDownloadName: mod.OLSKTransportExportJSONFilename(debug),
    					OLSKDownloadData: JSON.stringify(inputData || await params.OLSKTransportDispatchExportInput()),
    				}));
    			},
    		};
    	},

    	OLSKTransportRecipes (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.OLSKTransportLauncherFakeItemProxy(),
    			mod.OLSKTransportLauncherItemImportJSON(params),
    			mod.OLSKTransportLauncherItemExportJSON(params),
    			mod.OLSKTransportLauncherFakeItemImportSerialized(params),
    			mod.OLSKTransportLauncherFakeItemExportSerialized(params),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var main$d = createCommonjsModule(function (module, exports) {
    const uFlatten = function (inputData) {
    	return [].concat.apply([], inputData);
    };

    const mod = {

    	_ZDRSchemaObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRSchemaKey !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRSchemaKey.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRSchemaKey.trim() !== inputData.ZDRSchemaKey) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (typeof inputData.ZDRSchemaStub !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRSchemaPath !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (inputData.ZDRSchemaMethods !== undefined) {
    			if (typeof inputData.ZDRSchemaMethods !== 'object' || inputData.ZDRSchemaMethods === null) {
    				throw new Error('ZDRErrorInputNotObject');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchValidate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchValidate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncCreate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncCreate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncUpdate !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncUpdate !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncDelete !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncDelete !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRSchemaDispatchSyncConflict !== undefined) {
    			if (typeof inputData.ZDRSchemaDispatchSyncConflict !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		return true;
    	},

    	_ZDRScopeObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRScopeKey !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRScopeKey.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRScopeKey.trim() !== inputData.ZDRScopeKey) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (typeof inputData.ZDRScopeDirectory !== 'string') {
    			throw new Error('ZDRErrorInputNotString');
    		}

    		if (!inputData.ZDRScopeDirectory.trim()) {
    			throw new Error('ZDRErrorInputNotFilled');
    		}

    		if (inputData.ZDRScopeDirectory.trim() !== inputData.ZDRScopeDirectory) {
    			throw new Error('ZDRErrorInputNotTrimmed');
    		}

    		if (inputData.ZDRScopeDirectory.match('/')) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (inputData.ZDRScopeSchemas !== undefined) {
    			if (!Array.isArray(inputData.ZDRScopeSchemas)) {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (inputData.ZDRScopeCreatorDirectory !== undefined) {
    			if (typeof inputData.ZDRScopeCreatorDirectory !== 'string') {
    				throw new Error('ZDRErrorInputNotString');
    			}

    			if (!inputData.ZDRScopeCreatorDirectory.trim()) {
    				throw new Error('ZDRErrorInputNotFilled');
    			}

    			if (inputData.ZDRScopeCreatorDirectory.trim() !== inputData.ZDRScopeCreatorDirectory) {
    				throw new Error('ZDRErrorInputNotTrimmed');
    			}
    		}

    		if (inputData.ZDRScopeIsPublic !== undefined) {
    			if (typeof inputData.ZDRScopeIsPublic !== 'boolean') {
    				throw new Error('ZDRErrorInputNotBoolean');
    			}
    		}

    		return true;
    	},

    	_ZDRClientObjectValidate(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRClientWriteFile !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientReadFile !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientListObjects !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (typeof inputData.ZDRClientDelete !== 'function') {
    			throw new Error('ZDRErrorInputNotFunction');
    		}

    		if (inputData.ZDRClientPrepare !== undefined) {
    			if (typeof inputData.ZDRClientPrepare !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientConnect !== undefined) {
    			if (typeof inputData.ZDRClientConnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientReconnect !== undefined) {
    			if (typeof inputData.ZDRClientReconnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		if (inputData.ZDRClientDisconnect !== undefined) {
    			if (typeof inputData.ZDRClientDisconnect !== 'function') {
    				throw new Error('ZDRErrorInputNotFunction');
    			}
    		}

    		return true;
    	},

    	_ZDRPathIsDirectory(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return inputData.slice(-1) === '/';
    	},

    	_ZDRPathFormatDirectory(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return mod._ZDRPathIsDirectory(inputData) ? inputData : inputData.concat('/')
    	},

    	_ZDRPathFormatPath(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return inputData[0] === '/' ? inputData : '/'.concat(inputData);
    	},

    	_ZDRModelSyncCallbackSignatures() {
    		return [
    			'ZDRSchemaDispatchSyncCreate',
    			'ZDRSchemaDispatchSyncUpdate',
    			'ZDRSchemaDispatchSyncDelete',
    			'ZDRSchemaDispatchSyncConflict',
    		];
    	},

    	_ZDRModelSyncCallbackInput(param1, param2) {
    		if (!mod._ZDRModelSyncCallbackSignatures().includes(param1)) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (!param2.origin) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (param1 === 'ZDRSchemaDispatchSyncConflict') {
    			return param2;
    		}

    		return param2[param1 === 'ZDRSchemaDispatchSyncDelete' ? 'oldValue' : 'newValue'];
    	},

    	_ZDRModelSyncCallbackSignature(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			return;
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue === 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'ZDRSchemaDispatchSyncCreate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue !== 'undefined') {
    			return 'ZDRSchemaDispatchSyncUpdate';
    		}

    		if (inputData.origin === 'remote' && typeof inputData.oldValue !== 'undefined' && typeof inputData.newValue === 'undefined') {
    			return 'ZDRSchemaDispatchSyncDelete';
    		}

    		if (inputData.origin === 'conflict') {
    			return 'ZDRSchemaDispatchSyncConflict';
    		}

    		return;
    	},

    	_ZDRFissionObjectFilter(inputData) {
    		if (typeof inputData !== 'string') {
    			return false;
    		}

    		return ['{}', '[]'].includes(inputData[0] + inputData.slice(-1));
    	},

    	ZDRProtocolRemoteStorage() {
    		return 'ZDR_PROTOCOL_REMOTE_STORAGE';
    	},

    	ZDRProtocolFission() {
    		return 'ZDR_PROTOCOL_FISSION';
    	},

    	ZDRProtocolCustom() {
    		return 'ZDR_PROTOCOL_CUSTOM';
    	},

    	_ZDRProtocols() {
    		return [
    			mod.ZDRProtocolRemoteStorage(),
    			mod.ZDRProtocolFission(),
    			mod.ZDRProtocolCustom(),
    		];
    	},

    	ZDRProtocolForIdentity(inputData) {
    		if (typeof inputData !== 'string') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		return inputData.match(/fission\.(codes|name)/) ? mod.ZDRProtocolFission() : mod.ZDRProtocolRemoteStorage();
    	},

    	_ZDRProtocol(inputData) {
    		if (typeof inputData === 'function' && Object.keys(inputData).includes('Authorize')) {
    			return mod.ZDRProtocolRemoteStorage();
    		}

    		if (!!inputData && typeof inputData === 'object' && Object.keys(inputData).includes('Scenario')) {
    			return mod.ZDRProtocolFission();
    		}

    		if (!!inputData && typeof inputData === 'object' && inputData.ZDRClientWriteFile && mod._ZDRClientObjectValidate(inputData)) {
    			return mod.ZDRProtocolCustom();
    		}

    		throw new Error('ZDRErrorInputNotValid');
    	},

    	_ZDRClientInterface(_client, protocol, options) {
    		return {

    			async ClientWriteFile(param1, param2, param3) {
    				await ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return _client.storeFile(param3, param1, typeof Blob !== 'undefined' && param2.constructor === Blob ? await new Promise(function (res, rej) {
    							const reader = new FileReader();

    							reader.onload = function () {
    								res(reader.result);
    							};

    							reader.readAsArrayBuffer(param2);
    						}) : param2);
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return _client().write(param1, param2).then(function () {
    							return _client().publish();
    						});
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return _client.ZDRClientWriteFile(param1, param2, param3);
    					}),
    				})[protocol]();

    				return param2;
    			},

    			async ClientWriteObject(param1, param2) {
    				const _this = this;
    				const writeData = JSON.stringify(options._ZDRParamDispatchJSONPreStringify ? options._ZDRParamDispatchJSONPreStringify(param2) : param2);

    				await _this.ClientWriteFile(param1, writeData, 'application/json');

    				return param2;
    			},

    			ClientReadFile(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return ((await _client.getFile(inputData, false)) || {}).data;
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return _client().cat(inputData);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return _client.ZDRClientReadFile(inputData);
    					}),
    				})[protocol]();
    			},

    			async ClientReadObject(inputData) {
    				const result = await this.ClientReadFile(inputData);

    				if (!result) {
    					return null;
    				}

    				const parsed = JSON.parse(result);
    				return options._ZDRParamDispatchJSONPostParse ? options._ZDRParamDispatchJSONPostParse(parsed) : parsed;
    			},

    			async ClientListObjects(inputData) {
    				return Object.fromEntries((await ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return Object.entries(await _client.getAll(inputData === '/' ? '' : inputData, false)).filter(function ([key, value]) {
    							if (mod._ZDRPathIsDirectory(key)) {
    								return false;
    							}

    							return value !== true;
    						});
    					}),
    					[mod.ZDRProtocolFission()]: (async function () {
    						return (await Promise.all(Object.entries(await _client().ls(inputData)).filter(function ([key, value]) {
    							return value.isFile;
    						}).map(async function ([key, value]) {
    							return [key, await _client().cat(inputData + key)];
    						}))).reduce(function (coll, [key, value]) {
    							if (!mod._ZDRFissionObjectFilter(value)) {
    								return coll;
    							}

    							try {
    								return coll.concat([
    									[key, JSON.parse(value)],
    								]);
    							} catch (error) {
    								return coll;
    							}
    						}, []);
    					}),
    					[mod.ZDRProtocolCustom()]: (async function () {
    						return Object.entries(await _client.ZDRClientListObjects(inputData));
    					}),
    				})[protocol]()).map(function ([key, value]) {
    					return [key, options._ZDRParamDispatchJSONPostParse ? options._ZDRParamDispatchJSONPostParse(value) : value];
    				}));
    			},

    			async ClientPaths(inputData) {
    				return await ({
    					[mod.ZDRProtocolRemoteStorage()]: (async function () {
    						return Object.keys(await _client.getListing(inputData, false));
    					}),
    					[mod.ZDRProtocolFission()]: (async function () {
    						if (!(await _client().exists(inputData))) {
    							return [];
    						}

    						return Object.entries(await _client().ls(inputData)).map(function ([key, value]) {
    							return key + (!value.isFile ? '/' : '');
    						});
    					}),
    					[mod.ZDRProtocolCustom()]: (async function () {
    						return Object.keys(await _client.ZDRClientListObjects(inputData));
    					}),
    				})[protocol]();
    			},

    			ClientPermalink(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return _client.getItemURL(inputData);
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return _client().permalinkBase + inputData;
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						throw new Error('ZDRErrorMethodNotDefined');
    					}),
    				})[protocol]();
    			},

    			ClientDelete(inputData) {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						if (mod._ZDRPathIsDirectory(inputData)) {
    							return null;
    						}
    						
    						return _client.remove(inputData.replace(/^\/+/, ''));
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return _client().rm(inputData).then(function () {
    							return _client().publish();
    						});
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return _client.ZDRClientDelete(inputData);
    					}),
    				})[protocol]();
    			},

    		};
    	},

    	_ZDRWrap(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const ZDRStorageProtocol = mod._ZDRProtocol(inputData.ZDRParamLibrary);

    		if (!Array.isArray(inputData.ZDRParamScopes) || !inputData.ZDRParamScopes.length) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const scopes = inputData.ZDRParamScopes.filter(mod._ZDRScopeObjectValidate);

    		if (!scopes.length) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRParamDispatchReady !== 'function') {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		if (typeof inputData.ZDRParamDispatchError !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchError !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchConnected !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchConnected !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchOnline !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchOnline !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchOffline !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchOffline !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchSyncDidStart !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchSyncDidStart !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData.ZDRParamDispatchSyncDidStop !== 'undefined') {
    			if (typeof inputData.ZDRParamDispatchSyncDidStop !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData._ZDRParamDispatchJSONPreStringify !== 'undefined') {
    			if (typeof inputData._ZDRParamDispatchJSONPreStringify !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		if (typeof inputData._ZDRParamDispatchJSONPostParse !== 'undefined') {
    			if (typeof inputData._ZDRParamDispatchJSONPostParse !== 'function') {
    				throw new Error('ZDRErrorInputNotValid');
    			}
    		}

    		const library = (function () {
    			if (ZDRStorageProtocol !== mod.ZDRProtocolRemoteStorage()) {
    				return inputData.ZDRParamLibrary;
    			}

    			return new(inputData.ZDRParamLibrary)({
    				modules: scopes.reduce(function (coll, item) {
    					return coll.concat({
    						name: item.ZDRScopeDirectory,
    						builder: (function (privateClient, publicClient) {
    							return {
    								exports: {
    									privateClient,
    									publicClient,
    								},
    							};
    						}),
    					});
    				}, [])
    			});
    		})();

    		const fissionPermissions = {
    			permissions: scopes.reduce(function (coll, item) {
    				if (!item.ZDRScopeCreatorDirectory) {
    					coll.fs = coll.fs || {};

    					const key = item.ZDRScopeIsPublic ? 'publicPaths' : 'privatePaths';

    					coll.fs[key] = (coll.fs[key] || []).concat(item.ZDRScopeDirectory);
    				}
    				
    				return Object.assign(coll, item.ZDRScopeCreatorDirectory ? {
    					app: coll.app || {
    						name: item.ZDRScopeDirectory,
    						creator: item.ZDRScopeCreatorDirectory,
    					},
    				} : {});
    			}, {}),
    		};

    		let fissionClient = library._fs || {};
    		(async function fissionSetup() {
    			if (ZDRStorageProtocol !== mod.ZDRProtocolFission()) {
    				return;
    			}

    			const state = await library.initialize(fissionPermissions);

    			if (state.scenario === library.Scenario.AuthCancelled) {
    				return library.redirectToLobby(state.permissions);
    				return inputData.ZDRParamDispatchError && inputData.ZDRParamDispatchError(new Error('AuthorizationCancelled'));
    			}

    			if (state.scenario === library.Scenario.NotAuthorised) {
    				return library.redirectToLobby(state.permissions);
    			}

    			if (![library.Scenario.AuthSucceeded, library.Scenario.Continuation].includes(state.scenario)) {
    				// error?
    				return;
    			}

    			if (!Object.keys(fissionClient).length) {
    				fissionClient = state.fs;
    			}

    			await Promise.all(scopes.map(async function (e) {
    				const path = '/private/' + (e.ZDRScopeCreatorDirectory ? `Apps/${ e.ZDRScopeCreatorDirectory }/${ e.ZDRScopeDirectory }` : e.ZDRScopeDirectory);

    				if (!(await fissionClient.exists(path))) {
    					await fissionClient.mkdir(path);
    					await fissionClient.publish();
    				}
    			}));

    			fissionClient.permalinkBase = `https://${ state.username }.files.fission.name`;

    			inputData.ZDRParamDispatchConnected && inputData.ZDRParamDispatchConnected(state.username + '@fission.name', Math.random().toString());

    			inputData.ZDRParamDispatchReady();
    		})();

    		if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage()) {
    			library.on('error', function (error) {
    				if (!library.remote.online && error.message === 'Sync failed: Network request failed.') {
    					return;
    				}

    				inputData.ZDRParamDispatchError && inputData.ZDRParamDispatchError(error);
    			});

    			library.on('connected', function () {
    				inputData.ZDRParamDispatchConnected && inputData.ZDRParamDispatchConnected(library.remote.userAddress, library.remote.token);
    			});

    			library.on('network-online', function () {
    				inputData.ZDRParamDispatchOnline && inputData.ZDRParamDispatchOnline();
    			});

    			library.on('network-offline', function () {
    				inputData.ZDRParamDispatchOffline && inputData.ZDRParamDispatchOffline();
    			});

    			library.on('sync-done', function () {
    				inputData.ZDRParamDispatchSyncDidStop && inputData.ZDRParamDispatchSyncDidStop();
    			});

    			library.on('ready', function () {
    				inputData.ZDRParamDispatchReady();
    			});
    		}

    		if (ZDRStorageProtocol === mod.ZDRProtocolCustom()) {
    			Promise.resolve((library.ZDRClientPrepare || function () {})()).then(inputData.ZDRParamDispatchReady);
    		}

    		const outputData = {

    			ZDRStorageProtocol,

    			ZDRStorageClient() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library;
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return fissionClient;
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return inputData.ZDRParamLibrary;
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudConnect(inputData) {
    				if (typeof inputData !== 'string') {
    					throw new Error('ZDRErrorInputNotValid');
    				}

    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.connect(inputData);
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return library.initialize(fissionPermissions);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return library.ZDRClientConnect(inputData);
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudReconnect() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.reconnect(inputData);
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return library.initialize(fissionPermissions);
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return !library.ZDRClientReconnect ? library.ZDRClientConnect() : library.ZDRClientReconnect();
    					}),
    				})[ZDRStorageProtocol]();
    			},

    			ZDRCloudDisconnect() {
    				return ({
    					[mod.ZDRProtocolRemoteStorage()]: (function () {
    						return library.disconnect(inputData);
    					}),
    					[mod.ZDRProtocolFission()]: (function () {
    						return library.leave({
    							withoutRedirect: true,
    						});
    					}),
    					[mod.ZDRProtocolCustom()]: (function () {
    						return library.ZDRClientDisconnect(inputData);
    					}),
    				})[ZDRStorageProtocol]();
    			},

    		};

    		return scopes.reduce(function (coll, item) {
    			if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage()) {
    				library.access.claim(item.ZDRScopeDirectory, 'rw');

    				library.caching.enable(`/${ item.ZDRScopeDirectory }/`);
    			}

    			const schemas = (item.ZDRScopeSchemas || []).filter(mod._ZDRSchemaObjectValidate);

    			const _client = {
    				[mod.ZDRProtocolRemoteStorage()]: (function () {
    					return library[item.ZDRScopeDirectory][item.ZDRScopeIsPublic ? 'publicClient' : 'privateClient'];
    				}),
    				[mod.ZDRProtocolFission()]: (function () {
    					return function () {
    						return fissionClient;
    					};
    				}),
    				[mod.ZDRProtocolCustom()]: (function () {
    					return library;
    				}),
    			}[ZDRStorageProtocol]();
    			const client = mod._ZDRClientInterface(_client, ZDRStorageProtocol, inputData);

    			if (ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage() && schemas.filter(function (e) {
    					return Object.keys(e).filter(function (e) {
    						return mod._ZDRModelSyncCallbackSignatures().includes(e);
    					}).length;
    				}).length) {
    				_client.on('change', function (event) {
    					const signature = mod._ZDRModelSyncCallbackSignature(event);

    					if (!signature) {
    						return;
    					}

    					schemas.forEach(function (e) {
    						if (e.ZDRSchemaPath(e.ZDRSchemaStub(event.relativePath)) !== event.relativePath) {
    							return;
    						}

    						if (!e[signature]) {
    							return;
    						}

    						const outputData = mod._ZDRModelSyncCallbackInput(signature, event);
    						return e[signature](inputData._ZDRParamDispatchJSONPostParse ? inputData._ZDRParamDispatchJSONPostParse(outputData) : outputData);
    					});
    				});
    			}

    			const _ZDRStorageBasePath = function (inputData, pretty = false) {
    				if (typeof inputData !== 'string') {
    					throw new Error('ZDRErrorInputNotValid');
    				}

    				return ((ZDRStorageProtocol === mod.ZDRProtocolFission() ? `/${ pretty ? 'p' : (item.ZDRScopeIsPublic ? 'public' : 'private') }/${ item.ZDRScopeCreatorDirectory ? `Apps/${ item.ZDRScopeCreatorDirectory }/${ item.ZDRScopeDirectory }` : item.ZDRScopeDirectory }` : '') + inputData).slice(ZDRStorageProtocol === mod.ZDRProtocolRemoteStorage() && inputData[0] === '/' ? 1 : 0);
    			};

    			return Object.assign(coll, {
    				[item.ZDRScopeKey]: Object.assign({

    					_ZDRStorageBasePath,

    					ZDRStorageWriteFile(param1, param2, param3) {
    						if (typeof param1 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof param3 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientWriteFile(_ZDRStorageBasePath(param1), param2, param3);
    					},

    					ZDRStorageWriteObject(param1, param2) {
    						if (typeof param1 !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof param2 !== 'object' || param2 === null) {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientWriteObject(_ZDRStorageBasePath(param1), param2);
    					},

    					ZDRStorageReadFile(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientReadFile(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStorageReadObject(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientReadObject(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStorageListingObjects(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientListObjects(mod._ZDRPathFormatDirectory(_ZDRStorageBasePath(inputData)));
    					},

    					_ZDRStoragePaths(inputData) {
    						return client.ClientPaths(_ZDRStorageBasePath(inputData));
    					},

    					ZDRStoragePaths(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return this._ZDRStoragePaths(mod._ZDRPathFormatDirectory(inputData));
    					},

    					async _ZDRStoragePathsRecursive(inputData, includeFolders = false) {
    						const _this = this;
    						return uFlatten(await Promise.all((await _this.ZDRStoragePaths(inputData)).map(function (e) {
    							return mod._ZDRPathIsDirectory(e) ? _this._ZDRStoragePathsRecursive(inputData + e, includeFolders) : inputData + e;
    						}))).concat(includeFolders ? inputData : []);
    					},

    					ZDRStoragePathsRecursive(inputData, includeFolders = false) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						if (typeof includeFolders !== 'undefined') {
    							if (typeof includeFolders !== 'boolean') {
    								throw new Error('ZDRErrorInputNotValid');
    							}
    						}

    						return this._ZDRStoragePathsRecursive(mod._ZDRPathFormatDirectory(inputData), includeFolders);
    					},

    					ZDRStoragePermalink(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientPermalink(_ZDRStorageBasePath(inputData, true));
    					},

    					_ZDRStorageDeleteFile(inputData) {
    						return client.ClientDelete(inputData);
    					},

    					ZDRStorageDeleteFile(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						return client.ClientDelete(_ZDRStorageBasePath(inputData));
    					},

    					async ZDRStorageDeleteFolderRecursive(inputData) {
    						if (typeof inputData !== 'string') {
    							throw new Error('ZDRErrorInputNotValid');
    						}

    						const _this = this._ZDRStoragePathsRecursive ? this : coll[item.ZDRScopeKey];

    						await Promise.all((await _this._ZDRStoragePathsRecursive(mod._ZDRPathFormatDirectory(inputData))).map(_ZDRStorageBasePath).map(_this._ZDRStorageDeleteFile));

    						return inputData;
    					},

    				}, schemas.reduce(function (map, model) {
    					return Object.assign(map, {
    						[model.ZDRSchemaKey]: Object.assign({

    							ZDRModelPath(inputData) {
    								if (typeof inputData !== 'object' || inputData === null) {
    									throw new Error('ZDRErrorInputNotValid');
    								}

    								return model.ZDRSchemaPath(...arguments);
    							},

    							ZDRModelWriteObject(inputData) {
    								if (model.ZDRSchemaDispatchValidate) {
    									const outputData = model.ZDRSchemaDispatchValidate(...arguments);

    									if (outputData) {
    										return Promise.reject(outputData);
    									}
    								}

    								return coll[item.ZDRScopeKey].ZDRStorageWriteObject(mod._ZDRPathFormatPath(map[model.ZDRSchemaKey].ZDRModelPath(...arguments)), inputData);
    							},

    							async _ZDRModelListObjects() {
    								const _this = this;

    								return (await coll[item.ZDRScopeKey].ZDRStoragePathsRecursive('/')).filter(function (e) {
    									return mod._ZDRPathFormatPath(e) === mod._ZDRPathFormatPath(_this.ZDRModelPath(model.ZDRSchemaStub(e)));
    								});
    							},

    							async ZDRModelListObjects() {
    								return Promise.all((await this._ZDRModelListObjects()).map(coll[item.ZDRScopeKey].ZDRStorageReadObject));
    							},

    							async ZDRModelDeleteObject(inputData) {
    								await coll[item.ZDRScopeKey].ZDRStorageDeleteFile(mod._ZDRPathFormatPath(map[model.ZDRSchemaKey].ZDRModelPath(inputData)));

    								return inputData;
    							},

    						}, Object.entries(model.ZDRSchemaMethods || {}).reduce(function (coll, [key, value]) {
    							if (typeof value !== 'function') {
    								throw new Error('ZDRErrorInputNotFunction');
    							}

    							return Object.assign(coll, {
    								[key]: value.bind(outputData),
    							});
    						}, {})),
    					});
    				}, {})),
    			});
    		}, outputData);
    	},

    	ZDRWrap(inputData = {}) {
    		const _this = this;
    		return new Promise(async function (res, rej) {
    			try {
    				const outputData = _this._ZDRWrap(Object.assign(inputData, {
    					ZDRParamDispatchReady: (function () {
    						setTimeout(function () {
    							return res(outputData);
    						});
    					}),
    				}));
    			} catch (error) {
    				rej(error);
    			}
    		});
    	},

    	ZDRPreferenceProtocol(inputData, _localStorage) {
    		if (!mod._ZDRProtocols().includes(inputData)) {
    			throw new Error('ZDRErrorInputNotValid');
    		}

    		const api = typeof localStorage === 'object' ? localStorage : _localStorage;
    		if (!api.getItem('ZDR_PREFERENCE_PROTOCOL')) {
    			api.setItem('ZDR_PREFERENCE_PROTOCOL', inputData);
    		}

    		return api.getItem('ZDR_PREFERENCE_PROTOCOL');
    	},

    	ZDRPreferenceProtocolClear(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).removeItem('ZDR_PREFERENCE_PROTOCOL');
    	},

    	ZDRPreferenceProtocolMigrate(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).getItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE');
    	},

    	ZDRPreferenceProtocolMigrateClear(_localStorage) {
    		return (typeof localStorage === 'object' ? localStorage : _localStorage).removeItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE');
    	},

    	ZDRPreferenceProtocolConnect(inputData, _localStorage) {
    		const protocol = this.ZDRProtocolForIdentity(inputData);

    		const api = typeof localStorage === 'object' ? localStorage : _localStorage;

    		if (api.getItem('ZDR_PREFERENCE_PROTOCOL') && (api.getItem('ZDR_PREFERENCE_PROTOCOL') !== protocol)) {
    			api.setItem('ZDR_PREFERENCE_PROTOCOL_MIGRATE', api.getItem('ZDR_PREFERENCE_PROTOCOL'));
    		}

    		api.setItem('ZDR_PREFERENCE_PROTOCOL', protocol);

    		return protocol;
    	},

    	ZDRLauncherFakeItemProxy() {
    		return {
    			LCHRecipeName: 'ZDRLauncherFakeItemProxy',
    			LCHRecipeCallback() {},
    		};
    	},

    	ZDRLauncherItemFakeDispatchError(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchError',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchError(new Error('ZDR_FAKE_CLOUD_ERROR'));
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchConnected(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchConnected',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchConnected('ZDR_FAKE_CLOUD_IDENTITY', 'ZDR_FAKE_CLOUD_TOKEN');
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchOnline(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchOnline',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchOnline();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchOffline(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchOffline',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchOffline();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchSyncDidStart(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchSyncDidStart',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchSyncDidStart();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchSyncDidStop(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchSyncDidStop',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchSyncDidStop();
    			},
    		};
    	},

    	ZDRLauncherItemFakeDispatchDisconnected(inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return {
    			LCHRecipeName: 'ZDRLauncherItemFakeDispatchDisconnected',
    			LCHRecipeCallback() {
    				return inputData.ZDRParamDispatchConnected(null);
    			},
    		};
    	},

    	ZDRRecipes(params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamMod !== 'object' || params.ParamMod === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.ParamSpecUI !== 'boolean') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		return [
    			mod.ZDRLauncherFakeItemProxy(),
    			mod.ZDRLauncherItemFakeDispatchError(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchConnected(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchOnline(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchOffline(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchSyncDidStart(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchSyncDidStop(params.ParamMod),
    			mod.ZDRLauncherItemFakeDispatchDisconnected(params.ParamMod),
    		].filter(function (e) {
    			if (params.ParamSpecUI) {
    				return true;
    			}

    			return !(e.LCHRecipeSignature || e.LCHRecipeName).match(/Fake/);
    		});
    	},

    };

    Object.assign(exports, mod);
    });

    var _OLSKInputClear = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKInputClear\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKInputClear-oval2\" stroke=\"rgb(170, 170, 170)\" stroke-width=\"1.5\" fill=\"rgb(170, 170, 170)\" cx=\"8\" cy=\"8\" r=\"5.5\" />\n    <path id=\"_OLSKInputClear-bezier\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,6 L 10,10\" />\n    <path id=\"_OLSKInputClear-bezier2\" stroke=\"rgb(255, 255, 255)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6,10 L 10,6\" />\n</svg>\n";

    /* node_modules/OLSKInputWrapper/main.svelte generated by Svelte v3.38.2 */
    const file = "node_modules/OLSKInputWrapper/main.svelte";

    // (14:0) {#if OLSKInputWrapperValue}
    function create_if_block(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKInputWrapperClearButtonImage");
    			add_location(div, file, 15, 2, 565);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "OLSKInputWrapperClearButton OLSKDecorTappable OLSKDecorButtonNoStyle OLSKToolbarButton svelte-1clh3fc");
    			attr_dev(button, "title", button_title_value = main_1("OLSKInputWrapperClearButtonText"));
    			add_location(button, file, 14, 1, 292);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKInputClear;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "mousedown", mousedown_handler, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*OLSKInputWrapperDispatchClear*/ ctx[1])) /*OLSKInputWrapperDispatchClear*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(14:0) {#if OLSKInputWrapperValue}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div;
    	let t;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
    	let if_block = /*OLSKInputWrapperValue*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "OLSKInputWrapper svelte-1clh3fc");
    			add_location(div, file, 9, 0, 216);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
    				}
    			}

    			if (/*OLSKInputWrapperValue*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const mousedown_handler = event => event.preventDefault();

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['default']);
    	let { OLSKInputWrapperValue } = $$props;
    	let { OLSKInputWrapperDispatchClear } = $$props;
    	const writable_props = ["OLSKInputWrapperValue", "OLSKInputWrapperDispatchClear"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKInputWrapperValue" in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ("OLSKInputWrapperDispatchClear" in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKInputWrapperValue,
    		OLSKInputWrapperDispatchClear,
    		OLSKLocalized: main_1,
    		_OLSKInputClear
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKInputWrapperValue" in $$props) $$invalidate(0, OLSKInputWrapperValue = $$props.OLSKInputWrapperValue);
    		if ("OLSKInputWrapperDispatchClear" in $$props) $$invalidate(1, OLSKInputWrapperDispatchClear = $$props.OLSKInputWrapperDispatchClear);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKInputWrapperValue, OLSKInputWrapperDispatchClear, $$scope, slots];
    }

    class Main extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			OLSKInputWrapperValue: 0,
    			OLSKInputWrapperDispatchClear: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKInputWrapperValue*/ ctx[0] === undefined && !("OLSKInputWrapperValue" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperValue'");
    		}

    		if (/*OLSKInputWrapperDispatchClear*/ ctx[1] === undefined && !("OLSKInputWrapperDispatchClear" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKInputWrapperDispatchClear'");
    		}
    	}

    	get OLSKInputWrapperValue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperValue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKInputWrapperDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKInputWrapperDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const main$e = {

    	OLSKCollectionAPI (params) {
    		if (typeof params !== 'object' || params === null) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCollectionSortFunction !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params._OLSKCollectionKeyFunction !== 'function') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof params.OLSKCollectionItems !== 'undefined') {
    			if (!Array.isArray(params.OLSKCollectionItems)) {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    		} else {
    			params.OLSKCollectionItems = [];
    		}

    		if (typeof params.OLSKCollectionDispatchChange !== 'undefined') {
    			if (typeof params.OLSKCollectionDispatchChange !== 'function') {
    				throw new Error('OLSKErrorInputNotValid');
    			}
    		}

    		const mod = {

    			ValueItemsAll (inputData) {
    				params.OLSKCollectionItems.splice(...[0, params.OLSKCollectionItems.length].concat(inputData));

    				params.OLSKCollectionDispatchChange && params.OLSKCollectionDispatchChange();
    			},

    		};

    		const api = {

    			// DATA
    		
    			OLSKCollectionDataItemsAll() {
    				return params.OLSKCollectionItems.slice();
    			},

    			// CONTROL

    			OLSKCollectionInsert (inputData) {
    				mod.ValueItemsAll([inputData].concat(params.OLSKCollectionItems));

    				return inputData;
    			},

    			OLSKCollectionUpdate (inputData) {
    				mod.ValueItemsAll(params.OLSKCollectionItems.map(function (e) {
    					return params._OLSKCollectionKeyFunction(e) === params._OLSKCollectionKeyFunction(inputData) ? inputData : e;
    				}));

    				return inputData;
    			},
    			
    			OLSKCollectionRemove (inputData) {
    				mod.ValueItemsAll(params.OLSKCollectionItems.filter(function (e) {
    					return params._OLSKCollectionKeyFunction(e) !== params._OLSKCollectionKeyFunction(inputData);
    				}));

    				return inputData;
    			},

    			OLSKCollectionSort () {
    				mod.ValueItemsAll(params.OLSKCollectionItems.sort(params.OLSKCollectionSortFunction));
    			},

    			_OLSKCollectionDebugReassign (inputData) {
    				params.OLSKCollectionItems = inputData;
    			},
    		
    		};
    		
    		return api;
    	},

    	OLSKCollectionConstrainIndex (param1, param2) {
    		if (!Array.isArray(param1)) {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (typeof param2 !== 'number') {
    			throw new Error('OLSKErrorInputNotValid');
    		}

    		if (param2 < 0) {
    			return param1.length - 1;
    		}

    		if (param2 >= param1.length) {
    			return 0;
    		}

    		return param2;
    	},

    };

    var _OLSKSharedAndroidMore = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedAndroidMore\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKSharedAndroidMore-oval\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"8\" r=\"1.5\" />\n    <circle id=\"_OLSKSharedAndroidMore-oval2\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"3.5\" r=\"1.5\" />\n    <circle id=\"_OLSKSharedAndroidMore-oval3\" stroke=\"none\" fill=\"rgb(0, 0, 0)\" cx=\"8\" cy=\"12.5\" r=\"1.5\" />\n</svg>\n";

    var _OLSKSharedApropos = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedApropos\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    \n    <text  fill=\"rgb(0, 0, 0)\" font-family=\"Georgia, Times, 'Times New Roman', serif\" font-size=\"17\" x=\"5.51\" y=\"-0\" text-anchor=\"middle\"><tspan x=\"8\" y=\"14\">i</tspan></text>\n</svg>\n";

    var _OLSKSharedArchive = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedArchive\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedArchive-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,14 L 14,14 14,5 2,5 2,14 Z M 2,14\" />\n    <path id=\"_OLSKSharedArchive-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,5 L 15,5 15,2 1,2 1,5 Z M 1,5\" />\n    <path id=\"_OLSKSharedArchive-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(255, 255, 255)\" d=\"M 5.38,8.95 L 10.62,8.95\" />\n</svg>\n";

    var _OLSKSharedBack = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedBack\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedBack-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11,1 L 4,8 11,15\" />\n</svg>\n";

    var _OLSKSharedClone = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedClone\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedClone-group2\" clip-path=\"url(#_OLSKSharedClone-clip)\">\n        <clipPath id=\"_OLSKSharedClone-clip\">\n            <path d=\"M 12,0.44 C 12.51,0.61 12.87,0.95 13.04,1.41 13.06,1.47 13.06,1.47 13.07,1.51 13.14,1.78 13.15,1.95 13.15,2.53 13.15,2.72 13.15,2.72 13.15,3.5 L 13.15,4.15 12.5,4.15 5.03,4.15 C 4.57,4.15 4.47,4.16 4.35,4.19 4.34,4.19 4.34,4.19 4.33,4.19 4.28,4.21 4.21,4.28 4.19,4.35 4.19,4.34 4.19,4.34 4.19,4.35 4.16,4.47 4.15,4.57 4.15,5.03 4.15,6.08 4.15,6.08 4.15,9.25 4.15,11.08 4.15,11.08 4.15,12.5 L 4.15,13.15 3.5,13.15 2.53,13.15 C 1.9,13.15 1.73,13.14 1.47,13.05 0.98,12.88 0.63,12.54 0.46,12.09 0.36,11.77 0.35,11.59 0.35,10.97 L 0.35,2.53 0.35,2.53 C 0.35,1.9 0.36,1.73 0.45,1.47 0.62,0.98 0.96,0.63 1.41,0.46 1.73,0.36 1.91,0.35 2.52,0.35 L 10.97,0.35 10.97,0.35 C 11.6,0.35 12,0.44 12,0.44 Z M 12,0.44\" />\n        </clipPath>\n        <rect id=\"_OLSKSharedClone-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"1\" y=\"1\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    </g>\n    <rect id=\"_OLSKSharedClone-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"3.5\" y=\"3.5\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <g id=\"_OLSKSharedClone-group\">\n        <path id=\"_OLSKSharedClone-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.5,6.5 L 9.5,12.5\" />\n        <path id=\"_OLSKSharedClone-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6.5,9.5 L 12.5,9.5\" />\n    </g>\n</svg>\n";

    var _OLSKSharedCloud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloud\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloud-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.44,3.25 C 8.04,3.25 7.01,4.06 6.52,5.03 L 6.53,5.03 C 6.44,5.21 6.22,5.28 6.05,5.19 5.44,4.89 4.72,4.92 4.15,5.26 3.58,5.61 3.15,6.24 3.15,7.21 L 3.15,7.21 C 3.15,7.38 3.03,7.53 2.86,7.56 1.78,7.75 1,8.83 1,9.91 1,11.21 2.02,12.25 3.69,12.25 L 12.49,12.25 C 13.88,12.25 15,11.13 15,9.73 15,8.5 14.13,7.48 12.98,7.25 L 12.97,7.25 C 12.79,7.21 12.66,7.04 12.68,6.86 12.86,5.08 11.46,3.25 9.44,3.25 Z M 9.44,3.25\" />\n</svg>\n";

    var _OLSKSharedCloudError = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloudError\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloudError-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.31,12 L 12.49,12 C 13.88,12 15,10.88 15,9.48 15,8.25 14.13,7.23 12.98,7 L 12.97,7 C 12.79,6.96 12.66,6.79 12.68,6.61 12.86,4.83 11.46,3 9.44,3 8.04,3 7.01,3.81 6.52,4.78 L 6.53,4.78 C 6.44,4.96 6.22,5.03 6.05,4.94 5.44,4.64 4.72,4.67 4.15,5.01 3.58,5.36 3.15,5.99 3.15,6.96 L 3.15,6.96 C 3.15,7.13 3.03,7.28 2.86,7.31 1.78,7.5 1,8.58 1,9.66 1,10.96 2.02,12 3.69,12 L 4.86,12\" />\n    <g id=\"_OLSKSharedCloudError-group\">\n    </g>\n    <path id=\"_OLSKSharedCloudError-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,8 L 8,11\" />\n    <path id=\"_OLSKSharedCloudError-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,13.5 L 8,13.5\" />\n</svg>\n";

    var _OLSKSharedCloudOffline = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCloudOffline\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCloudOffline-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.81,12 L 12.49,12 C 13.88,12 15,10.88 15,9.48 15,8.25 14.13,7.23 12.98,7 L 12.97,7 C 12.79,6.96 12.66,6.79 12.68,6.61 12.86,4.83 11.46,3 9.44,3 8.04,3 7.01,3.81 6.52,4.78 L 6.53,4.78 C 6.44,4.96 6.22,5.03 6.05,4.94 5.44,4.64 4.72,4.67 4.15,5.01 3.58,5.36 3.15,5.99 3.15,6.96 L 3.15,6.96 C 3.15,7.13 3.03,7.28 2.86,7.31 1.78,7.5 1,8.58 1,9.66 1,10.96 2.02,12 3.69,12 L 4.86,12\" />\n    <g id=\"_OLSKSharedCloudOffline-group\" transform=\"translate(8.3, 12.11) rotate(90)\" >\n        <path id=\"_OLSKSharedCloudOffline-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.68,-1.68 L -1.68,1.68\" />\n        <path id=\"_OLSKSharedCloudOffline-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.35,-0 L 0,3.35\" transform=\"translate(-1.68, 1.68) rotate(-90)\"  />\n    </g>\n</svg>\n";

    var _OLSKSharedCreate = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedCreate\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedCreate-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,1 L 8,15\" />\n    <path id=\"_OLSKSharedCreate-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,8 L 15,8\" />\n</svg>\n";

    var _OLSKSharedDiscard = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDiscard\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedDiscard-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 4.53,6 L 13,6 13,13.47 C 13,13.91 13,14.13 12.93,14.33 L 12.93,14.37 C 12.83,14.63 12.63,14.83 12.37,14.93 12.13,15 11.91,15 11.47,15 L 4.53,15 C 4.09,15 3.87,15 3.67,14.93 L 3.63,14.93 C 3.37,14.83 3.17,14.63 3.07,14.37 3,14.13 3,13.91 3,13.47 L 3,6 Z M 4.53,6\" />\n    <path id=\"_OLSKSharedDiscard-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,3.5 L 15,3.5\" />\n    <path id=\"_OLSKSharedDiscard-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 8,1 L 8,1 C 9.75,1 9.75,1 9.75,1 L 9.75,1 C 10.44,1 11,1.56 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 L 11,2.25 C 11,2.25 11,2.25 11,2.25 L 11,3.5 5,3.5 5,2.25 C 5,1.56 5.56,1 6.25,1 6.25,1 6.25,1 6.25,1 L 8,1 Z M 8,1\" />\n    <path id=\"_OLSKSharedDiscard-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.5,5.5 L 5.5,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,6 L 8,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 10.5,5.5 L 10.5,15\" />\n</svg>\n";

    var _OLSKSharedDismiss = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDismiss\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedDismiss-group\" transform=\"translate(8, 8) rotate(-45)\" >\n        <path id=\"_OLSKSharedDismiss-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 0,-7 L 0,7\" />\n        <path id=\"_OLSKSharedDismiss-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M -7,0 L 7,0\" />\n    </g>\n</svg>\n";

    var _OLSKSharedEdit = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedEdit\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedEdit-group\">\n        <path id=\"_OLSKSharedEdit-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13.12,10.17 L 13.12,12.43 C 13.12,13.05 13.12,13.37 13.03,13.65 L 13.01,13.7 C 12.88,14.07 12.58,14.36 12.2,14.49 11.86,14.6 11.54,14.6 10.9,14.6 L 3.72,14.6 C 3.08,14.6 2.76,14.6 2.47,14.5 L 2.42,14.49 C 2.04,14.36 1.75,14.07 1.61,13.7 1.5,13.37 1.5,13.05 1.5,12.43 L 1.5,5.42 C 1.5,4.79 1.5,4.48 1.6,4.2 L 1.61,4.14 C 1.75,3.78 2.04,3.49 2.42,3.35 2.76,3.25 3.08,3.25 3.72,3.25 L 8.01,3.25\" />\n        <path id=\"_OLSKSharedEdit-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.09,-8.67 C 1.13,-8.55 1.13,-8.43 1.13,-8.21 L 1.58,0.46 C 1.58,0.53 1.58,0.61 1.58,0.73 1.58,1.5 0.89,2.54 0.21,2.54 -0.48,2.54 -1.16,1.5 -1.16,0.73 -1.16,0.63 -1.16,0.46 -1.16,0.46 L -1.61,-8.21 C -1.61,-8.43 -1.61,-8.55 -1.58,-8.65 -1.52,-8.81 -1.41,-8.91 -1.27,-8.96 -1.14,-9 0.29,-9 0.29,-9 0.53,-9 0.65,-9 0.76,-8.97 0.76,-8.97 1.04,-8.81 1.09,-8.67 Z M 1.09,-8.67\" transform=\"translate(7.76, 8.79) rotate(45)\"  />\n    </g>\n</svg>\n";

    var _OLSKSharediOSA2HS = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharediOSA2HS\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <rect id=\"_OLSKSharediOSA2HS-rectangle2\" stroke=\"rgb(0, 0, 0)\" fill=\"rgb(255, 255, 255)\" x=\"1\" y=\"1\" width=\"14\" height=\"14\" rx=\"1\" />\n    <g id=\"_OLSKSharediOSA2HS-group\">\n        <path id=\"_OLSKSharediOSA2HS-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,5 L 8,11\" />\n        <path id=\"_OLSKSharediOSA2HS-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5,8 L 11,8\" />\n    </g>\n</svg>\n";

    var _OLSKSharediOSShare = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharediOSShare\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharediOSShare-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"4\" fill=\"none\" d=\"M 10.84,5.96 L 12.54,5.96 C 13.18,5.96 13.69,6.46 13.69,7.09 L 13.69,13.98 C 13.69,14.61 13.18,15.11 12.54,15.11 L 3.85,15.11 C 3.21,15.11 2.69,14.61 2.69,13.98 L 2.69,7.09 C 2.69,6.46 3.21,5.96 3.85,5.96 L 5.5,5.96\" />\n    <path id=\"_OLSKSharediOSShare-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.94,3.56 L 8.19,0.5 11.44,3.56\" />\n    <path id=\"_OLSKSharediOSShare-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8.19,9.91 L 8.19,1.5\" />\n</svg>\n";

    var _OLSKSharedLanguage = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLanguage\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <circle id=\"_OLSKSharedLanguage-oval\" stroke=\"rgb(0, 0, 0)\" fill=\"none\" cx=\"8\" cy=\"8\" r=\"6\" />\n    <path id=\"_OLSKSharedLanguage-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,8 L 14,8\" />\n    <path id=\"_OLSKSharedLanguage-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,14 L 8,2\" />\n    <path id=\"_OLSKSharedLanguage-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-linejoin=\"bevel\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.24,3.75 C 11.15,4.83 9.65,5.5 8,5.5 6.35,5.5 4.85,4.83 3.76,3.75 4.09,3.42 4.46,3.13 4.86,2.89 5.77,2.32 6.85,2 8,2 9.65,2 11.15,2.67 12.24,3.75 Z M 12.24,3.75\" />\n    <path id=\"_OLSKSharedLanguage-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-linejoin=\"bevel\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.24,12.25 C 11.15,13.33 9.65,14 8,14 6.35,14 4.85,13.33 3.76,12.25 4.09,11.92 4.46,11.63 4.86,11.39 5.77,10.82 6.85,10.5 8,10.5 9.65,10.5 11.15,11.17 12.24,12.25 Z M 12.24,12.25\" />\n    <ellipse id=\"_OLSKSharedLanguage-oval4\" stroke=\"rgb(0, 0, 0)\" fill=\"none\" cx=\"8\" cy=\"8\" rx=\"3\" ry=\"5.75\" />\n</svg>\n";

    var _OLSKSharedLauncher = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLauncher\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedLauncher-group\" transform=\"scale(1.07, 1.07)\" >\n        <path id=\"_OLSKSharedLauncher-prompt\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8.25,2.5 L 13.25,7.5 8.25,12.5\" />\n        <g id=\"_OLSKSharedLauncher-linesSolid\">\n            <path id=\"_OLSKSharedLauncher-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,5.5 L 8,5.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.5,7.5 L 10,7.5\" />\n            <path id=\"_OLSKSharedLauncher-bezier7\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.2\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2.5,9.5 L 7.5,9.5\" />\n        </g>\n    </g>\n</svg>\n";

    var _OLSKSharedLock = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedLock\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedLock-group\">\n        <rect id=\"_OLSKSharedLock-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" fill=\"none\" x=\"2.76\" y=\"7.56\" width=\"10.51\" height=\"6.69\" rx=\"1\" />\n        <path id=\"_OLSKSharedLock-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,1.72 L 8,1.72 8,1.72 8,1.72 C 9.94,1.72 11.5,3.38 11.5,5.44 L 11.5,5.44 11.5,5.44 11.5,5.7 11.5,7.56 4.5,7.56 4.5,5.7 C 4.5,5.44 4.5,5.44 4.5,5.44 L 4.5,5.44 C 4.5,3.38 6.07,1.72 8,1.72 L 8,1.72 8,1.72 Z M 8,1.72\" />\n    </g>\n</svg>\n";

    var _OLSKSharedReload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedReload\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedReload-oval2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,9 C 13,11.76 10.76,14 8,14 5.24,14 3,11.76 3,9 3,6.24 5.24,4 8,4\" />\n    <path id=\"_OLSKSharedReload-bezier8\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(0, 0, 0)\" d=\"M 8,2 L 8,6 11,4 8,2\" />\n</svg>\n";

    var _OLSKSharedStash = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStash\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStash-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,8.03 L 12.79,8.03\" />\n    <path id=\"_OLSKSharedStash-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,11.53 L 12.79,11.53\" />\n    <path id=\"_OLSKSharedStash-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.79,4.53 L 12.79,4.53\" />\n    <path id=\"_OLSKSharedStash-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,8.03 L 3.29,8.03\" />\n    <path id=\"_OLSKSharedStash-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,11.53 L 3.29,11.53\" />\n    <path id=\"_OLSKSharedStash-bezier6\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.29,4.53 L 3.29,4.53\" />\n</svg>\n";

    var _OLSKSharedStashSelected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStashSelected\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStashSelected-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,9 L 6,13 13,5\" />\n</svg>\n";

    var _OLSKSharedStorageDisconnect = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedStorageDisconnect\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedStorageDisconnect-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.44,3.25 C 8.04,3.25 7.01,4.06 6.52,5.03 L 6.53,5.03 C 6.44,5.21 6.22,5.28 6.05,5.19 5.44,4.89 4.72,4.92 4.15,5.26 3.58,5.61 3.15,6.24 3.15,7.21 L 3.15,7.21 C 3.15,7.38 3.03,7.53 2.86,7.56 1.78,7.75 1,8.83 1,9.91 1,11.21 2.02,12.25 3.69,12.25 L 12.49,12.25 C 13.88,12.25 15,11.13 15,9.73 15,8.5 14.13,7.48 12.98,7.25 L 12.97,7.25 C 12.79,7.21 12.66,7.04 12.68,6.86 12.86,5.08 11.46,3.25 9.44,3.25 Z M 9.44,3.25\" />\n    <path id=\"_OLSKSharedStorageDisconnect-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12,1.5 L 4.5,14.5\" />\n</svg>\n";

    var _OLSKSharedSyncStart = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedSyncStart\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedSyncStart-group\" transform=\"\" >\n        <path id=\"_OLSKSharedSyncStart-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 10.5,6.5\" />\n        <path id=\"_OLSKSharedSyncStart-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 14,4.5\" />\n        <path id=\"_OLSKSharedSyncStart-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.86,8.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStart-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.83,10.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStart-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.85,9.21 C 12.31,11.39 10.34,13 8,13 5.66,13 3.69,11.39 3.15,9.21\" />\n        <path id=\"_OLSKSharedSyncStart-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.25,6.42 C 3.91,4.43 5.79,3 8,3 10.14,3 11.97,4.35 12.68,6.24\" />\n    </g>\n</svg>\n";

    var _OLSKSharedSyncStop = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedSyncStop\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedSyncStop-group\" transform=\"\" >\n        <path id=\"_OLSKSharedSyncStop-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 10.5,6.5\" />\n        <path id=\"_OLSKSharedSyncStop-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 13,6.5 L 14,4.5\" />\n        <path id=\"_OLSKSharedSyncStop-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 4.86,8.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStop-bezier5\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1.83,10.83 L 2.83,8.83\" />\n        <path id=\"_OLSKSharedSyncStop-oval\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 12.85,9.21 C 12.31,11.39 10.34,13 8,13 5.66,13 3.69,11.39 3.15,9.21\" />\n        <path id=\"_OLSKSharedSyncStop-oval3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 3.25,6.42 C 3.91,4.43 5.79,3 8,3 10.14,3 11.97,4.35 12.68,6.24\" />\n    </g>\n    <path id=\"_OLSKSharedSyncStop-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11.62,1.66 L 3.96,13.91\" />\n</svg>\n";

    var _OLSKSharedUnarchive = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedUnarchive\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedUnarchive-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 2,14 L 14,14 14,5 2,5 2,14 Z M 2,14\" />\n    <path id=\"_OLSKSharedUnarchive-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,5 L 15,5 15,2 1,2 1,5 Z M 1,5\" />\n    <path id=\"_OLSKSharedUnarchive-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"rgb(255, 255, 255)\" d=\"M 5.38,8.95 L 10.62,8.95\" />\n    <path id=\"_OLSKSharedUnarchive-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,15 L 15,1\" />\n</svg>\n";

    var OLSKUIAssets = {

    	_OLSKInputClear,
    	_OLSKSharedAndroidMore,
    	_OLSKSharedApropos,
    	_OLSKSharedArchive,
    	_OLSKSharedBack,
    	_OLSKSharedClone,
    	_OLSKSharedCloud,
    	_OLSKSharedCloudError,
    	_OLSKSharedCloudOffline,
    	_OLSKSharedCreate,
    	_OLSKSharedDiscard,
    	_OLSKSharedDismiss,
    	_OLSKSharedEdit,
    	_OLSKSharediOSA2HS,
    	_OLSKSharediOSShare,
    	_OLSKSharedLanguage,
    	_OLSKSharedLauncher,
    	_OLSKSharedLock,
    	_OLSKSharedReload,
    	_OLSKSharedStash,
    	_OLSKSharedStashSelected,
    	_OLSKSharedStorageDisconnect,
    	_OLSKSharedSyncStart,
    	_OLSKSharedSyncStop,
    	_OLSKSharedUnarchive,

    };

    /* node_modules/OLSKCollection/main.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1 } = globals;
    const file$1 = "node_modules/OLSKCollection/main.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    const get_OLSKCollectionItem_slot_changes = dirty => ({
    	OLSKCollectionItem: dirty & /*mod, OLSKCollectionItems*/ 65
    });

    const get_OLSKCollectionItem_slot_context = ctx => ({ OLSKCollectionItem: /*item*/ ctx[22] });
    const get_OLSKCollectionEmpty_slot_changes = dirty => ({});
    const get_OLSKCollectionEmpty_slot_context = ctx => ({});

    // (153:0) {#if !OLSKCollectionItems.length }
    function create_if_block_2(ctx) {
    	let div;
    	let current;
    	const OLSKCollectionEmpty_slot_template = /*#slots*/ ctx[16].OLSKCollectionEmpty;
    	const OLSKCollectionEmpty_slot = create_slot(OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[15], get_OLSKCollectionEmpty_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.c();
    			attr_dev(div, "class", "OLSKCollectionEmpty");
    			attr_dev(div, "aria-hidden", "true");
    			add_location(div, file$1, 153, 1, 3755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKCollectionEmpty_slot) {
    				OLSKCollectionEmpty_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionEmpty_slot) {
    				if (OLSKCollectionEmpty_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
    					update_slot(OLSKCollectionEmpty_slot, OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[15], dirty, get_OLSKCollectionEmpty_slot_changes, get_OLSKCollectionEmpty_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionEmpty_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionEmpty_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(153:0) {#if !OLSKCollectionItems.length }",
    		ctx
    	});

    	return block;
    }

    // (162:1) {#if key }
    function create_if_block_1(ctx) {
    	let div;
    	let t_value = /*key*/ ctx[19] + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "OLSKCollectionChunkHeading OLSKStickyHeader");
    			add_location(div, file$1, 162, 2, 3970);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 64 && t_value !== (t_value = /*key*/ ctx[19] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(162:1) {#if key }",
    		ctx
    	});

    	return block;
    }

    // (169:4) {#if modPublic._OLSKCollectionStashEnabled }
    function create_if_block$1(ctx) {
    	let div1;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedStashSelected + "";

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "OLSKCollectionItemStashStatusImage svelte-foe401");
    			add_location(div0, file$1, 170, 6, 4707);
    			attr_dev(div1, "class", "OLSKCollectionItemStashStatus svelte-foe401");
    			add_location(div1, file$1, 169, 5, 4657);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(169:4) {#if modPublic._OLSKCollectionStashEnabled }",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#each (key ? mod._ValueItemsChunked[key] : OLSKCollectionItems) as item }
    function create_each_block_1(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let div_class_value;
    	let div_aria_label_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*modPublic*/ ctx[1]._OLSKCollectionStashEnabled && create_if_block$1(ctx);
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[16].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[15], get_OLSKCollectionItem_slot_context);

    	function click_handler() {
    		return /*click_handler*/ ctx[17](/*item*/ ctx[22]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    			t1 = space();
    			attr_dev(div, "class", div_class_value = "OLSKCollectionItem " + /*OLSKCollectionItemClass*/ ctx[5] + " svelte-foe401");
    			attr_dev(div, "aria-label", div_aria_label_value = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[2](/*item*/ ctx[22]));
    			attr_dev(div, "role", "button");
    			toggle_class(div, "OLSKCollectionItemStash", /*modPublic*/ ctx[1]._OLSKCollectionStashItems.includes(/*item*/ ctx[22]));
    			toggle_class(div, "OLSKCollectionItemLocus", /*item*/ ctx[22] === /*OLSKCollectionItemsLocus*/ ctx[4]);
    			add_location(div, file$1, 167, 3, 4169);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);

    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(div, null);
    			}

    			append_dev(div, t1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*modPublic*/ ctx[1]._OLSKCollectionStashEnabled) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, mod, OLSKCollectionItems*/ 32833)) {
    					update_slot(OLSKCollectionItem_slot, OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[15], dirty, get_OLSKCollectionItem_slot_changes, get_OLSKCollectionItem_slot_context);
    				}
    			}

    			if (!current || dirty & /*OLSKCollectionItemClass*/ 32 && div_class_value !== (div_class_value = "OLSKCollectionItem " + /*OLSKCollectionItemClass*/ ctx[5] + " svelte-foe401")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKCollectionItemAccessibilitySummaryFunction, mod, OLSKCollectionItems*/ 69 && div_aria_label_value !== (div_aria_label_value = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[2](/*item*/ ctx[22]))) {
    				attr_dev(div, "aria-label", div_aria_label_value);
    			}

    			if (dirty & /*OLSKCollectionItemClass, modPublic, mod, undefined, OLSKCollectionItems*/ 99) {
    				toggle_class(div, "OLSKCollectionItemStash", /*modPublic*/ ctx[1]._OLSKCollectionStashItems.includes(/*item*/ ctx[22]));
    			}

    			if (dirty & /*OLSKCollectionItemClass, mod, undefined, OLSKCollectionItems, OLSKCollectionItemsLocus*/ 113) {
    				toggle_class(div, "OLSKCollectionItemLocus", /*item*/ ctx[22] === /*OLSKCollectionItemsLocus*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(167:2) {#each (key ? mod._ValueItemsChunked[key] : OLSKCollectionItems) as item }",
    		ctx
    	});

    	return block;
    }

    // (159:0) {#each (mod._ValueItemsChunks || [undefined]) as key }
    function create_each_block(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let current;
    	let if_block = /*key*/ ctx[19] && create_if_block_1(ctx);

    	let each_value_1 = /*key*/ ctx[19]
    	? /*mod*/ ctx[6]._ValueItemsChunked[/*key*/ ctx[19]]
    	: /*OLSKCollectionItems*/ ctx[0];

    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			attr_dev(div0, "class", "OLSKCollectionChunkItems");
    			add_location(div0, file$1, 165, 1, 4050);
    			attr_dev(div1, "class", "OLSKCollectionChunk");
    			add_location(div1, file$1, 160, 0, 3922);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*key*/ ctx[19]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					if_block.m(div1, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*OLSKCollectionItemClass, OLSKCollectionItemAccessibilitySummaryFunction, mod, undefined, OLSKCollectionItems, modPublic, OLSKCollectionItemsLocus, OLSKCollectionDispatchClick, $$scope, OLSKUIAssets*/ 32895) {
    				each_value_1 = /*key*/ ctx[19]
    				? /*mod*/ ctx[6]._ValueItemsChunked[/*key*/ ctx[19]]
    				: /*OLSKCollectionItems*/ ctx[0];

    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(159:0) {#each (mod._ValueItemsChunks || [undefined]) as key }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[16].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
    	let if_block = !/*OLSKCollectionItems*/ ctx[0].length && create_if_block_2(ctx);
    	let each_value = /*mod*/ ctx[6]._ValueItemsChunks || [undefined];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "OLSKCollection");
    			add_location(div, file$1, 148, 0, 3674);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			append_dev(div, t0);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					window,
    					"keydown",
    					function () {
    						if (is_function(/*mod*/ ctx[6].InterfaceWindowDidKeydown)) /*mod*/ ctx[6].InterfaceWindowDidKeydown.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[15], dirty, null, null);
    				}
    			}

    			if (!/*OLSKCollectionItems*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*OLSKCollectionItems*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t1);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*mod, undefined, OLSKCollectionItems, OLSKCollectionItemClass, OLSKCollectionItemAccessibilitySummaryFunction, modPublic, OLSKCollectionItemsLocus, OLSKCollectionDispatchClick, $$scope, OLSKUIAssets*/ 32895) {
    				each_value = /*mod*/ ctx[6]._ValueItemsChunks || [undefined];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['default','OLSKCollectionEmpty','OLSKCollectionItem']);
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionSortFunction } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { _OLSKCollectionDispatchKey } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow = null } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKCollectionItems = [] } = $$props;
    	let { OLSKCollectionItemsLocus = null } = $$props;
    	let { OLSKCollectionItemClass = "" } = $$props;
    	let { OLSKCollectionEnableLooping = false } = $$props;
    	let { OLSKCollectionIgnoreKeyboard = false } = $$props;

    	const modPublic = Object.assign(
    		main$e.OLSKCollectionAPI({
    			OLSKCollectionItems,
    			_OLSKCollectionKeyFunction: _OLSKCollectionDispatchKey,
    			OLSKCollectionSortFunction,
    			OLSKCollectionDispatchChange() {
    				$$invalidate(0, OLSKCollectionItems);
    				_OLSKCollectionItemsDidChange(OLSKCollectionItems);
    			}
    		}),
    		{
    			_OLSKCollectionStashItems: [],
    			_OLSKCollectionStashEnabled: false,
    			OLSKCollectionStashEnabled(inputData) {
    				if (typeof inputData === "undefined") {
    					return modPublic._OLSKCollectionStashEnabled;
    				}

    				$$invalidate(1, modPublic._OLSKCollectionStashItems = [], modPublic);
    				return $$invalidate(1, modPublic._OLSKCollectionStashEnabled = inputData, modPublic);
    			},
    			_OLSKCollectionStashToggle(inputData) {
    				$$invalidate(
    					1,
    					modPublic._OLSKCollectionStashItems = modPublic._OLSKCollectionStashItems.includes(inputData)
    					? modPublic._OLSKCollectionStashItems.filter(function (e) {
    							return e !== inputData;
    						})
    					: modPublic._OLSKCollectionStashItems.concat(inputData),
    					modPublic
    				);

    				OLSKCollectionDispatchStash && OLSKCollectionDispatchStash(modPublic._OLSKCollectionStashItems.slice());
    			}
    		}
    	);

    	const _OLSKCollectionItemsDidChange = function (inputData) {
    		modPublic._OLSKCollectionDebugReassign(inputData);

    		if (!OLSKCollectionChunkFunction) {
    			return;
    		}

    		const order = JSON.stringify(OLSKCollectionItems.map(_OLSKCollectionDispatchKey));

    		if (order === mod._ValueOrder) {
    			return;
    		}

    		$$invalidate(6, mod._ValueOrder = order, mod);
    		$$invalidate(6, mod._ValueItemsChunked = OLSKCollectionChunkFunction(OLSKCollectionItems), mod);

    		$$invalidate(
    			6,
    			mod._ValueItemsChunks = (function (inputData) {
    				return OLSKCollectionChunkKeySortFunction
    				? inputData.sort(OLSKCollectionChunkKeySortFunction)
    				: inputData;
    			})(Object.keys(mod._ValueItemsChunked)),
    			mod
    		);
    	};

    	

    	const mod = {
    		// VALUE
    		_ValueOrder: "",
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			if (!OLSKCollectionDispatchArrow) {
    				return;
    			}

    			if (OLSKCollectionIgnoreKeyboard) {
    				return;
    			}

    			if (!OLSKCollectionItems.length) {
    				return;
    			}

    			const handlerFunctions = {
    				ArrowUp() {
    					(function () {
    						if (!OLSKCollectionEnableLooping && OLSKCollectionItems[0] === OLSKCollectionItemsLocus) {
    							return;
    						}

    						mod.ControlArrowIncrement(-1);
    					})();

    					return event.preventDefault();
    				},
    				ArrowDown() {
    					(function () {
    						if (!OLSKCollectionEnableLooping && OLSKCollectionItems.slice(-1).pop() === OLSKCollectionItemsLocus) {
    							return;
    						}

    						mod.ControlArrowIncrement(1);
    					})();

    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		},
    		// CONTROL
    		ControlArrowIncrement(inputData) {
    			OLSKCollectionDispatchArrow(OLSKCollectionItems[main$e.OLSKCollectionConstrainIndex(OLSKCollectionItems, OLSKCollectionItems.indexOf(OLSKCollectionItemsLocus) + inputData)]);
    		}
    	};

    	const writable_props = [
    		"OLSKCollectionItemAccessibilitySummaryFunction",
    		"OLSKCollectionSortFunction",
    		"OLSKCollectionChunkFunction",
    		"OLSKCollectionChunkKeySortFunction",
    		"_OLSKCollectionDispatchKey",
    		"OLSKCollectionDispatchClick",
    		"OLSKCollectionDispatchArrow",
    		"OLSKCollectionDispatchStash",
    		"OLSKCollectionItems",
    		"OLSKCollectionItemsLocus",
    		"OLSKCollectionItemClass",
    		"OLSKCollectionEnableLooping",
    		"OLSKCollectionIgnoreKeyboard"
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = item => modPublic._OLSKCollectionStashEnabled
    	? modPublic._OLSKCollectionStashToggle(item)
    	: OLSKCollectionDispatchClick(item);

    	$$self.$$set = $$props => {
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(2, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionSortFunction" in $$props) $$invalidate(7, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(8, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(9, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("_OLSKCollectionDispatchKey" in $$props) $$invalidate(10, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(3, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKCollectionItems" in $$props) $$invalidate(0, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ("OLSKCollectionItemsLocus" in $$props) $$invalidate(4, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(5, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKCollectionEnableLooping" in $$props) $$invalidate(13, OLSKCollectionEnableLooping = $$props.OLSKCollectionEnableLooping);
    		if ("OLSKCollectionIgnoreKeyboard" in $$props) $$invalidate(14, OLSKCollectionIgnoreKeyboard = $$props.OLSKCollectionIgnoreKeyboard);
    		if ("$$scope" in $$props) $$invalidate(15, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionSortFunction,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemClass,
    		OLSKCollectionEnableLooping,
    		OLSKCollectionIgnoreKeyboard,
    		OLSK_SPEC_UI: main_1$1,
    		OLSKCollectionLogic: main$e,
    		modPublic,
    		_OLSKCollectionItemsDidChange,
    		mod,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(2, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionSortFunction" in $$props) $$invalidate(7, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(8, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(9, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("_OLSKCollectionDispatchKey" in $$props) $$invalidate(10, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(3, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKCollectionItems" in $$props) $$invalidate(0, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ("OLSKCollectionItemsLocus" in $$props) $$invalidate(4, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(5, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKCollectionEnableLooping" in $$props) $$invalidate(13, OLSKCollectionEnableLooping = $$props.OLSKCollectionEnableLooping);
    		if ("OLSKCollectionIgnoreKeyboard" in $$props) $$invalidate(14, OLSKCollectionIgnoreKeyboard = $$props.OLSKCollectionIgnoreKeyboard);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*OLSKCollectionItems*/ 1) {
    			$: {
    				_OLSKCollectionItemsDidChange(OLSKCollectionItems);
    			}
    		}
    	};

    	return [
    		OLSKCollectionItems,
    		modPublic,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemClass,
    		mod,
    		OLSKCollectionSortFunction,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCollectionEnableLooping,
    		OLSKCollectionIgnoreKeyboard,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Main$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			OLSKCollectionItemAccessibilitySummaryFunction: 2,
    			OLSKCollectionSortFunction: 7,
    			OLSKCollectionChunkFunction: 8,
    			OLSKCollectionChunkKeySortFunction: 9,
    			_OLSKCollectionDispatchKey: 10,
    			OLSKCollectionDispatchClick: 3,
    			OLSKCollectionDispatchArrow: 11,
    			OLSKCollectionDispatchStash: 12,
    			OLSKCollectionItems: 0,
    			OLSKCollectionItemsLocus: 4,
    			OLSKCollectionItemClass: 5,
    			OLSKCollectionEnableLooping: 13,
    			OLSKCollectionIgnoreKeyboard: 14,
    			modPublic: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[2] === undefined && !("OLSKCollectionItemAccessibilitySummaryFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (/*OLSKCollectionSortFunction*/ ctx[7] === undefined && !("OLSKCollectionSortFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionSortFunction'");
    		}

    		if (/*_OLSKCollectionDispatchKey*/ ctx[10] === undefined && !("_OLSKCollectionDispatchKey" in props)) {
    			console.warn("<Main> was created without expected prop '_OLSKCollectionDispatchKey'");
    		}

    		if (/*OLSKCollectionDispatchClick*/ ctx[3] === undefined && !("OLSKCollectionDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCollectionDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCollectionDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemsLocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemsLocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionEnableLooping() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionEnableLooping(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionIgnoreKeyboard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionIgnoreKeyboard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[1];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKNarrow/main.svelte generated by Svelte v3.38.2 */
    const file$2 = "node_modules/OLSKNarrow/main.svelte";
    const get_OLSKNarrowBodyTail_slot_changes = dirty => ({});
    const get_OLSKNarrowBodyTail_slot_context = ctx => ({});

    const get_OLSKCollectionItem_slot_changes$1 = dirty => ({
    	OLSKCollectionItem: dirty & /*item*/ 268435456
    });

    const get_OLSKCollectionItem_slot_context$1 = ctx => ({ OLSKCollectionItem: /*item*/ ctx[28] });
    const get_OLSKCollectionEmpty_slot_changes$1 = dirty => ({});
    const get_OLSKCollectionEmpty_slot_context$1 = ctx => ({});
    const get_OLSKNarrowToolbarTail_slot_changes = dirty => ({});
    const get_OLSKNarrowToolbarTail_slot_context = ctx => ({});
    const get_OLSKNarrowToolbarHead_slot_changes = dirty => ({});
    const get_OLSKNarrowToolbarHead_slot_context = ctx => ({});

    // (132:1) {:else}
    function create_else_block(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput");
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1("OLSKNarrowFilterFieldText"));
    			input.autofocus = /*OLSKNarrowFilterFieldAutofocus*/ ctx[18];
    			add_location(input, file$2, 132, 2, 3665);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler_1*/ ctx[25]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[19].InterfaceFilterFieldDidInput)) /*mod*/ ctx[19].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKNarrowFilterFieldClass*/ 32768 && input_class_value !== (input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput")) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 65536 && input_placeholder_value !== (input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1("OLSKNarrowFilterFieldText"))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldAutofocus*/ 262144) {
    				prop_dev(input, "autofocus", /*OLSKNarrowFilterFieldAutofocus*/ ctx[18]);
    			}

    			if (dirty & /*OLSKNarrowFilterText*/ 1 && input.value !== /*OLSKNarrowFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(132:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (126:1) {#if OLSKNarrowFilterFieldClearButton }
    function create_if_block_2$1(ctx) {
    	let form;
    	let olskinputwrapper;
    	let current;
    	let mounted;
    	let dispose;

    	olskinputwrapper = new Main({
    			props: {
    				OLSKInputWrapperValue: /*OLSKNarrowFilterFieldClearButton*/ ctx[17]
    				? /*OLSKNarrowFilterText*/ ctx[0]
    				: "",
    				OLSKInputWrapperDispatchClear: /*mod*/ ctx[19].OLSKInputWrapperDispatchClear,
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			form = element("form");
    			create_component(olskinputwrapper.$$.fragment);
    			attr_dev(form, "class", "OLSKNarrowForm OLSKToolbarFlexible");
    			add_location(form, file$2, 126, 1, 3040);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			mount_component(olskinputwrapper, form, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					form,
    					"submit",
    					function () {
    						if (is_function(/*mod*/ ctx[19].InterfaceFormDidSubmit)) /*mod*/ ctx[19].InterfaceFormDidSubmit.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const olskinputwrapper_changes = {};

    			if (dirty & /*OLSKNarrowFilterFieldClearButton, OLSKNarrowFilterText*/ 131073) olskinputwrapper_changes.OLSKInputWrapperValue = /*OLSKNarrowFilterFieldClearButton*/ ctx[17]
    			? /*OLSKNarrowFilterText*/ ctx[0]
    			: "";

    			if (dirty & /*mod*/ 524288) olskinputwrapper_changes.OLSKInputWrapperDispatchClear = /*mod*/ ctx[19].OLSKInputWrapperDispatchClear;

    			if (dirty & /*$$scope, OLSKNarrowFilterFieldClass, OLSKNarrowFilterFieldPlaceholderText, OLSKNarrowFilterFieldAutofocus, OLSKNarrowFilterText, mod*/ 135102465) {
    				olskinputwrapper_changes.$$scope = { dirty, ctx };
    			}

    			olskinputwrapper.$set(olskinputwrapper_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskinputwrapper.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskinputwrapper.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_component(olskinputwrapper);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(126:1) {#if OLSKNarrowFilterFieldClearButton }",
    		ctx
    	});

    	return block;
    }

    // (128:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKNarrowFilterFieldClearButton ? OLSKNarrowFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >
    function create_default_slot(ctx) {
    	let input;
    	let input_class_value;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "class", input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput");
    			attr_dev(input, "placeholder", input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1("OLSKNarrowFilterFieldText"));
    			input.autofocus = /*OLSKNarrowFilterFieldAutofocus*/ ctx[18];
    			add_location(input, file$2, 128, 3, 3311);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[24]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[19].InterfaceFilterFieldDidInput)) /*mod*/ ctx[19].InterfaceFilterFieldDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*OLSKNarrowFilterFieldClass*/ 32768 && input_class_value !== (input_class_value = "OLSKNarrowFilterField " + /*OLSKNarrowFilterFieldClass*/ ctx[15] + " OLSKDecorInput")) {
    				attr_dev(input, "class", input_class_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 65536 && input_placeholder_value !== (input_placeholder_value = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[16] || main_1("OLSKNarrowFilterFieldText"))) {
    				attr_dev(input, "placeholder", input_placeholder_value);
    			}

    			if (dirty & /*OLSKNarrowFilterFieldAutofocus*/ 262144) {
    				prop_dev(input, "autofocus", /*OLSKNarrowFilterFieldAutofocus*/ ctx[18]);
    			}

    			if (dirty & /*OLSKNarrowFilterText*/ 1 && input.value !== /*OLSKNarrowFilterText*/ ctx[0]) {
    				set_input_value(input, /*OLSKNarrowFilterText*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(128:2) <OLSKInputWrapper OLSKInputWrapperValue={ OLSKNarrowFilterFieldClearButton ? OLSKNarrowFilterText : '' } OLSKInputWrapperDispatchClear={ mod.OLSKInputWrapperDispatchClear } >",
    		ctx
    	});

    	return block;
    }

    // (164:3) {#if $$slots.OLSKCollectionItem}
    function create_if_block_1$1(ctx) {
    	let current;
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[23].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKCollectionItem_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, item*/ 402653184)) {
    					update_slot(OLSKCollectionItem_slot, OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[27], dirty, get_OLSKCollectionItem_slot_changes$1, get_OLSKCollectionItem_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(164:3) {#if $$slots.OLSKCollectionItem}",
    		ctx
    	});

    	return block;
    }

    // (163:2) 
    function create_OLSKCollectionItem_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[20].OLSKCollectionItem && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$2, 162, 2, 4950);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[20].OLSKCollectionItem) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1048576) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot.name,
    		type: "slot",
    		source: "(163:2) ",
    		ctx
    	});

    	return block;
    }

    // (169:3) {#if $$slots.OLSKCollectionEmpty}
    function create_if_block$2(ctx) {
    	let current;
    	const OLSKCollectionEmpty_slot_template = /*#slots*/ ctx[23].OLSKCollectionEmpty;
    	const OLSKCollectionEmpty_slot = create_slot(OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKCollectionEmpty_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionEmpty_slot) {
    				OLSKCollectionEmpty_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionEmpty_slot) {
    				if (OLSKCollectionEmpty_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot(OLSKCollectionEmpty_slot, OLSKCollectionEmpty_slot_template, ctx, /*$$scope*/ ctx[27], dirty, get_OLSKCollectionEmpty_slot_changes$1, get_OLSKCollectionEmpty_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionEmpty_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionEmpty_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionEmpty_slot) OLSKCollectionEmpty_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(169:3) {#if $$slots.OLSKCollectionEmpty}",
    		ctx
    	});

    	return block;
    }

    // (168:2) 
    function create_OLSKCollectionEmpty_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[20].OLSKCollectionEmpty && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionEmpty");
    			add_location(div, file$2, 167, 2, 5111);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[20].OLSKCollectionEmpty) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1048576) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionEmpty_slot.name,
    		type: "slot",
    		source: "(168:2) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let header;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let t2;
    	let section;
    	let t3;
    	let olskcollection;
    	let t4;
    	let div_class_value;
    	let div_aria_hidden_value;
    	let current;
    	const OLSKNarrowToolbarHead_slot_template = /*#slots*/ ctx[23].OLSKNarrowToolbarHead;
    	const OLSKNarrowToolbarHead_slot = create_slot(OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowToolbarHead_slot_context);
    	const if_block_creators = [create_if_block_2$1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKNarrowFilterFieldClearButton*/ ctx[17]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const OLSKNarrowToolbarTail_slot_template = /*#slots*/ ctx[23].OLSKNarrowToolbarTail;
    	const OLSKNarrowToolbarTail_slot = create_slot(OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowToolbarTail_slot_context);
    	const default_slot_template = /*#slots*/ ctx[23].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[27], null);

    	let olskcollection_props = {
    		OLSKCollectionItems: /*OLSKCollectionItems*/ ctx[7],
    		OLSKCollectionItemsLocus: /*OLSKCollectionItemsLocus*/ ctx[8],
    		OLSKCollectionIgnoreKeyboard: !/*mod*/ ctx[19].DataIsFocused(),
    		OLSKCollectionItemClass: /*OLSKCollectionItemClass*/ ctx[6],
    		OLSKCollectionSortFunction: /*OLSKCollectionSortFunction*/ ctx[2],
    		_OLSKCollectionDispatchKey: /*_OLSKCollectionDispatchKey*/ ctx[3],
    		OLSKCollectionChunkFunction: /*OLSKCollectionChunkFunction*/ ctx[4],
    		OLSKCollectionChunkKeySortFunction: /*OLSKCollectionChunkKeySortFunction*/ ctx[5],
    		OLSKCollectionItemAccessibilitySummaryFunction: /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[9],
    		OLSKCollectionDispatchClick: /*OLSKCollectionDispatchClick*/ ctx[10],
    		OLSKCollectionDispatchArrow: /*OLSKCollectionDispatchArrow*/ ctx[11],
    		OLSKCollectionDispatchStash: /*OLSKCollectionDispatchStash*/ ctx[12],
    		$$slots: {
    			OLSKCollectionEmpty: [
    				create_OLSKCollectionEmpty_slot,
    				({ OLSKCollectionItem: item }) => ({ 28: item }),
    				({ OLSKCollectionItem: item }) => item ? 268435456 : 0
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot,
    				({ OLSKCollectionItem: item }) => ({ 28: item }),
    				({ OLSKCollectionItem: item }) => item ? 268435456 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olskcollection = new Main$1({
    			props: olskcollection_props,
    			$$inline: true
    		});

    	/*olskcollection_binding*/ ctx[26](olskcollection);
    	const OLSKNarrowBodyTail_slot_template = /*#slots*/ ctx[23].OLSKNarrowBodyTail;
    	const OLSKNarrowBodyTail_slot = create_slot(OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[27], get_OLSKNarrowBodyTail_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			header = element("header");
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.c();
    			t0 = space();
    			if_block.c();
    			t1 = space();
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.c();
    			t2 = space();
    			section = element("section");
    			if (default_slot) default_slot.c();
    			t3 = space();
    			create_component(olskcollection.$$.fragment);
    			t4 = space();
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.c();
    			attr_dev(header, "class", "OLSKNarrowToolbar OLSKMobileViewHeader OLSKToolbar OLSKCommonEdgeBottom");
    			add_location(header, file$2, 122, 0, 2863);
    			attr_dev(section, "class", "OLSKNarrowBody");
    			add_location(section, file$2, 138, 0, 4041);
    			attr_dev(div, "class", div_class_value = "OLSKNarrow OLSKViewportMaster OLSKCommonEdgeRight " + /*OLSKNarrowClass*/ ctx[14]);
    			attr_dev(div, "aria-hidden", div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[13] ? true : null);
    			toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[13]);
    			toggle_class(div, "OLSKNarrowFocused", /*mod*/ ctx[19]._ValueFilterFieldFocused);
    			add_location(div, file$2, 120, 0, 2612);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, header);

    			if (OLSKNarrowToolbarHead_slot) {
    				OLSKNarrowToolbarHead_slot.m(header, null);
    			}

    			append_dev(header, t0);
    			if_blocks[current_block_type_index].m(header, null);
    			append_dev(header, t1);

    			if (OLSKNarrowToolbarTail_slot) {
    				OLSKNarrowToolbarTail_slot.m(header, null);
    			}

    			append_dev(div, t2);
    			append_dev(div, section);

    			if (default_slot) {
    				default_slot.m(section, null);
    			}

    			append_dev(section, t3);
    			mount_component(olskcollection, section, null);
    			append_dev(section, t4);

    			if (OLSKNarrowBodyTail_slot) {
    				OLSKNarrowBodyTail_slot.m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (OLSKNarrowToolbarHead_slot) {
    				if (OLSKNarrowToolbarHead_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot(OLSKNarrowToolbarHead_slot, OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowToolbarHead_slot_changes, get_OLSKNarrowToolbarHead_slot_context);
    				}
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(header, t1);
    			}

    			if (OLSKNarrowToolbarTail_slot) {
    				if (OLSKNarrowToolbarTail_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot(OLSKNarrowToolbarTail_slot, OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowToolbarTail_slot_changes, get_OLSKNarrowToolbarTail_slot_context);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[27], dirty, null, null);
    				}
    			}

    			const olskcollection_changes = {};
    			if (dirty & /*OLSKCollectionItems*/ 128) olskcollection_changes.OLSKCollectionItems = /*OLSKCollectionItems*/ ctx[7];
    			if (dirty & /*OLSKCollectionItemsLocus*/ 256) olskcollection_changes.OLSKCollectionItemsLocus = /*OLSKCollectionItemsLocus*/ ctx[8];
    			if (dirty & /*mod*/ 524288) olskcollection_changes.OLSKCollectionIgnoreKeyboard = !/*mod*/ ctx[19].DataIsFocused();
    			if (dirty & /*OLSKCollectionItemClass*/ 64) olskcollection_changes.OLSKCollectionItemClass = /*OLSKCollectionItemClass*/ ctx[6];
    			if (dirty & /*OLSKCollectionSortFunction*/ 4) olskcollection_changes.OLSKCollectionSortFunction = /*OLSKCollectionSortFunction*/ ctx[2];
    			if (dirty & /*_OLSKCollectionDispatchKey*/ 8) olskcollection_changes._OLSKCollectionDispatchKey = /*_OLSKCollectionDispatchKey*/ ctx[3];
    			if (dirty & /*OLSKCollectionChunkFunction*/ 16) olskcollection_changes.OLSKCollectionChunkFunction = /*OLSKCollectionChunkFunction*/ ctx[4];
    			if (dirty & /*OLSKCollectionChunkKeySortFunction*/ 32) olskcollection_changes.OLSKCollectionChunkKeySortFunction = /*OLSKCollectionChunkKeySortFunction*/ ctx[5];
    			if (dirty & /*OLSKCollectionItemAccessibilitySummaryFunction*/ 512) olskcollection_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[9];
    			if (dirty & /*OLSKCollectionDispatchClick*/ 1024) olskcollection_changes.OLSKCollectionDispatchClick = /*OLSKCollectionDispatchClick*/ ctx[10];
    			if (dirty & /*OLSKCollectionDispatchArrow*/ 2048) olskcollection_changes.OLSKCollectionDispatchArrow = /*OLSKCollectionDispatchArrow*/ ctx[11];
    			if (dirty & /*OLSKCollectionDispatchStash*/ 4096) olskcollection_changes.OLSKCollectionDispatchStash = /*OLSKCollectionDispatchStash*/ ctx[12];

    			if (dirty & /*$$scope, $$slots, item*/ 403701760) {
    				olskcollection_changes.$$scope = { dirty, ctx };
    			}

    			olskcollection.$set(olskcollection_changes);

    			if (OLSKNarrowBodyTail_slot) {
    				if (OLSKNarrowBodyTail_slot.p && (!current || dirty & /*$$scope*/ 134217728)) {
    					update_slot(OLSKNarrowBodyTail_slot, OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[27], dirty, get_OLSKNarrowBodyTail_slot_changes, get_OLSKNarrowBodyTail_slot_context);
    				}
    			}

    			if (!current || dirty & /*OLSKNarrowClass*/ 16384 && div_class_value !== (div_class_value = "OLSKNarrow OLSKViewportMaster OLSKCommonEdgeRight " + /*OLSKNarrowClass*/ ctx[14])) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*OLSKMobileViewInactive*/ 8192 && div_aria_hidden_value !== (div_aria_hidden_value = /*OLSKMobileViewInactive*/ ctx[13] ? true : null)) {
    				attr_dev(div, "aria-hidden", div_aria_hidden_value);
    			}

    			if (dirty & /*OLSKNarrowClass, OLSKMobileViewInactive*/ 24576) {
    				toggle_class(div, "OLSKMobileViewInactive", /*OLSKMobileViewInactive*/ ctx[13]);
    			}

    			if (dirty & /*OLSKNarrowClass, mod*/ 540672) {
    				toggle_class(div, "OLSKNarrowFocused", /*mod*/ ctx[19]._ValueFilterFieldFocused);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarHead_slot, local);
    			transition_in(if_block);
    			transition_in(OLSKNarrowToolbarTail_slot, local);
    			transition_in(default_slot, local);
    			transition_in(olskcollection.$$.fragment, local);
    			transition_in(OLSKNarrowBodyTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarHead_slot, local);
    			transition_out(if_block);
    			transition_out(OLSKNarrowToolbarTail_slot, local);
    			transition_out(default_slot, local);
    			transition_out(olskcollection.$$.fragment, local);
    			transition_out(OLSKNarrowBodyTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.d(detaching);
    			if_blocks[current_block_type_index].d();
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			/*olskcollection_binding*/ ctx[26](null);
    			destroy_component(olskcollection);
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots("Main", slots, [
    		'OLSKNarrowToolbarHead','OLSKNarrowToolbarTail','default','OLSKCollectionEmpty','OLSKCollectionItem','OLSKNarrowBodyTail'
    	]);

    	const $$slots = compute_slots(slots);
    	let { OLSKCollectionSortFunction } = $$props;
    	let { _OLSKCollectionDispatchKey } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { OLSKCollectionItemClass = "" } = $$props;
    	let { OLSKNarrowFilterText } = $$props;
    	let { OLSKCollectionItems } = $$props;
    	let { OLSKCollectionItemsLocus = null } = $$props;
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKNarrowDispatchFilter } = $$props;
    	let { OLSKNarrowDispatchSubmit = null } = $$props;
    	let { OLSKMobileViewInactive = false } = $$props;
    	let { OLSKNarrowClass = "" } = $$props;
    	let { OLSKNarrowFilterFieldClass = "" } = $$props;
    	let { OLSKNarrowFilterFieldPlaceholderText = "" } = $$props;
    	let { OLSKNarrowFilterFieldClearButton = true } = $$props;
    	let { OLSKNarrowFilterFieldAutofocus = false } = $$props;
    	const modPublic = {};

    	const mod = {
    		// VALUE
    		_ValueFilterFieldFocused: false,
    		// DATA
    		DataIsFocused() {
    			return document.activeElement === document.querySelector(".OLSKNarrowFilterField");
    		},
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// INTERFACE
    		InterfaceFilterFieldDidInput(event) {
    			OLSKNarrowDispatchFilter(this.value);
    		},
    		InterfaceFormDidSubmit(event) {
    			event.preventDefault();
    			OLSKNarrowDispatchSubmit && OLSKNarrowDispatchSubmit();
    		},
    		// MESSAGE
    		OLSKInputWrapperDispatchClear() {
    			OLSKNarrowDispatchFilter("");
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupFilterFieldEventListeners();
    		},
    		SetupFilterFieldEventListeners() {
    			document.querySelector(".OLSKNarrowFilterField").addEventListener("focus", function () {
    				$$invalidate(19, mod._ValueFilterFieldFocused = true, mod);
    			});

    			document.querySelector(".OLSKNarrowFilterField").addEventListener("blur", function () {
    				$$invalidate(19, mod._ValueFilterFieldFocused = false, mod);
    			});
    		},
    		// LIFECYCLE
    		LifecycleComponentDidMount() {
    			mod.SetupEverything();
    		},
    		LifecycleComponentDidUpdate() {
    			if (main_1$1()) {
    				return;
    			}

    			if (mod.DataIsMobile()) {
    				return;
    			}

    			const element = document.querySelector(".OLSKCollectionItemLocus");

    			if (!element) {
    				return;
    			}

    			element.scrollIntoView({ block: "nearest", inline: "nearest" });
    		}
    	};

    	onMount(mod.LifecycleComponentDidMount);
    	afterUpdate(mod.LifecycleComponentDidUpdate);

    	const writable_props = [
    		"OLSKCollectionSortFunction",
    		"_OLSKCollectionDispatchKey",
    		"OLSKCollectionChunkFunction",
    		"OLSKCollectionChunkKeySortFunction",
    		"OLSKCollectionItemClass",
    		"OLSKNarrowFilterText",
    		"OLSKCollectionItems",
    		"OLSKCollectionItemsLocus",
    		"OLSKCollectionItemAccessibilitySummaryFunction",
    		"OLSKCollectionDispatchClick",
    		"OLSKCollectionDispatchArrow",
    		"OLSKCollectionDispatchStash",
    		"OLSKNarrowDispatchFilter",
    		"OLSKNarrowDispatchSubmit",
    		"OLSKMobileViewInactive",
    		"OLSKNarrowClass",
    		"OLSKNarrowFilterFieldClass",
    		"OLSKNarrowFilterFieldPlaceholderText",
    		"OLSKNarrowFilterFieldClearButton",
    		"OLSKNarrowFilterFieldAutofocus"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		OLSKNarrowFilterText = this.value;
    		$$invalidate(0, OLSKNarrowFilterText);
    	}

    	function input_input_handler_1() {
    		OLSKNarrowFilterText = this.value;
    		$$invalidate(0, OLSKNarrowFilterText);
    	}

    	function olskcollection_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			modPublic._OLSKCollection = $$value;
    			$$invalidate(1, modPublic);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("OLSKCollectionSortFunction" in $$props) $$invalidate(2, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ("_OLSKCollectionDispatchKey" in $$props) $$invalidate(3, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(4, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(5, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(6, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKNarrowFilterText" in $$props) $$invalidate(0, OLSKNarrowFilterText = $$props.OLSKNarrowFilterText);
    		if ("OLSKCollectionItems" in $$props) $$invalidate(7, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ("OLSKCollectionItemsLocus" in $$props) $$invalidate(8, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(9, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(10, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKNarrowDispatchFilter" in $$props) $$invalidate(21, OLSKNarrowDispatchFilter = $$props.OLSKNarrowDispatchFilter);
    		if ("OLSKNarrowDispatchSubmit" in $$props) $$invalidate(22, OLSKNarrowDispatchSubmit = $$props.OLSKNarrowDispatchSubmit);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(13, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("OLSKNarrowClass" in $$props) $$invalidate(14, OLSKNarrowClass = $$props.OLSKNarrowClass);
    		if ("OLSKNarrowFilterFieldClass" in $$props) $$invalidate(15, OLSKNarrowFilterFieldClass = $$props.OLSKNarrowFilterFieldClass);
    		if ("OLSKNarrowFilterFieldPlaceholderText" in $$props) $$invalidate(16, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ("OLSKNarrowFilterFieldClearButton" in $$props) $$invalidate(17, OLSKNarrowFilterFieldClearButton = $$props.OLSKNarrowFilterFieldClearButton);
    		if ("OLSKNarrowFilterFieldAutofocus" in $$props) $$invalidate(18, OLSKNarrowFilterFieldAutofocus = $$props.OLSKNarrowFilterFieldAutofocus);
    		if ("$$scope" in $$props) $$invalidate(27, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionSortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterText,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit,
    		OLSKMobileViewInactive,
    		OLSKNarrowClass,
    		OLSKNarrowFilterFieldClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKNarrowFilterFieldClearButton,
    		OLSKNarrowFilterFieldAutofocus,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$1,
    		modPublic,
    		mod,
    		onMount,
    		afterUpdate,
    		OLSKInputWrapper: Main,
    		OLSKCollection: Main$1
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKCollectionSortFunction" in $$props) $$invalidate(2, OLSKCollectionSortFunction = $$props.OLSKCollectionSortFunction);
    		if ("_OLSKCollectionDispatchKey" in $$props) $$invalidate(3, _OLSKCollectionDispatchKey = $$props._OLSKCollectionDispatchKey);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(4, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(5, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(6, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKNarrowFilterText" in $$props) $$invalidate(0, OLSKNarrowFilterText = $$props.OLSKNarrowFilterText);
    		if ("OLSKCollectionItems" in $$props) $$invalidate(7, OLSKCollectionItems = $$props.OLSKCollectionItems);
    		if ("OLSKCollectionItemsLocus" in $$props) $$invalidate(8, OLSKCollectionItemsLocus = $$props.OLSKCollectionItemsLocus);
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(9, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(10, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(11, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(12, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKNarrowDispatchFilter" in $$props) $$invalidate(21, OLSKNarrowDispatchFilter = $$props.OLSKNarrowDispatchFilter);
    		if ("OLSKNarrowDispatchSubmit" in $$props) $$invalidate(22, OLSKNarrowDispatchSubmit = $$props.OLSKNarrowDispatchSubmit);
    		if ("OLSKMobileViewInactive" in $$props) $$invalidate(13, OLSKMobileViewInactive = $$props.OLSKMobileViewInactive);
    		if ("OLSKNarrowClass" in $$props) $$invalidate(14, OLSKNarrowClass = $$props.OLSKNarrowClass);
    		if ("OLSKNarrowFilterFieldClass" in $$props) $$invalidate(15, OLSKNarrowFilterFieldClass = $$props.OLSKNarrowFilterFieldClass);
    		if ("OLSKNarrowFilterFieldPlaceholderText" in $$props) $$invalidate(16, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ("OLSKNarrowFilterFieldClearButton" in $$props) $$invalidate(17, OLSKNarrowFilterFieldClearButton = $$props.OLSKNarrowFilterFieldClearButton);
    		if ("OLSKNarrowFilterFieldAutofocus" in $$props) $$invalidate(18, OLSKNarrowFilterFieldAutofocus = $$props.OLSKNarrowFilterFieldAutofocus);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKNarrowFilterText,
    		modPublic,
    		OLSKCollectionSortFunction,
    		_OLSKCollectionDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionItemClass,
    		OLSKCollectionItems,
    		OLSKCollectionItemsLocus,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKMobileViewInactive,
    		OLSKNarrowClass,
    		OLSKNarrowFilterFieldClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKNarrowFilterFieldClearButton,
    		OLSKNarrowFilterFieldAutofocus,
    		mod,
    		$$slots,
    		OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit,
    		slots,
    		input_input_handler,
    		input_input_handler_1,
    		olskcollection_binding,
    		$$scope
    	];
    }

    class Main$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			OLSKCollectionSortFunction: 2,
    			_OLSKCollectionDispatchKey: 3,
    			OLSKCollectionChunkFunction: 4,
    			OLSKCollectionChunkKeySortFunction: 5,
    			OLSKCollectionItemClass: 6,
    			OLSKNarrowFilterText: 0,
    			OLSKCollectionItems: 7,
    			OLSKCollectionItemsLocus: 8,
    			OLSKCollectionItemAccessibilitySummaryFunction: 9,
    			OLSKCollectionDispatchClick: 10,
    			OLSKCollectionDispatchArrow: 11,
    			OLSKCollectionDispatchStash: 12,
    			OLSKNarrowDispatchFilter: 21,
    			OLSKNarrowDispatchSubmit: 22,
    			OLSKMobileViewInactive: 13,
    			OLSKNarrowClass: 14,
    			OLSKNarrowFilterFieldClass: 15,
    			OLSKNarrowFilterFieldPlaceholderText: 16,
    			OLSKNarrowFilterFieldClearButton: 17,
    			OLSKNarrowFilterFieldAutofocus: 18,
    			modPublic: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCollectionSortFunction*/ ctx[2] === undefined && !("OLSKCollectionSortFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionSortFunction'");
    		}

    		if (/*_OLSKCollectionDispatchKey*/ ctx[3] === undefined && !("_OLSKCollectionDispatchKey" in props)) {
    			console.warn("<Main> was created without expected prop '_OLSKCollectionDispatchKey'");
    		}

    		if (/*OLSKNarrowFilterText*/ ctx[0] === undefined && !("OLSKNarrowFilterText" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKNarrowFilterText'");
    		}

    		if (/*OLSKCollectionItems*/ ctx[7] === undefined && !("OLSKCollectionItems" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItems'");
    		}

    		if (/*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[9] === undefined && !("OLSKCollectionItemAccessibilitySummaryFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (/*OLSKCollectionDispatchClick*/ ctx[10] === undefined && !("OLSKCollectionDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}

    		if (/*OLSKCollectionDispatchArrow*/ ctx[11] === undefined && !("OLSKCollectionDispatchArrow" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchArrow'");
    		}

    		if (/*OLSKNarrowDispatchFilter*/ ctx[21] === undefined && !("OLSKNarrowDispatchFilter" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKNarrowDispatchFilter'");
    		}
    	}

    	get OLSKCollectionSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCollectionDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCollectionDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemsLocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemsLocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowDispatchFilter() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowDispatchFilter(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowDispatchSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowDispatchSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKMobileViewInactive() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKMobileViewInactive(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldPlaceholderText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldPlaceholderText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldClearButton() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldClearButton(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldAutofocus() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldAutofocus(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[1];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKPlaceholder/main.svelte generated by Svelte v3.38.2 */
    const file$3 = "node_modules/OLSKPlaceholder/main.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let raw_value = (/*OLSKPlaceholderHTML*/ ctx[0] || main_1("OLSKPlaceholderText")) + "";

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKPlaceholder OLSKDecorTextVisual svelte-1fqi4c");
    			add_location(div, file$3, 6, 0, 109);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKPlaceholderHTML*/ 1 && raw_value !== (raw_value = (/*OLSKPlaceholderHTML*/ ctx[0] || main_1("OLSKPlaceholderText")) + "")) div.innerHTML = raw_value;		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKPlaceholderHTML = "" } = $$props;
    	const writable_props = ["OLSKPlaceholderHTML"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKPlaceholderHTML" in $$props) $$invalidate(0, OLSKPlaceholderHTML = $$props.OLSKPlaceholderHTML);
    	};

    	$$self.$capture_state = () => ({ OLSKPlaceholderHTML, OLSKLocalized: main_1 });

    	$$self.$inject_state = $$props => {
    		if ("OLSKPlaceholderHTML" in $$props) $$invalidate(0, OLSKPlaceholderHTML = $$props.OLSKPlaceholderHTML);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKPlaceholderHTML];
    }

    class Main$3 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { OLSKPlaceholderHTML: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get OLSKPlaceholderHTML() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPlaceholderHTML(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCatalog/main.svelte generated by Svelte v3.38.2 */

    const { window: window_1 } = globals;
    const file$4 = "node_modules/OLSKCatalog/main.svelte";

    const get_OLSKCatalogDetailContent_slot_changes = dirty => ({
    	OLSKCatalogItemSelected: dirty & /*mod*/ 1024
    });

    const get_OLSKCatalogDetailContent_slot_context = ctx => ({
    	OLSKCatalogItemSelected: /*mod*/ ctx[10]._ValueItemSelected
    });

    const get_OLSKNarrowToolbarHead_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowToolbarHead_slot_context$1 = ctx => ({});
    const get_OLSKNarrowToolbarTail_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowToolbarTail_slot_context$1 = ctx => ({});

    const get_OLSKCollectionItem_slot_changes$2 = dirty => ({
    	OLSKCollectionItem: dirty & /*e*/ 536870912
    });

    const get_OLSKCollectionItem_slot_context$2 = ctx => ({ OLSKCollectionItem: /*e*/ ctx[29] });
    const get_OLSKNarrowBodyTail_slot_changes$1 = dirty => ({});
    const get_OLSKNarrowBodyTail_slot_context$1 = ctx => ({});

    // (419:0) <OLSKNarrow  bind:this={ modPublic._OLSKNarrow }  OLSKCollectionSortFunction={ OLSKCatalogSortFunction }  _OLSKCollectionDispatchKey={ _OLSKCatalogDispatchKey }  OLSKCollectionChunkFunction={ OLSKCollectionChunkFunction }  OLSKCollectionChunkKeySortFunction={ OLSKCollectionChunkKeySortFunction }  OLSKCollectionItemClass={ OLSKCollectionItemClass }    OLSKCollectionItems={ mod._ValueItemsVisible }  OLSKCollectionItemsLocus={ mod._ValueItemSelected }   OLSKNarrowFilterText={ mod._ValueFilterText }  OLSKNarrowFilterFieldPlaceholderText={ OLSKNarrowFilterFieldPlaceholderText }   OLSKCollectionDispatchClick={ OLSKCollectionDispatchClick }  OLSKCollectionDispatchArrow={ OLSKCollectionDispatchArrow }  OLSKCollectionDispatchStash={ mod.OLSKCollectionDispatchStash }  OLSKNarrowDispatchFilter={ mod.OLSKNarrowDispatchFilter }  OLSKNarrowDispatchSubmit={ mod.OLSKNarrowDispatchSubmit }   let:OLSKCollectionItem={ e }   OLSKCollectionItemAccessibilitySummaryFunction={ OLSKCollectionItemAccessibilitySummaryFunction }    OLSKMobileViewInactive={ mod.OLSKMobileViewInactive }  >
    function create_default_slot$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[25].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[28], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(419:0) <OLSKNarrow  bind:this={ modPublic._OLSKNarrow }  OLSKCollectionSortFunction={ OLSKCatalogSortFunction }  _OLSKCollectionDispatchKey={ _OLSKCatalogDispatchKey }  OLSKCollectionChunkFunction={ OLSKCollectionChunkFunction }  OLSKCollectionChunkKeySortFunction={ OLSKCollectionChunkKeySortFunction }  OLSKCollectionItemClass={ OLSKCollectionItemClass }    OLSKCollectionItems={ mod._ValueItemsVisible }  OLSKCollectionItemsLocus={ mod._ValueItemSelected }   OLSKNarrowFilterText={ mod._ValueFilterText }  OLSKNarrowFilterFieldPlaceholderText={ OLSKNarrowFilterFieldPlaceholderText }   OLSKCollectionDispatchClick={ OLSKCollectionDispatchClick }  OLSKCollectionDispatchArrow={ OLSKCollectionDispatchArrow }  OLSKCollectionDispatchStash={ mod.OLSKCollectionDispatchStash }  OLSKNarrowDispatchFilter={ mod.OLSKNarrowDispatchFilter }  OLSKNarrowDispatchSubmit={ mod.OLSKNarrowDispatchSubmit }   let:OLSKCollectionItem={ e }   OLSKCollectionItemAccessibilitySummaryFunction={ OLSKCollectionItemAccessibilitySummaryFunction }    OLSKMobileViewInactive={ mod.OLSKMobileViewInactive }  >",
    		ctx
    	});

    	return block;
    }

    // (446:2) {#if $$slots.OLSKNarrowToolbarHead}
    function create_if_block_7(ctx) {
    	let current;
    	const OLSKNarrowToolbarHead_slot_template = /*#slots*/ ctx[25].OLSKNarrowToolbarHead;
    	const OLSKNarrowToolbarHead_slot = create_slot(OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[28], get_OLSKNarrowToolbarHead_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowToolbarHead_slot) {
    				OLSKNarrowToolbarHead_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowToolbarHead_slot) {
    				if (OLSKNarrowToolbarHead_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
    					update_slot(OLSKNarrowToolbarHead_slot, OLSKNarrowToolbarHead_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_OLSKNarrowToolbarHead_slot_changes$1, get_OLSKNarrowToolbarHead_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarHead_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarHead_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowToolbarHead_slot) OLSKNarrowToolbarHead_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(446:2) {#if $$slots.OLSKNarrowToolbarHead}",
    		ctx
    	});

    	return block;
    }

    // (445:1) 
    function create_OLSKNarrowToolbarHead_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKNarrowToolbarHead && create_if_block_7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowToolbarHead");
    			add_location(div, file$4, 444, 1, 11032);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKNarrowToolbarHead) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarHead_slot.name,
    		type: "slot",
    		source: "(445:1) ",
    		ctx
    	});

    	return block;
    }

    // (456:42) 
    function create_if_block_6(ctx) {
    	let current;
    	const OLSKNarrowToolbarTail_slot_template = /*#slots*/ ctx[25].OLSKNarrowToolbarTail;
    	const OLSKNarrowToolbarTail_slot = create_slot(OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[28], get_OLSKNarrowToolbarTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowToolbarTail_slot) {
    				OLSKNarrowToolbarTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowToolbarTail_slot) {
    				if (OLSKNarrowToolbarTail_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
    					update_slot(OLSKNarrowToolbarTail_slot, OLSKNarrowToolbarTail_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_OLSKNarrowToolbarTail_slot_changes$1, get_OLSKNarrowToolbarTail_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowToolbarTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowToolbarTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowToolbarTail_slot) OLSKNarrowToolbarTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(456:42) ",
    		ctx
    	});

    	return block;
    }

    // (452:2) {#if mod._ValueStashEnabled }
    function create_if_block_5(ctx) {
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "OK";
    			attr_dev(button, "class", "OLSKCatalogStashDoneButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-lb6a1q");
    			add_location(button, file$4, 453, 4, 11282);
    			attr_dev(div, "class", "OLSKToolbarElementGroup");
    			add_location(div, file$4, 452, 3, 11240);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[10].InterfaceStashDoneButtonDidClick)) /*mod*/ ctx[10].InterfaceStashDoneButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(452:2) {#if mod._ValueStashEnabled }",
    		ctx
    	});

    	return block;
    }

    // (451:1) 
    function create_OLSKNarrowToolbarTail_slot(ctx) {
    	let div;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_5, create_if_block_6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*mod*/ ctx[10]._ValueStashEnabled) return 0;
    		if (/*$$slots*/ ctx[11].OLSKNarrowToolbarTail) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowToolbarTail");
    			add_location(div, file$4, 450, 1, 11170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarTail_slot.name,
    		type: "slot",
    		source: "(451:1) ",
    		ctx
    	});

    	return block;
    }

    // (464:2) {#if $$slots.OLSKCollectionItem}
    function create_if_block_4(ctx) {
    	let current;
    	const OLSKCollectionItem_slot_template = /*#slots*/ ctx[25].OLSKCollectionItem;
    	const OLSKCollectionItem_slot = create_slot(OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[28], get_OLSKCollectionItem_slot_context$2);

    	const block = {
    		c: function create() {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKCollectionItem_slot) {
    				OLSKCollectionItem_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCollectionItem_slot) {
    				if (OLSKCollectionItem_slot.p && (!current || dirty & /*$$scope, e*/ 805306368)) {
    					update_slot(OLSKCollectionItem_slot, OLSKCollectionItem_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_OLSKCollectionItem_slot_changes$2, get_OLSKCollectionItem_slot_context$2);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCollectionItem_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCollectionItem_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKCollectionItem_slot) OLSKCollectionItem_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(464:2) {#if $$slots.OLSKCollectionItem}",
    		ctx
    	});

    	return block;
    }

    // (463:1) 
    function create_OLSKCollectionItem_slot$1(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKCollectionItem && create_if_block_4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$4, 462, 1, 11580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKCollectionItem) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot$1.name,
    		type: "slot",
    		source: "(463:1) ",
    		ctx
    	});

    	return block;
    }

    // (469:1) 
    function create_OLSKCollectionEmpty_slot$1(ctx) {
    	let div;
    	let olskplaceholder;
    	let current;

    	olskplaceholder = new Main$3({
    			props: {
    				OLSKPlaceholderHTML: main_1("OLSKCatalogMasterPlaceholderText")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(olskplaceholder.$$.fragment);
    			attr_dev(div, "slot", "OLSKCollectionEmpty");
    			add_location(div, file$4, 468, 1, 11734);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(olskplaceholder, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskplaceholder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskplaceholder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(olskplaceholder);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionEmpty_slot$1.name,
    		type: "slot",
    		source: "(469:1) ",
    		ctx
    	});

    	return block;
    }

    // (474:2) {#if $$slots.OLSKNarrowBodyTail}
    function create_if_block_3(ctx) {
    	let current;
    	const OLSKNarrowBodyTail_slot_template = /*#slots*/ ctx[25].OLSKNarrowBodyTail;
    	const OLSKNarrowBodyTail_slot = create_slot(OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[28], get_OLSKNarrowBodyTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKNarrowBodyTail_slot) {
    				OLSKNarrowBodyTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKNarrowBodyTail_slot) {
    				if (OLSKNarrowBodyTail_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
    					update_slot(OLSKNarrowBodyTail_slot, OLSKNarrowBodyTail_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_OLSKNarrowBodyTail_slot_changes$1, get_OLSKNarrowBodyTail_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKNarrowBodyTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKNarrowBodyTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKNarrowBodyTail_slot) OLSKNarrowBodyTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(474:2) {#if $$slots.OLSKNarrowBodyTail}",
    		ctx
    	});

    	return block;
    }

    // (473:1) 
    function create_OLSKNarrowBodyTail_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKNarrowBodyTail && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKNarrowBodyTail");
    			add_location(div, file$4, 472, 1, 11873);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKNarrowBodyTail) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowBodyTail_slot.name,
    		type: "slot",
    		source: "(473:1) ",
    		ctx
    	});

    	return block;
    }

    // (481:1) {#if !mod._ValueItemSelected }
    function create_if_block_2$2(ctx) {
    	let olskplaceholder;
    	let current;

    	olskplaceholder = new Main$3({
    			props: {
    				OLSKPlaceholderHTML: !/*mod*/ ctx[10]._ValueStashEnabled
    				? ""
    				: main_1$3(main_1("OLSKCatalogStashPlaceholderTextFormat"), /*mod*/ ctx[10]._ValueStashCount)
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskplaceholder.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskplaceholder, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskplaceholder_changes = {};

    			if (dirty & /*mod*/ 1024) olskplaceholder_changes.OLSKPlaceholderHTML = !/*mod*/ ctx[10]._ValueStashEnabled
    			? ""
    			: main_1$3(main_1("OLSKCatalogStashPlaceholderTextFormat"), /*mod*/ ctx[10]._ValueStashCount);

    			olskplaceholder.$set(olskplaceholder_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskplaceholder.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskplaceholder.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskplaceholder, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(481:1) {#if !mod._ValueItemSelected }",
    		ctx
    	});

    	return block;
    }

    // (485:1) {#if mod._ValueItemSelected }
    function create_if_block$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*$$slots*/ ctx[11].OLSKCatalogDetailContent && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[11].OLSKCatalogDetailContent) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 2048) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(485:1) {#if mod._ValueItemSelected }",
    		ctx
    	});

    	return block;
    }

    // (486:2) {#if $$slots.OLSKCatalogDetailContent }
    function create_if_block_1$2(ctx) {
    	let div;
    	let mod_LifecycleDetailDidCreate_action;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const OLSKCatalogDetailContent_slot_template = /*#slots*/ ctx[25].OLSKCatalogDetailContent;
    	const OLSKCatalogDetailContent_slot = create_slot(OLSKCatalogDetailContent_slot_template, ctx, /*$$scope*/ ctx[28], get_OLSKCatalogDetailContent_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = space();
    			if (OLSKCatalogDetailContent_slot) OLSKCatalogDetailContent_slot.c();
    			set_style(div, "display", "none");
    			add_location(div, file$4, 486, 3, 12469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			/*div_binding*/ ctx[27](div);
    			insert_dev(target, t, anchor);

    			if (OLSKCatalogDetailContent_slot) {
    				OLSKCatalogDetailContent_slot.m(target, anchor);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(mod_LifecycleDetailDidCreate_action = /*mod*/ ctx[10].LifecycleDetailDidCreate(div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKCatalogDetailContent_slot) {
    				if (OLSKCatalogDetailContent_slot.p && (!current || dirty & /*$$scope, mod*/ 268436480)) {
    					update_slot(OLSKCatalogDetailContent_slot, OLSKCatalogDetailContent_slot_template, ctx, /*$$scope*/ ctx[28], dirty, get_OLSKCatalogDetailContent_slot_changes, get_OLSKCatalogDetailContent_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKCatalogDetailContent_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKCatalogDetailContent_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*div_binding*/ ctx[27](null);
    			if (detaching) detach_dev(t);
    			if (OLSKCatalogDetailContent_slot) OLSKCatalogDetailContent_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(486:2) {#if $$slots.OLSKCatalogDetailContent }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div1;
    	let olsknarrow;
    	let t0;
    	let div0;
    	let t1;
    	let div0_aria_hidden_value;
    	let current;
    	let mounted;
    	let dispose;

    	let olsknarrow_props = {
    		OLSKCollectionSortFunction: /*OLSKCatalogSortFunction*/ ctx[4],
    		_OLSKCollectionDispatchKey: /*_OLSKCatalogDispatchKey*/ ctx[5],
    		OLSKCollectionChunkFunction: /*OLSKCollectionChunkFunction*/ ctx[6],
    		OLSKCollectionChunkKeySortFunction: /*OLSKCollectionChunkKeySortFunction*/ ctx[7],
    		OLSKCollectionItemClass: /*OLSKCollectionItemClass*/ ctx[2],
    		OLSKCollectionItems: /*mod*/ ctx[10]._ValueItemsVisible,
    		OLSKCollectionItemsLocus: /*mod*/ ctx[10]._ValueItemSelected,
    		OLSKNarrowFilterText: /*mod*/ ctx[10]._ValueFilterText,
    		OLSKNarrowFilterFieldPlaceholderText: /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[3],
    		OLSKCollectionDispatchClick: /*OLSKCollectionDispatchClick*/ ctx[8],
    		OLSKCollectionDispatchArrow: /*OLSKCollectionDispatchArrow*/ ctx[9],
    		OLSKCollectionDispatchStash: /*mod*/ ctx[10].OLSKCollectionDispatchStash,
    		OLSKNarrowDispatchFilter: /*mod*/ ctx[10].OLSKNarrowDispatchFilter,
    		OLSKNarrowDispatchSubmit: /*mod*/ ctx[10].OLSKNarrowDispatchSubmit,
    		OLSKCollectionItemAccessibilitySummaryFunction: /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[1],
    		OLSKMobileViewInactive: /*mod*/ ctx[10].OLSKMobileViewInactive,
    		$$slots: {
    			OLSKNarrowBodyTail: [
    				create_OLSKNarrowBodyTail_slot,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			],
    			OLSKCollectionEmpty: [
    				create_OLSKCollectionEmpty_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			],
    			OLSKNarrowToolbarTail: [
    				create_OLSKNarrowToolbarTail_slot,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			],
    			OLSKNarrowToolbarHead: [
    				create_OLSKNarrowToolbarHead_slot,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			],
    			default: [
    				create_default_slot$1,
    				({ OLSKCollectionItem: e }) => ({ 29: e }),
    				({ OLSKCollectionItem: e }) => e ? 536870912 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olsknarrow = new Main$2({ props: olsknarrow_props, $$inline: true });
    	/*olsknarrow_binding*/ ctx[26](olsknarrow);
    	let if_block0 = !/*mod*/ ctx[10]._ValueItemSelected && create_if_block_2$2(ctx);
    	let if_block1 = /*mod*/ ctx[10]._ValueItemSelected && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(olsknarrow.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "OLSKCatalogDetail OLSKViewportDetail svelte-lb6a1q");
    			attr_dev(div0, "aria-hidden", div0_aria_hidden_value = /*mod*/ ctx[10].OLSKMobileViewInactive ? true : null);
    			toggle_class(div0, "OLSKMobileViewInactive", !/*mod*/ ctx[10].OLSKMobileViewInactive);
    			add_location(div0, file$4, 479, 0, 12015);
    			attr_dev(div1, "class", "OLSKCatalog svelte-lb6a1q");
    			add_location(div1, file$4, 416, 0, 9927);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(olsknarrow, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block1) if_block1.m(div0, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					window_1,
    					"keydown",
    					function () {
    						if (is_function(/*mod*/ ctx[10].InterfaceWindowDidKeydown)) /*mod*/ ctx[10].InterfaceWindowDidKeydown.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			const olsknarrow_changes = {};
    			if (dirty & /*OLSKCatalogSortFunction*/ 16) olsknarrow_changes.OLSKCollectionSortFunction = /*OLSKCatalogSortFunction*/ ctx[4];
    			if (dirty & /*_OLSKCatalogDispatchKey*/ 32) olsknarrow_changes._OLSKCollectionDispatchKey = /*_OLSKCatalogDispatchKey*/ ctx[5];
    			if (dirty & /*OLSKCollectionChunkFunction*/ 64) olsknarrow_changes.OLSKCollectionChunkFunction = /*OLSKCollectionChunkFunction*/ ctx[6];
    			if (dirty & /*OLSKCollectionChunkKeySortFunction*/ 128) olsknarrow_changes.OLSKCollectionChunkKeySortFunction = /*OLSKCollectionChunkKeySortFunction*/ ctx[7];
    			if (dirty & /*OLSKCollectionItemClass*/ 4) olsknarrow_changes.OLSKCollectionItemClass = /*OLSKCollectionItemClass*/ ctx[2];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionItems = /*mod*/ ctx[10]._ValueItemsVisible;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionItemsLocus = /*mod*/ ctx[10]._ValueItemSelected;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowFilterText = /*mod*/ ctx[10]._ValueFilterText;
    			if (dirty & /*OLSKNarrowFilterFieldPlaceholderText*/ 8) olsknarrow_changes.OLSKNarrowFilterFieldPlaceholderText = /*OLSKNarrowFilterFieldPlaceholderText*/ ctx[3];
    			if (dirty & /*OLSKCollectionDispatchClick*/ 256) olsknarrow_changes.OLSKCollectionDispatchClick = /*OLSKCollectionDispatchClick*/ ctx[8];
    			if (dirty & /*OLSKCollectionDispatchArrow*/ 512) olsknarrow_changes.OLSKCollectionDispatchArrow = /*OLSKCollectionDispatchArrow*/ ctx[9];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKCollectionDispatchStash = /*mod*/ ctx[10].OLSKCollectionDispatchStash;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowDispatchFilter = /*mod*/ ctx[10].OLSKNarrowDispatchFilter;
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKNarrowDispatchSubmit = /*mod*/ ctx[10].OLSKNarrowDispatchSubmit;
    			if (dirty & /*OLSKCollectionItemAccessibilitySummaryFunction*/ 2) olsknarrow_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[1];
    			if (dirty & /*mod*/ 1024) olsknarrow_changes.OLSKMobileViewInactive = /*mod*/ ctx[10].OLSKMobileViewInactive;

    			if (dirty & /*$$scope, $$slots, e, mod*/ 805309440) {
    				olsknarrow_changes.$$scope = { dirty, ctx };
    			}

    			olsknarrow.$set(olsknarrow_changes);

    			if (!/*mod*/ ctx[10]._ValueItemSelected) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*mod*/ 1024) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*mod*/ ctx[10]._ValueItemSelected) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*mod*/ 1024) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$3(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*mod*/ 1024 && div0_aria_hidden_value !== (div0_aria_hidden_value = /*mod*/ ctx[10].OLSKMobileViewInactive ? true : null)) {
    				attr_dev(div0, "aria-hidden", div0_aria_hidden_value);
    			}

    			if (dirty & /*mod*/ 1024) {
    				toggle_class(div0, "OLSKMobileViewInactive", !/*mod*/ ctx[10].OLSKMobileViewInactive);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olsknarrow.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olsknarrow.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*olsknarrow_binding*/ ctx[26](null);
    			destroy_component(olsknarrow);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;

    	validate_slots("Main", slots, [
    		'OLSKNarrowBodyTail','OLSKCollectionItem','OLSKNarrowToolbarTail','OLSKNarrowToolbarHead','default','OLSKCatalogDetailContent'
    	]);

    	const $$slots = compute_slots(slots);
    	let { OLSKCollectionItemAccessibilitySummaryFunction } = $$props;
    	let { OLSKCollectionItemClass = "" } = $$props;
    	let { OLSKNarrowFilterFieldPlaceholderText = "" } = $$props;
    	let { _OLSKCatalogArchiveField = null } = $$props;
    	let { OLSKCatalogSortFunction } = $$props;
    	let { OLSKCatalogIsMatch } = $$props;
    	let { OLSKCatalogExactSortFunction = null } = $$props;
    	let { _OLSKCatalogDispatchKey } = $$props;
    	let { OLSKCollectionChunkFunction = null } = $$props;
    	let { OLSKCollectionChunkKeySortFunction = null } = $$props;
    	let { OLSKCollectionDispatchClick } = $$props;
    	let { OLSKCollectionDispatchArrow } = $$props;
    	let { OLSKCollectionDispatchStash = null } = $$props;
    	let { OLSKCatalogDispatchDetailActivate = null } = $$props;
    	let { OLSKCatalogDispatchMasterShouldActivate = null } = $$props;
    	let { OLSKCatalogDispatchArchivedHide = null } = $$props;
    	let { OLSKCatalogDispatchArchivedShow = null } = $$props;
    	let { OLSKCatalogDispatchFilterSubmit = null } = $$props;
    	let { OLSKCatalogDispatchQuantity = null } = $$props;
    	let { OLSKCatalogDispatchEscapeOnEmpty = null } = $$props;
    	let { OLSKCatalogDispatchStash = null } = $$props;
    	let { OLSKCatalogItems = [] } = $$props;

    	const modPublic = {
    		// DATA
    		_OLSKCatalogDataItemsAll() {
    			return mod._ValueItemsAll.slice();
    		},
    		OLSKCatalogDataItemSelected() {
    			return mod._ValueItemSelected;
    		},
    		_OLSKCatalogDataFilterText() {
    			return mod._ValueFilterText;
    		},
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// CONTROL
    		OLSKCatalogInsert(inputData) {
    			mod.ValueItemsAll([inputData].concat(mod._ValueItemsAll), !mod._ValueItemSelected);
    			OLSKCatalogDispatchQuantity && OLSKCatalogDispatchQuantity(mod._ValueItemsAll.length);

    			if (inputData[_OLSKCatalogArchiveField]) {
    				OLSKCatalogDispatchArchivedHide();
    			}

    			return inputData;
    		},
    		_OLSKCatalogInsertAndSort(inputData) {
    			modPublic.OLSKCatalogInsert(inputData);
    			mod.ValueItemsAll([].concat(mod._ValueItemsAll), true);
    			return inputData;
    		},
    		OLSKCatalogSelect(inputData) {
    			return $$invalidate(10, mod._ValueItemSelected = inputData, mod);
    		},
    		OLSKCatalogUpdate(inputData) {
    			$$invalidate(
    				10,
    				mod._ValueItemsAll = mod._ValueItemsAll.map(function (e) {
    					return _OLSKCatalogDispatchKey(e) === _OLSKCatalogDispatchKey(inputData)
    					? inputData
    					: e;
    				}),
    				mod
    			);

    			$$invalidate(
    				10,
    				mod._ValueItemsVisible = mod._ValueItemsVisible.map(function (e) {
    					return _OLSKCatalogDispatchKey(e) === _OLSKCatalogDispatchKey(inputData)
    					? inputData
    					: e;
    				}),
    				mod
    			);

    			if (!mod._ValueItemSelected) {
    				mod.ValueItemsAll(mod._ValueItemsAll);
    			}

    			return inputData;
    		},
    		OLSKCatalogRemove(inputData) {
    			mod.ValueItemsAll(
    				mod._ValueItemsAll.filter(function (e) {
    					return _OLSKCatalogDispatchKey(e) !== _OLSKCatalogDispatchKey(inputData);
    				}),
    				!mod._ValueItemSelected
    			);

    			OLSKCatalogDispatchQuantity && OLSKCatalogDispatchQuantity(mod._ValueItemsAll.length);

    			if (!mod._ValueItemSelected) {
    				return;
    			}

    			if (_OLSKCatalogDispatchKey(inputData) !== _OLSKCatalogDispatchKey(mod._ValueItemSelected)) {
    				return;
    			}

    			modPublic.OLSKCatalogSelect(null);
    			modPublic.OLSKCatalogFocusMaster();
    			mod.ControlFocusMaster();
    		},
    		OLSKCatalogActivateDetail() {
    			if (mod.DataIsMobile()) {
    				return;
    			}

    			if (mod._OLSKCatalogDetail) {
    				return OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate();
    			}

    			$$invalidate(10, mod._ValueShouldActivate = true, mod);
    		},
    		OLSKCatalogFilterWithNoThrottle(inputData) {
    			mod.ControlFilterWithNoThrottle($$invalidate(10, mod._ValueFilterText = inputData, mod));
    		},
    		OLSKCatalogRevealArchive() {
    			$$invalidate(10, mod._ValueArchiveIsVisible = true, mod);
    			mod.ValueItemsVisible(mod._ValueItemsAll);
    			OLSKCatalogDispatchArchivedShow();
    		},
    		OLSKCatalogFocusDetail() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = true, mod);
    		},
    		OLSKCatalogFocusMaster() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);

    			if (!mod.DataIsMobile()) {
    				return;
    			}

    			const element = document.querySelector(".OLSKCollectionItemLocus");

    			if (!element) {
    				return;
    			}

    			setTimeout(function () {
    				element.scrollIntoView({ block: "center", inline: "center" });
    			});
    		},
    		OLSKCatalogStashEnabled(inputData) {
    			if (typeof inputData === "undefined") {
    				return mod._ValueStashEnabled;
    			}

    			const selected = mod._ValueItemSelected;

    			if (!modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic.OLSKCollectionStashEnabled($$invalidate(10, mod._ValueStashEnabled = inputData, mod)) || !selected) {
    				return $$invalidate(10, mod._ValueStashCount = 0, mod);
    			}

    			$$invalidate(10, mod._ValueItemSelected = null, mod);
    			modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic._OLSKCollectionStashToggle(selected);
    		}
    	};

    	const mod = {
    		OLSKMobileViewInactive: false,
    		// VALUE
    		_ValueItemsAll: [],
    		ValueItemsAll(inputData, shouldSort = true) {
    			mod.ValueArchiveCount(inputData);

    			mod.ValueItemsVisible(
    				$$invalidate(
    					10,
    					mod._ValueItemsAll = shouldSort
    					? inputData.sort(OLSKCatalogSortFunction)
    					: inputData,
    					mod
    				),
    				shouldSort
    			);
    		},
    		_ValueArchiveCount: 0,
    		_ValueArchiveIsVisible: false,
    		ValueArchiveCount(inputData) {
    			if (!_OLSKCatalogArchiveField) {
    				return;
    			}

    			$$invalidate(
    				10,
    				mod._ValueArchiveCount = inputData.filter(function (e) {
    					return e[_OLSKCatalogArchiveField];
    				}).length,
    				mod
    			);
    		},
    		_ValueItemsVisible: [],
    		ValueItemsVisible(inputData, shouldSort = true) {
    			const items = inputData.filter(function (e) {
    				if (!mod._ValueArchiveIsVisible && _OLSKCatalogArchiveField && e[_OLSKCatalogArchiveField]) {
    					return false;
    				}

    				return !mod._ValueFilterText || OLSKCatalogIsMatch(e, mod._ValueFilterText);
    			});

    			$$invalidate(10, mod._ValueItemsVisible = shouldSort ? items.sort(OLSKCatalogSortFunction) : items, mod);
    		},
    		_ValueItemSelected: null,
    		ValueItemSelected(inputData) {
    			$$invalidate(10, mod._ValueItemSelected = inputData, mod);

    			if (!inputData) {
    				$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);
    			}
    		},
    		_ValueFilterText: "",
    		_ValueStashEnabled: false,
    		// DATA
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		// INTERFACE
    		InterfaceStashDoneButtonDidClick() {
    			OLSKCatalogDispatchStash && OLSKCatalogDispatchStash(modPublic._OLSKNarrow.modPublic._OLSKCollection.modPublic._OLSKCollectionStashItems);
    			modPublic.OLSKCatalogStashEnabled(false);
    		},
    		InterfaceWindowDidKeydown(event) {
    			if (document.querySelector(".LCHLauncher")) {
    				// #spec
    				return;
    			}

    			const handlerFunctions = {
    				Escape() {
    					if (!mod._ValueFilterText && !mod._ValueItemSelected) {
    						OLSKCatalogDispatchEscapeOnEmpty && OLSKCatalogDispatchEscapeOnEmpty();
    					}

    					mod.ControlDeselect();
    				},
    				Tab() {
    					if (document.activeElement === document.querySelector(".OLSKNarrowFilterField") && mod._ValueItemSelected) {
    						return event.preventDefault(OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate());
    					}

    					if (event.shiftKey && document.activeElement !== document.querySelector(".OLSKNarrowFilterField") && OLSKCatalogDispatchMasterShouldActivate && OLSKCatalogDispatchMasterShouldActivate()) {
    						return event.preventDefault(mod.ControlFocusMaster());
    					}
    				}
    			};

    			handlerFunctions[event.key] && handlerFunctions[event.key]();
    		},
    		// CONTROL
    		ControlSelect(inputData) {
    			mod.ValueItemSelected(inputData);

    			if (!inputData) {
    				return !mod.DataIsMobile() && mod.ControlFocusMaster();
    			}
    		},
    		ControlFilterWithThrottle(inputData) {
    			$$invalidate(10, mod._ValueFilterText = inputData, mod);

    			main$1.OLSKThrottleMappedTimeout(mod, "_ValueFilterThrottle", {
    				OLSKThrottleDuration: 200,
    				OLSKThrottleCallback() {
    					return mod.ControlFilterWithNoThrottle(mod._ValueFilterText);
    				}
    			});

    			if (main_1$1()) {
    				main$1.OLSKThrottleSkip(mod._ValueFilterThrottle);
    			}
    		},
    		ControlFilterWithNoThrottle(inputData) {
    			if (mod._ValueArchiveCount) {
    				$$invalidate(10, mod._ValueArchiveIsVisible = !!inputData, mod)
    				? OLSKCatalogDispatchArchivedShow()
    				: OLSKCatalogDispatchArchivedHide();
    			}

    			mod.ValueItemsVisible(mod._ValueItemsAll);

    			if (!inputData) {
    				return mod.ControlSelect(null);
    			}

    			if (!mod._ValueItemsVisible.length) {
    				return mod.ControlSelect(null);
    			}

    			OLSKCatalogExactSortFunction && mod.ValueItemSelected(mod._ValueItemsVisible.slice().sort(function (a, b) {
    				return OLSKCatalogExactSortFunction(inputData, a, b);
    			}).shift());
    		},
    		ControlFocusMaster() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = false, mod);

    			if (mod.DataIsMobile()) {
    				return;
    			}

    			document.querySelector(".OLSKNarrowFilterField").focus();
    		},
    		ControlFocusDetail() {
    			$$invalidate(10, mod.OLSKMobileViewInactive = true, mod);
    			setTimeout(mod.ControlFocusDetail);
    		},
    		ControlDeselect() {
    			mod.ValueArchiveCount(mod._ValueItemsAll);
    			mod._ValueItemsAll.sort(OLSKCatalogSortFunction);
    			mod.ControlFilterWithNoThrottle($$invalidate(10, mod._ValueFilterText = "", mod));

    			if (typeof main_1$1 !== "undefined" && !main_1$1()) {
    				document.querySelector(".OLSKNarrowBody").scrollTo(0, 0);
    			}
    		},
    		// MESSAGE
    		OLSKNarrowDispatchFilter(inputData) {
    			mod.ControlFilterWithThrottle(inputData);
    		},
    		OLSKNarrowDispatchSubmit() {
    			mod._ValueFilterText && OLSKCatalogDispatchFilterSubmit && OLSKCatalogDispatchFilterSubmit(mod._ValueFilterText);
    		},
    		OLSKCollectionDispatchStash(inputData) {
    			$$invalidate(10, mod._ValueStashCount = inputData.length, mod);
    			OLSKCollectionDispatchStash && OLSKCollectionDispatchStash(inputData);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupFocus();
    			mod.SetupItems();
    		},
    		SetupFocus() {
    			setTimeout(mod.ControlFocusMaster);
    		},
    		SetupItems() {
    			mod.ValueItemsAll(OLSKCatalogItems);

    			if (mod._ValueArchiveCount) {
    				OLSKCatalogDispatchArchivedHide();
    			}
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod.SetupEverything();
    		},
    		LifecycleDetailDidCreate() {
    			if (!mod._ValueShouldActivate) {
    				return;
    			}

    			delete mod._ValueShouldActivate;
    			OLSKCatalogDispatchDetailActivate && OLSKCatalogDispatchDetailActivate();
    		}
    	};

    	onMount(mod.LifecycleModuleWillMount);

    	const writable_props = [
    		"OLSKCollectionItemAccessibilitySummaryFunction",
    		"OLSKCollectionItemClass",
    		"OLSKNarrowFilterFieldPlaceholderText",
    		"_OLSKCatalogArchiveField",
    		"OLSKCatalogSortFunction",
    		"OLSKCatalogIsMatch",
    		"OLSKCatalogExactSortFunction",
    		"_OLSKCatalogDispatchKey",
    		"OLSKCollectionChunkFunction",
    		"OLSKCollectionChunkKeySortFunction",
    		"OLSKCollectionDispatchClick",
    		"OLSKCollectionDispatchArrow",
    		"OLSKCollectionDispatchStash",
    		"OLSKCatalogDispatchDetailActivate",
    		"OLSKCatalogDispatchMasterShouldActivate",
    		"OLSKCatalogDispatchArchivedHide",
    		"OLSKCatalogDispatchArchivedShow",
    		"OLSKCatalogDispatchFilterSubmit",
    		"OLSKCatalogDispatchQuantity",
    		"OLSKCatalogDispatchEscapeOnEmpty",
    		"OLSKCatalogDispatchStash",
    		"OLSKCatalogItems"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function olsknarrow_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			modPublic._OLSKNarrow = $$value;
    			$$invalidate(0, modPublic);
    		});
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._OLSKCatalogDetail = $$value;
    			$$invalidate(10, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(1, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(2, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKNarrowFilterFieldPlaceholderText" in $$props) $$invalidate(3, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ("_OLSKCatalogArchiveField" in $$props) $$invalidate(12, _OLSKCatalogArchiveField = $$props._OLSKCatalogArchiveField);
    		if ("OLSKCatalogSortFunction" in $$props) $$invalidate(4, OLSKCatalogSortFunction = $$props.OLSKCatalogSortFunction);
    		if ("OLSKCatalogIsMatch" in $$props) $$invalidate(13, OLSKCatalogIsMatch = $$props.OLSKCatalogIsMatch);
    		if ("OLSKCatalogExactSortFunction" in $$props) $$invalidate(14, OLSKCatalogExactSortFunction = $$props.OLSKCatalogExactSortFunction);
    		if ("_OLSKCatalogDispatchKey" in $$props) $$invalidate(5, _OLSKCatalogDispatchKey = $$props._OLSKCatalogDispatchKey);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(6, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(7, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(8, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(9, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(15, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKCatalogDispatchDetailActivate" in $$props) $$invalidate(16, OLSKCatalogDispatchDetailActivate = $$props.OLSKCatalogDispatchDetailActivate);
    		if ("OLSKCatalogDispatchMasterShouldActivate" in $$props) $$invalidate(17, OLSKCatalogDispatchMasterShouldActivate = $$props.OLSKCatalogDispatchMasterShouldActivate);
    		if ("OLSKCatalogDispatchArchivedHide" in $$props) $$invalidate(18, OLSKCatalogDispatchArchivedHide = $$props.OLSKCatalogDispatchArchivedHide);
    		if ("OLSKCatalogDispatchArchivedShow" in $$props) $$invalidate(19, OLSKCatalogDispatchArchivedShow = $$props.OLSKCatalogDispatchArchivedShow);
    		if ("OLSKCatalogDispatchFilterSubmit" in $$props) $$invalidate(20, OLSKCatalogDispatchFilterSubmit = $$props.OLSKCatalogDispatchFilterSubmit);
    		if ("OLSKCatalogDispatchQuantity" in $$props) $$invalidate(21, OLSKCatalogDispatchQuantity = $$props.OLSKCatalogDispatchQuantity);
    		if ("OLSKCatalogDispatchEscapeOnEmpty" in $$props) $$invalidate(22, OLSKCatalogDispatchEscapeOnEmpty = $$props.OLSKCatalogDispatchEscapeOnEmpty);
    		if ("OLSKCatalogDispatchStash" in $$props) $$invalidate(23, OLSKCatalogDispatchStash = $$props.OLSKCatalogDispatchStash);
    		if ("OLSKCatalogItems" in $$props) $$invalidate(24, OLSKCatalogItems = $$props.OLSKCatalogItems);
    		if ("$$scope" in $$props) $$invalidate(28, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		_OLSKCatalogArchiveField,
    		OLSKCatalogSortFunction,
    		OLSKCatalogIsMatch,
    		OLSKCatalogExactSortFunction,
    		_OLSKCatalogDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		OLSKCollectionDispatchStash,
    		OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchArchivedHide,
    		OLSKCatalogDispatchArchivedShow,
    		OLSKCatalogDispatchFilterSubmit,
    		OLSKCatalogDispatchQuantity,
    		OLSKCatalogDispatchEscapeOnEmpty,
    		OLSKCatalogDispatchStash,
    		OLSKCatalogItems,
    		OLSKLocalized: main_1,
    		OLSKFormatted: main_1$3,
    		OLSK_SPEC_UI: main_1$1,
    		OLSKThrottle: main$1,
    		modPublic,
    		mod,
    		onMount,
    		OLSKNarrow: Main$2,
    		OLSKPlaceholder: Main$3
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKCollectionItemAccessibilitySummaryFunction" in $$props) $$invalidate(1, OLSKCollectionItemAccessibilitySummaryFunction = $$props.OLSKCollectionItemAccessibilitySummaryFunction);
    		if ("OLSKCollectionItemClass" in $$props) $$invalidate(2, OLSKCollectionItemClass = $$props.OLSKCollectionItemClass);
    		if ("OLSKNarrowFilterFieldPlaceholderText" in $$props) $$invalidate(3, OLSKNarrowFilterFieldPlaceholderText = $$props.OLSKNarrowFilterFieldPlaceholderText);
    		if ("_OLSKCatalogArchiveField" in $$props) $$invalidate(12, _OLSKCatalogArchiveField = $$props._OLSKCatalogArchiveField);
    		if ("OLSKCatalogSortFunction" in $$props) $$invalidate(4, OLSKCatalogSortFunction = $$props.OLSKCatalogSortFunction);
    		if ("OLSKCatalogIsMatch" in $$props) $$invalidate(13, OLSKCatalogIsMatch = $$props.OLSKCatalogIsMatch);
    		if ("OLSKCatalogExactSortFunction" in $$props) $$invalidate(14, OLSKCatalogExactSortFunction = $$props.OLSKCatalogExactSortFunction);
    		if ("_OLSKCatalogDispatchKey" in $$props) $$invalidate(5, _OLSKCatalogDispatchKey = $$props._OLSKCatalogDispatchKey);
    		if ("OLSKCollectionChunkFunction" in $$props) $$invalidate(6, OLSKCollectionChunkFunction = $$props.OLSKCollectionChunkFunction);
    		if ("OLSKCollectionChunkKeySortFunction" in $$props) $$invalidate(7, OLSKCollectionChunkKeySortFunction = $$props.OLSKCollectionChunkKeySortFunction);
    		if ("OLSKCollectionDispatchClick" in $$props) $$invalidate(8, OLSKCollectionDispatchClick = $$props.OLSKCollectionDispatchClick);
    		if ("OLSKCollectionDispatchArrow" in $$props) $$invalidate(9, OLSKCollectionDispatchArrow = $$props.OLSKCollectionDispatchArrow);
    		if ("OLSKCollectionDispatchStash" in $$props) $$invalidate(15, OLSKCollectionDispatchStash = $$props.OLSKCollectionDispatchStash);
    		if ("OLSKCatalogDispatchDetailActivate" in $$props) $$invalidate(16, OLSKCatalogDispatchDetailActivate = $$props.OLSKCatalogDispatchDetailActivate);
    		if ("OLSKCatalogDispatchMasterShouldActivate" in $$props) $$invalidate(17, OLSKCatalogDispatchMasterShouldActivate = $$props.OLSKCatalogDispatchMasterShouldActivate);
    		if ("OLSKCatalogDispatchArchivedHide" in $$props) $$invalidate(18, OLSKCatalogDispatchArchivedHide = $$props.OLSKCatalogDispatchArchivedHide);
    		if ("OLSKCatalogDispatchArchivedShow" in $$props) $$invalidate(19, OLSKCatalogDispatchArchivedShow = $$props.OLSKCatalogDispatchArchivedShow);
    		if ("OLSKCatalogDispatchFilterSubmit" in $$props) $$invalidate(20, OLSKCatalogDispatchFilterSubmit = $$props.OLSKCatalogDispatchFilterSubmit);
    		if ("OLSKCatalogDispatchQuantity" in $$props) $$invalidate(21, OLSKCatalogDispatchQuantity = $$props.OLSKCatalogDispatchQuantity);
    		if ("OLSKCatalogDispatchEscapeOnEmpty" in $$props) $$invalidate(22, OLSKCatalogDispatchEscapeOnEmpty = $$props.OLSKCatalogDispatchEscapeOnEmpty);
    		if ("OLSKCatalogDispatchStash" in $$props) $$invalidate(23, OLSKCatalogDispatchStash = $$props.OLSKCatalogDispatchStash);
    		if ("OLSKCatalogItems" in $$props) $$invalidate(24, OLSKCatalogItems = $$props.OLSKCatalogItems);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		modPublic,
    		OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass,
    		OLSKNarrowFilterFieldPlaceholderText,
    		OLSKCatalogSortFunction,
    		_OLSKCatalogDispatchKey,
    		OLSKCollectionChunkFunction,
    		OLSKCollectionChunkKeySortFunction,
    		OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow,
    		mod,
    		$$slots,
    		_OLSKCatalogArchiveField,
    		OLSKCatalogIsMatch,
    		OLSKCatalogExactSortFunction,
    		OLSKCollectionDispatchStash,
    		OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchArchivedHide,
    		OLSKCatalogDispatchArchivedShow,
    		OLSKCatalogDispatchFilterSubmit,
    		OLSKCatalogDispatchQuantity,
    		OLSKCatalogDispatchEscapeOnEmpty,
    		OLSKCatalogDispatchStash,
    		OLSKCatalogItems,
    		slots,
    		olsknarrow_binding,
    		div_binding,
    		$$scope
    	];
    }

    class Main$4 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			OLSKCollectionItemAccessibilitySummaryFunction: 1,
    			OLSKCollectionItemClass: 2,
    			OLSKNarrowFilterFieldPlaceholderText: 3,
    			_OLSKCatalogArchiveField: 12,
    			OLSKCatalogSortFunction: 4,
    			OLSKCatalogIsMatch: 13,
    			OLSKCatalogExactSortFunction: 14,
    			_OLSKCatalogDispatchKey: 5,
    			OLSKCollectionChunkFunction: 6,
    			OLSKCollectionChunkKeySortFunction: 7,
    			OLSKCollectionDispatchClick: 8,
    			OLSKCollectionDispatchArrow: 9,
    			OLSKCollectionDispatchStash: 15,
    			OLSKCatalogDispatchDetailActivate: 16,
    			OLSKCatalogDispatchMasterShouldActivate: 17,
    			OLSKCatalogDispatchArchivedHide: 18,
    			OLSKCatalogDispatchArchivedShow: 19,
    			OLSKCatalogDispatchFilterSubmit: 20,
    			OLSKCatalogDispatchQuantity: 21,
    			OLSKCatalogDispatchEscapeOnEmpty: 22,
    			OLSKCatalogDispatchStash: 23,
    			OLSKCatalogItems: 24,
    			modPublic: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCollectionItemAccessibilitySummaryFunction*/ ctx[1] === undefined && !("OLSKCollectionItemAccessibilitySummaryFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionItemAccessibilitySummaryFunction'");
    		}

    		if (/*OLSKCatalogSortFunction*/ ctx[4] === undefined && !("OLSKCatalogSortFunction" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCatalogSortFunction'");
    		}

    		if (/*OLSKCatalogIsMatch*/ ctx[13] === undefined && !("OLSKCatalogIsMatch" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCatalogIsMatch'");
    		}

    		if (/*_OLSKCatalogDispatchKey*/ ctx[5] === undefined && !("_OLSKCatalogDispatchKey" in props)) {
    			console.warn("<Main> was created without expected prop '_OLSKCatalogDispatchKey'");
    		}

    		if (/*OLSKCollectionDispatchClick*/ ctx[8] === undefined && !("OLSKCollectionDispatchClick" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchClick'");
    		}

    		if (/*OLSKCollectionDispatchArrow*/ ctx[9] === undefined && !("OLSKCollectionDispatchArrow" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCollectionDispatchArrow'");
    		}
    	}

    	get OLSKCollectionItemAccessibilitySummaryFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemAccessibilitySummaryFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionItemClass() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionItemClass(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKNarrowFilterFieldPlaceholderText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKNarrowFilterFieldPlaceholderText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCatalogArchiveField() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCatalogArchiveField(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogIsMatch() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogIsMatch(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogExactSortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogExactSortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get _OLSKCatalogDispatchKey() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set _OLSKCatalogDispatchKey(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionChunkKeySortFunction() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionChunkKeySortFunction(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchClick() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchClick(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchArrow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchArrow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCollectionDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCollectionDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchDetailActivate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchDetailActivate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchMasterShouldActivate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchMasterShouldActivate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchArchivedHide() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchArchivedHide(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchArchivedShow() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchArchivedShow(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchFilterSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchFilterSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchQuantity() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchQuantity(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchEscapeOnEmpty() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchEscapeOnEmpty(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogDispatchStash() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogDispatchStash(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCatalogItems() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCatalogItems(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[0];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const mod$a = {

    	LCHComposeListItemTitle (inputData) {
    		if (typeof inputData !== 'object' || inputData === null) {
    			throw new Error('LCHErrorInputNotValid');
    		}

    		return inputData.LCHDocumentName || inputData.LCHDocumentSignature || inputData.LCHDocumentID;
    	},

    };

    /* os-app/open-compose/submodules/LCHComposeListItem/main.svelte generated by Svelte v3.38.2 */
    const file$5 = "os-app/open-compose/submodules/LCHComposeListItem/main.svelte";

    // (9:0) {#if LCHComposeListItem.LCHDocumentIsFlagged }
    function create_if_block$4(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "⚠️";
    			attr_dev(strong, "class", "LCHComposeListItemFlaggedAlert");
    			add_location(strong, file$5, 9, 1, 255);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(9:0) {#if LCHComposeListItem.LCHDocumentIsFlagged }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div;
    	let t0;
    	let strong;
    	let t1_value = mod$a.LCHComposeListItemTitle(/*LCHComposeListItem*/ ctx[0]) + "";
    	let t1;
    	let if_block = /*LCHComposeListItem*/ ctx[0].LCHDocumentIsFlagged && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			strong = element("strong");
    			t1 = text(t1_value);
    			attr_dev(strong, "class", "LCHComposeListItemTitle svelte-gopsbw");
    			add_location(strong, file$5, 12, 0, 321);
    			attr_dev(div, "class", "LCHComposeListItem svelte-gopsbw");
    			toggle_class(div, "LCHComposeListItemFlagged", /*LCHComposeListItem*/ ctx[0].LCHDocumentIsFlagged);
    			add_location(div, file$5, 6, 0, 97);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, strong);
    			append_dev(strong, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*LCHComposeListItem*/ ctx[0].LCHDocumentIsFlagged) {
    				if (if_block) ; else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*LCHComposeListItem*/ 1 && t1_value !== (t1_value = mod$a.LCHComposeListItemTitle(/*LCHComposeListItem*/ ctx[0]) + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*LCHComposeListItem*/ 1) {
    				toggle_class(div, "LCHComposeListItemFlagged", /*LCHComposeListItem*/ ctx[0].LCHDocumentIsFlagged);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { LCHComposeListItem } = $$props;
    	const writable_props = ["LCHComposeListItem"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("LCHComposeListItem" in $$props) $$invalidate(0, LCHComposeListItem = $$props.LCHComposeListItem);
    	};

    	$$self.$capture_state = () => ({ LCHComposeListItem, LCHComposeLogic: mod$a });

    	$$self.$inject_state = $$props => {
    		if ("LCHComposeListItem" in $$props) $$invalidate(0, LCHComposeListItem = $$props.LCHComposeListItem);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [LCHComposeListItem];
    }

    class Main$5 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { LCHComposeListItem: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*LCHComposeListItem*/ ctx[0] === undefined && !("LCHComposeListItem" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeListItem'");
    		}
    	}

    	get LCHComposeListItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeListItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var _OLSKSharedBack$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedBack\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedBack-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 11,1 L 4,8 11,15\" />\n</svg>\n";

    var _OLSKSharedClone$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedClone\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <g id=\"_OLSKSharedClone-group2\" clip-path=\"url(#_OLSKSharedClone-clip)\">\n        <clipPath id=\"_OLSKSharedClone-clip\">\n            <path d=\"M 12,0.44 C 12.51,0.61 12.87,0.95 13.04,1.41 13.06,1.47 13.06,1.47 13.07,1.51 13.14,1.78 13.15,1.95 13.15,2.53 13.15,2.72 13.15,2.72 13.15,3.5 L 13.15,4.15 12.5,4.15 5.03,4.15 C 4.57,4.15 4.47,4.16 4.35,4.19 4.34,4.19 4.34,4.19 4.33,4.19 4.28,4.21 4.21,4.28 4.19,4.35 4.19,4.34 4.19,4.34 4.19,4.35 4.16,4.47 4.15,4.57 4.15,5.03 4.15,6.08 4.15,6.08 4.15,9.25 4.15,11.08 4.15,11.08 4.15,12.5 L 4.15,13.15 3.5,13.15 2.53,13.15 C 1.9,13.15 1.73,13.14 1.47,13.05 0.98,12.88 0.63,12.54 0.46,12.09 0.36,11.77 0.35,11.59 0.35,10.97 L 0.35,2.53 0.35,2.53 C 0.35,1.9 0.36,1.73 0.45,1.47 0.62,0.98 0.96,0.63 1.41,0.46 1.73,0.36 1.91,0.35 2.52,0.35 L 10.97,0.35 10.97,0.35 C 11.6,0.35 12,0.44 12,0.44 Z M 12,0.44\" />\n        </clipPath>\n        <rect id=\"_OLSKSharedClone-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"1\" y=\"1\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    </g>\n    <rect id=\"_OLSKSharedClone-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" x=\"3.5\" y=\"3.5\" width=\"11.5\" height=\"11.5\" rx=\"1\" />\n    <g id=\"_OLSKSharedClone-group\">\n        <path id=\"_OLSKSharedClone-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 9.5,6.5 L 9.5,12.5\" />\n        <path id=\"_OLSKSharedClone-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 6.5,9.5 L 12.5,9.5\" />\n    </g>\n</svg>\n";

    var _OLSKSharedDiscard$1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"  xml:space=\"preserve\" id=\"_OLSKSharedDiscard\">\n    <!-- Generated by PaintCode (www.paintcodeapp.com) -->\n    <path id=\"_OLSKSharedDiscard-rectangle\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 4.53,6 L 13,6 13,13.47 C 13,13.91 13,14.13 12.93,14.33 L 12.93,14.37 C 12.83,14.63 12.63,14.83 12.37,14.93 12.13,15 11.91,15 11.47,15 L 4.53,15 C 4.09,15 3.87,15 3.67,14.93 L 3.63,14.93 C 3.37,14.83 3.17,14.63 3.07,14.37 3,14.13 3,13.91 3,13.47 L 3,6 Z M 4.53,6\" />\n    <path id=\"_OLSKSharedDiscard-bezier\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 1,3.5 L 15,3.5\" />\n    <path id=\"_OLSKSharedDiscard-rectangle2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" fill=\"none\" d=\"M 8,1 L 8,1 C 9.75,1 9.75,1 9.75,1 L 9.75,1 C 10.44,1 11,1.56 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 11,2.25 L 11,2.25 C 11,2.25 11,2.25 11,2.25 L 11,3.5 5,3.5 5,2.25 C 5,1.56 5.56,1 6.25,1 6.25,1 6.25,1 6.25,1 L 8,1 Z M 8,1\" />\n    <path id=\"_OLSKSharedDiscard-bezier2\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 5.5,5.5 L 5.5,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier3\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 8,6 L 8,15\" />\n    <path id=\"_OLSKSharedDiscard-bezier4\" stroke=\"rgb(0, 0, 0)\" stroke-width=\"1.3\" stroke-miterlimit=\"10\" fill=\"none\" d=\"M 10.5,5.5 L 10.5,15\" />\n</svg>\n";

    /* os-app/open-compose/submodules/LCHComposeInput/main.svelte generated by Svelte v3.38.2 */
    const file$6 = "os-app/open-compose/submodules/LCHComposeInput/main.svelte";

    // (137:1) {#if OLSK_SPEC_UI()}
    function create_if_block_1$3(ctx) {
    	let textarea;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			textarea = element("textarea");
    			attr_dev(textarea, "class", "LCHComposeInputFieldDebug");
    			add_location(textarea, file$6, 137, 2, 2883);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			set_input_value(textarea, /*LCHComposeInputItem*/ ctx[0][/*LCHComposeInputKey*/ ctx[1]]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[6]),
    					listen_dev(
    						textarea,
    						"input",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceEditorFieldDebugDidInput)) /*mod*/ ctx[2].InterfaceEditorFieldDebugDidInput.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*LCHComposeInputItem, LCHComposeInputKey*/ 3) {
    				set_input_value(textarea, /*LCHComposeInputItem*/ ctx[0][/*LCHComposeInputKey*/ ctx[1]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(137:1) {#if OLSK_SPEC_UI()}",
    		ctx
    	});

    	return block;
    }

    // (141:1) {#if !OLSK_SPEC_UI()}
    function create_if_block$5(ctx) {
    	let textarea;

    	const block = {
    		c: function create() {
    			textarea = element("textarea");
    			add_location(textarea, file$6, 141, 2, 3079);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			/*textarea_binding*/ ctx[7](textarea);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			/*textarea_binding*/ ctx[7](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(141:1) {#if !OLSK_SPEC_UI()}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div;
    	let show_if_1 = main_1$1();
    	let t;
    	let show_if = !main_1$1();
    	let if_block0 = show_if_1 && create_if_block_1$3(ctx);
    	let if_block1 = show_if && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "LCHComposeInput");
    			add_location(div, file$6, 135, 0, 2829);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (show_if_1) if_block0.p(ctx, dirty);
    			if (show_if) if_block1.p(ctx, dirty);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { LCHComposeInputItem } = $$props;
    	let { LCHComposeInputKey } = $$props;
    	let { LCHComposeInputOptions } = $$props;
    	let { LCHComposeInputDispatchUpdate } = $$props;

    	const modPublic = {
    		LCHComposeInputFocus() {
    			mod.ControlConfigureEditor(function (inputData) {
    				inputData.focus();
    			});
    		},
    		LCHComposeInputSetCursor(param1, param2) {
    			mod.ControlConfigureEditor(function (inputData) {
    				inputData.setCursor(CodeMirror.Pos(param1, param2));
    			});
    		},
    		LCHComposeInputScrollIntoView(param1, param2) {
    			mod.ControlConfigureEditor(function (inputData) {
    				inputData.scrollIntoView(CodeMirror.Pos(param1, param2), 300);
    			});
    		},
    		LCHComposeInputSetSelection(param1, param2, param3, param4) {
    			mod.ControlConfigureEditor(function (inputData) {
    				inputData.setSelection(CodeMirror.Pos(param1, param2), CodeMirror.Pos(param3, param4));
    			});
    		}
    	};

    	const mod = {
    		// VALUE
    		_ValueEditorElement: undefined,
    		_ValueEditorInstance: undefined,
    		_ValueEditorPostInitializeQueue: [],
    		// INTERFACE
    		InterfaceEditorFieldDebugDidInput() {
    			LCHComposeInputDispatchUpdate();
    		},
    		// CONTROL
    		ControlConfigureEditor(inputData) {
    			if (main_1$1()) {
    				return;
    			}

    			if (mod._ValueEditorInstance) {
    				return inputData(mod._ValueEditorInstance);
    			}

    			
    			mod._ValueEditorPostInitializeQueue.push(inputData);
    		},
    		// SETUP
    		SetupEverything() {
    			mod.SetupEditor();
    		},
    		SetupEditor() {
    			if (main_1$1()) {
    				return;
    			}

    			$$invalidate(2, mod._ValueEditorInstance = CodeMirror.fromTextArea(mod._ValueEditorElement, LCHComposeInputOptions), mod);

    			if (window.OLSK_DEMO && !window.OLSKDemoEditor) {
    				window.OLSKDemoEditor = mod._ValueEditorInstance;
    			}

    			mod._ValueEditorInstance.on("change", function (instance, changeObject) {
    				if (changeObject.origin === "setValue" && !window.OLSK_DEMO) {
    					return;
    				}

    				$$invalidate(0, LCHComposeInputItem[LCHComposeInputKey] = instance.getValue(), LCHComposeInputItem);
    				LCHComposeInputDispatchUpdate();
    			});

    			mod._ValueEditorPostInitializeQueue.splice(0, mod._ValueEditorPostInitializeQueue.length).forEach(function (e) {
    				return e(mod._ValueEditorInstance);
    			});

    			mod._ValueEditorInstance.setValue(LCHComposeInputItem[LCHComposeInputKey]);
    		},
    		// LIFECYCLE
    		LifecycleComponentDidMount() {
    			mod.SetupEverything();
    		}
    	};

    	let __PreviousItem;

    	const __MessageItemDidChange = function (inputData) {
    		if (!mod._ValueEditorInstance) {
    			__PreviousItem = inputData;
    			return;
    		}

    		if (__PreviousItem === inputData) {
    			return;
    		}

    		__PreviousItem = inputData;
    		mod._ValueEditorInstance.setValue(LCHComposeInputItem[LCHComposeInputKey]);
    		mod._ValueEditorInstance.getDoc().clearHistory();
    	};

    	
    	onMount(mod.LifecycleComponentDidMount);

    	const writable_props = [
    		"LCHComposeInputItem",
    		"LCHComposeInputKey",
    		"LCHComposeInputOptions",
    		"LCHComposeInputDispatchUpdate"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function textarea_input_handler() {
    		LCHComposeInputItem[LCHComposeInputKey] = this.value;
    		$$invalidate(0, LCHComposeInputItem);
    		$$invalidate(1, LCHComposeInputKey);
    	}

    	function textarea_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._ValueEditorElement = $$value;
    			$$invalidate(2, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("LCHComposeInputItem" in $$props) $$invalidate(0, LCHComposeInputItem = $$props.LCHComposeInputItem);
    		if ("LCHComposeInputKey" in $$props) $$invalidate(1, LCHComposeInputKey = $$props.LCHComposeInputKey);
    		if ("LCHComposeInputOptions" in $$props) $$invalidate(3, LCHComposeInputOptions = $$props.LCHComposeInputOptions);
    		if ("LCHComposeInputDispatchUpdate" in $$props) $$invalidate(4, LCHComposeInputDispatchUpdate = $$props.LCHComposeInputDispatchUpdate);
    	};

    	$$self.$capture_state = () => ({
    		LCHComposeInputItem,
    		LCHComposeInputKey,
    		LCHComposeInputOptions,
    		LCHComposeInputDispatchUpdate,
    		modPublic,
    		OLSK_SPEC_UI: main_1$1,
    		mod,
    		__PreviousItem,
    		__MessageItemDidChange,
    		onMount
    	});

    	$$self.$inject_state = $$props => {
    		if ("LCHComposeInputItem" in $$props) $$invalidate(0, LCHComposeInputItem = $$props.LCHComposeInputItem);
    		if ("LCHComposeInputKey" in $$props) $$invalidate(1, LCHComposeInputKey = $$props.LCHComposeInputKey);
    		if ("LCHComposeInputOptions" in $$props) $$invalidate(3, LCHComposeInputOptions = $$props.LCHComposeInputOptions);
    		if ("LCHComposeInputDispatchUpdate" in $$props) $$invalidate(4, LCHComposeInputDispatchUpdate = $$props.LCHComposeInputDispatchUpdate);
    		if ("__PreviousItem" in $$props) __PreviousItem = $$props.__PreviousItem;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*LCHComposeInputItem*/ 1) {
    			$: {
    				__MessageItemDidChange(LCHComposeInputItem);
    			}
    		}
    	};

    	return [
    		LCHComposeInputItem,
    		LCHComposeInputKey,
    		mod,
    		LCHComposeInputOptions,
    		LCHComposeInputDispatchUpdate,
    		modPublic,
    		textarea_input_handler,
    		textarea_binding
    	];
    }

    class Main$6 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			LCHComposeInputItem: 0,
    			LCHComposeInputKey: 1,
    			LCHComposeInputOptions: 3,
    			LCHComposeInputDispatchUpdate: 4,
    			modPublic: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*LCHComposeInputItem*/ ctx[0] === undefined && !("LCHComposeInputItem" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeInputItem'");
    		}

    		if (/*LCHComposeInputKey*/ ctx[1] === undefined && !("LCHComposeInputKey" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeInputKey'");
    		}

    		if (/*LCHComposeInputOptions*/ ctx[3] === undefined && !("LCHComposeInputOptions" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeInputOptions'");
    		}

    		if (/*LCHComposeInputDispatchUpdate*/ ctx[4] === undefined && !("LCHComposeInputDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeInputDispatchUpdate'");
    		}
    	}

    	get LCHComposeInputItem() {
    		return this.$$.ctx[0];
    	}

    	set LCHComposeInputItem(LCHComposeInputItem) {
    		this.$set({ LCHComposeInputItem });
    		flush();
    	}

    	get LCHComposeInputKey() {
    		return this.$$.ctx[1];
    	}

    	set LCHComposeInputKey(LCHComposeInputKey) {
    		this.$set({ LCHComposeInputKey });
    		flush();
    	}

    	get LCHComposeInputOptions() {
    		return this.$$.ctx[3];
    	}

    	set LCHComposeInputOptions(LCHComposeInputOptions) {
    		this.$set({ LCHComposeInputOptions });
    		flush();
    	}

    	get LCHComposeInputDispatchUpdate() {
    		return this.$$.ctx[4];
    	}

    	set LCHComposeInputDispatchUpdate(LCHComposeInputDispatchUpdate) {
    		this.$set({ LCHComposeInputDispatchUpdate });
    		flush();
    	}

    	get modPublic() {
    		return this.$$.ctx[5];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Cannot set read-only property 'modPublic'");
    	}
    }

    /* os-app/open-compose/submodules/LCHComposeDetail/main.svelte generated by Svelte v3.38.2 */
    const file$7 = "os-app/open-compose/submodules/LCHComposeDetail/main.svelte";

    // (38:0) {#if LCHComposeDetailItem.LCHDocumentIsFlagged}
    function create_if_block_3$1(ctx) {
    	let div;
    	let t_value = (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentSyntaxErrorMessage || main_1("LCHComposeDetailFlagAlertText")) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "LCHComposeDetailFlagAlert svelte-1kqkvr6");
    			add_location(div, file$7, 38, 1, 2098);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*LCHComposeDetailItem*/ 1 && t_value !== (t_value = (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentSyntaxErrorMessage || main_1("LCHComposeDetailFlagAlertText")) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(38:0) {#if LCHComposeDetailItem.LCHDocumentIsFlagged}",
    		ctx
    	});

    	return block;
    }

    // (53:1) {#if LCHComposeDetailItem.LCHDocumentCallbackArgs }
    function create_if_block_2$3(ctx) {
    	let input;
    	let input_placeholder_value;
    	let t0;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			span.textContent = "→";
    			attr_dev(input, "class", "LCHComposeDetailFormInputTypesField svelte-1kqkvr6");
    			attr_dev(input, "placeholder", input_placeholder_value = main_1("LCHComposeDetailFormInputTypesFieldText"));
    			attr_dev(input, "type", "text");
    			add_location(input, file$7, 53, 2, 2825);
    			add_location(span, file$7, 54, 2, 3070);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentInputTypes);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[8]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentInputTypes) {
    				set_input_value(input, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentInputTypes);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(53:1) {#if LCHComposeDetailItem.LCHDocumentCallbackArgs }",
    		ctx
    	});

    	return block;
    }

    // (93:0) {#if LCHComposeDetailItem.LCHDocumentOutputType === 'Bool'}
    function create_if_block_1$4(ctx) {
    	let p;
    	let lchcomposeinput;
    	let current;

    	lchcomposeinput = new Main$6({
    			props: {
    				LCHComposeInputItem: /*LCHComposeDetailItem*/ ctx[0],
    				LCHComposeInputKey: "LCHDocumentCanonicalExampleCallbackBody",
    				LCHComposeInputOptions: {
    					mode: "javascript",
    					lineNumbers: true,
    					lineWrapping: true,
    					placeholder: main_1("LCHComposeDetailFormCanonicalExampleCallbackBodyFieldText"),
    					keyMap: "sublime",
    					extraKeys: { Tab: false }
    				},
    				LCHComposeInputDispatchUpdate: /*LCHComposeDetailDispatchUpdate*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p = element("p");
    			create_component(lchcomposeinput.$$.fragment);
    			attr_dev(p, "class", "LCHComposeDetailFormCanonicalExampleCallbackBody");
    			add_location(p, file$7, 93, 1, 4227);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			mount_component(lchcomposeinput, p, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lchcomposeinput_changes = {};
    			if (dirty & /*LCHComposeDetailItem*/ 1) lchcomposeinput_changes.LCHComposeInputItem = /*LCHComposeDetailItem*/ ctx[0];
    			if (dirty & /*LCHComposeDetailDispatchUpdate*/ 16) lchcomposeinput_changes.LCHComposeInputDispatchUpdate = /*LCHComposeDetailDispatchUpdate*/ ctx[4];
    			lchcomposeinput.$set(lchcomposeinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lchcomposeinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lchcomposeinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			destroy_component(lchcomposeinput);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(93:0) {#if LCHComposeDetailItem.LCHDocumentOutputType === 'Bool'}",
    		ctx
    	});

    	return block;
    }

    // (147:0) {#if LCHComposeDetailItem.LCHDocumentURLFilter }
    function create_if_block$6(ctx) {
    	let p;
    	let label;
    	let input;
    	let t0;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p = element("p");
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			span.textContent = `${main_1("LCHComposeDetailFormIsAutomaticFieldLabelText")}`;
    			attr_dev(input, "class", "LCHComposeDetailFormIsAutomaticField");
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file$7, 149, 3, 5623);
    			attr_dev(span, "class", "LCHComposeDetailFormIsAutomaticFieldLabel");
    			add_location(span, file$7, 150, 3, 5827);
    			add_location(label, file$7, 148, 2, 5612);
    			add_location(p, file$7, 147, 1, 5606);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, label);
    			append_dev(label, input);
    			input.checked = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentIsAutomatic;
    			append_dev(label, t0);
    			append_dev(label, span);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_handler*/ ctx[12]),
    					listen_dev(input, "input", /*input_handler*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*LCHComposeDetailItem*/ 1) {
    				input.checked = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentIsAutomatic;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(147:0) {#if LCHComposeDetailItem.LCHDocumentURLFilter }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div6;
    	let header;
    	let div1;
    	let button0;
    	let div0;
    	let button0_title_value;
    	let t0;
    	let div4;
    	let button1;
    	let div2;
    	let button1_title_value;
    	let t1;
    	let button2;
    	let div3;
    	let button2_title_value;
    	let t2;
    	let div5;
    	let t3;
    	let p0;
    	let input0;
    	let input0_placeholder_value;
    	let t4;
    	let p1;
    	let input1;
    	let input1_placeholder_value;
    	let t5;
    	let p2;
    	let span0;
    	let t7;
    	let t8;
    	let span1;
    	let t10;
    	let input2;
    	let input2_placeholder_value;
    	let t11;
    	let span2;
    	let t13;
    	let p3;
    	let lchcomposeinput0;
    	let t14;
    	let span3;
    	let t16;
    	let span4;
    	let t18;
    	let input3;
    	let input3_placeholder_value;
    	let t19;
    	let t20;
    	let hr0;
    	let t21;
    	let p4;
    	let lchcomposeinput1;
    	let t22;
    	let hr1;
    	let t23;
    	let p5;
    	let input4;
    	let input4_placeholder_value;
    	let t24;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentIsFlagged && create_if_block_3$1(ctx);
    	let if_block1 = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentCallbackArgs && create_if_block_2$3(ctx);

    	lchcomposeinput0 = new Main$6({
    			props: {
    				LCHComposeInputItem: /*LCHComposeDetailItem*/ ctx[0],
    				LCHComposeInputKey: "LCHDocumentCallbackBody",
    				LCHComposeInputOptions: {
    					mode: "javascript",
    					lineNumbers: true,
    					lineWrapping: true,
    					placeholder: main_1("LCHComposeDetailFormCallbackBodyFieldText"),
    					keyMap: "sublime",
    					extraKeys: { Tab: false }
    				},
    				LCHComposeInputDispatchUpdate: /*LCHComposeDetailDispatchUpdate*/ ctx[4]
    			},
    			$$inline: true
    		});

    	let if_block2 = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentOutputType === "Bool" && create_if_block_1$4(ctx);

    	lchcomposeinput1 = new Main$6({
    			props: {
    				LCHComposeInputItem: /*LCHComposeDetailItem*/ ctx[0],
    				LCHComposeInputKey: "LCHDocumentStyle",
    				LCHComposeInputOptions: {
    					mode: "javascript",
    					lineNumbers: true,
    					lineWrapping: true,
    					placeholder: main_1("LCHComposeDetailFormStyleFieldText"),
    					keyMap: "sublime",
    					extraKeys: { Tab: false }
    				},
    				LCHComposeInputDispatchUpdate: /*LCHComposeDetailDispatchUpdate*/ ctx[4]
    			},
    			$$inline: true
    		});

    	let if_block3 = /*LCHComposeDetailItem*/ ctx[0].LCHDocumentURLFilter && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			header = element("header");
    			div1 = element("div");
    			button0 = element("button");
    			div0 = element("div");
    			t0 = space();
    			div4 = element("div");
    			button1 = element("button");
    			div2 = element("div");
    			t1 = space();
    			button2 = element("button");
    			div3 = element("div");
    			t2 = space();
    			div5 = element("div");
    			if (if_block0) if_block0.c();
    			t3 = space();
    			p0 = element("p");
    			input0 = element("input");
    			t4 = space();
    			p1 = element("p");
    			input1 = element("input");
    			t5 = space();
    			p2 = element("p");
    			span0 = element("span");
    			span0.textContent = "function";
    			t7 = space();
    			if (if_block1) if_block1.c();
    			t8 = space();
    			span1 = element("span");
    			span1.textContent = "(";
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			span2 = element("span");
    			span2.textContent = ") {";
    			t13 = space();
    			p3 = element("p");
    			create_component(lchcomposeinput0.$$.fragment);
    			t14 = space();
    			span3 = element("span");
    			span3.textContent = "}";
    			t16 = space();
    			span4 = element("span");
    			span4.textContent = "→";
    			t18 = space();
    			input3 = element("input");
    			t19 = space();
    			if (if_block2) if_block2.c();
    			t20 = space();
    			hr0 = element("hr");
    			t21 = space();
    			p4 = element("p");
    			create_component(lchcomposeinput1.$$.fragment);
    			t22 = space();
    			hr1 = element("hr");
    			t23 = space();
    			p5 = element("p");
    			input4 = element("input");
    			t24 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div0, "class", "LCHComposeDetailToolbarBackButtonImage");
    			add_location(div0, file$7, 21, 3, 1091);
    			attr_dev(button0, "class", "LCHComposeDetailToolbarBackButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton OLSKVisibilityMobile");
    			attr_dev(button0, "title", button0_title_value = main_1("LCHComposeDetailToolbarBackButtonText"));
    			add_location(button0, file$7, 20, 2, 850);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$7, 19, 1, 810);
    			attr_dev(div2, "class", "LCHComposeDetailToolbarCloneButtonImage");
    			add_location(div2, file$7, 27, 3, 1459);
    			attr_dev(button1, "class", "LCHComposeDetailToolbarCloneButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button1, "title", button1_title_value = main_1("LCHComposeDetailToolbarCloneButtonText"));
    			add_location(button1, file$7, 26, 2, 1236);
    			attr_dev(div3, "class", "LCHComposeDetailToolbarDiscardButtonImage");
    			add_location(div3, file$7, 30, 3, 1866);
    			attr_dev(button2, "class", "LCHComposeDetailToolbarDiscardButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button2, "title", button2_title_value = main_1("LCHComposeDetailToolbarDiscardButtonText"));
    			add_location(button2, file$7, 29, 2, 1558);
    			attr_dev(div4, "class", "OLSKToolbarElementGroup");
    			add_location(div4, file$7, 25, 1, 1196);
    			attr_dev(header, "class", "LCHComposeDetailToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeBottom OLSKMobileViewHeader svelte-1kqkvr6");
    			add_location(header, file$7, 18, 0, 695);
    			attr_dev(input0, "class", "LCHComposeDetailFormNameField");
    			attr_dev(input0, "placeholder", input0_placeholder_value = main_1("LCHComposeDetailFormNameFieldText"));
    			attr_dev(input0, "type", "text");
    			add_location(input0, file$7, 42, 1, 2260);
    			add_location(p0, file$7, 41, 0, 2255);
    			attr_dev(input1, "class", "LCHComposeDetailFormSignatureField");
    			attr_dev(input1, "placeholder", input1_placeholder_value = main_1("LCHComposeDetailFormSignatureFieldText"));
    			attr_dev(input1, "type", "text");
    			add_location(input1, file$7, 46, 1, 2496);
    			add_location(p1, file$7, 45, 0, 2491);
    			add_location(span0, file$7, 50, 1, 2747);
    			add_location(span1, file$7, 57, 1, 3095);
    			attr_dev(input2, "class", "LCHComposeDetailFormCallbackArgsField svelte-1kqkvr6");
    			attr_dev(input2, "placeholder", input2_placeholder_value = main_1("LCHComposeDetailFormCallbackArgsFieldText"));
    			attr_dev(input2, "type", "text");
    			add_location(input2, file$7, 59, 1, 3113);
    			add_location(span2, file$7, 61, 1, 3365);
    			add_location(p2, file$7, 49, 0, 2742);
    			add_location(span3, file$7, 85, 2, 3876);
    			add_location(span4, file$7, 87, 2, 3899);
    			attr_dev(input3, "class", "LCHComposeDetailFormOutputTypeField svelte-1kqkvr6");
    			attr_dev(input3, "placeholder", input3_placeholder_value = main_1("LCHComposeDetailFormOutputTypeFieldText"));
    			attr_dev(input3, "type", "text");
    			add_location(input3, file$7, 89, 2, 3917);
    			attr_dev(p3, "class", "LCHComposeDetailFormCallbackBody");
    			add_location(p3, file$7, 64, 0, 3393);
    			attr_dev(hr0, "role", "presentation");
    			add_location(hr0, file$7, 116, 0, 4784);
    			attr_dev(p4, "class", "LCHComposeDetailFormStyle");
    			add_location(p4, file$7, 118, 0, 4812);
    			attr_dev(hr1, "role", "presentation");
    			add_location(hr1, file$7, 140, 0, 5277);
    			attr_dev(input4, "class", "LCHComposeDetailFormURLFilterField");
    			attr_dev(input4, "placeholder", input4_placeholder_value = main_1("LCHComposeDetailFormURLFilterFieldText"));
    			attr_dev(input4, "type", "text");
    			add_location(input4, file$7, 143, 1, 5310);
    			add_location(p5, file$7, 142, 0, 5305);
    			attr_dev(div5, "class", "LCHComposeDetailForm OLSKDecor OLSKDecorBigForm");
    			add_location(div5, file$7, 35, 0, 1986);
    			attr_dev(div6, "class", "LCHComposeDetail svelte-1kqkvr6");
    			add_location(div6, file$7, 16, 0, 663);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, header);
    			append_dev(header, div1);
    			append_dev(div1, button0);
    			append_dev(button0, div0);
    			div0.innerHTML = _OLSKSharedBack$1;
    			append_dev(header, t0);
    			append_dev(header, div4);
    			append_dev(div4, button1);
    			append_dev(button1, div2);
    			div2.innerHTML = _OLSKSharedClone$1;
    			append_dev(div4, t1);
    			append_dev(div4, button2);
    			append_dev(button2, div3);
    			div3.innerHTML = _OLSKSharedDiscard$1;
    			append_dev(div6, t2);
    			append_dev(div6, div5);
    			if (if_block0) if_block0.m(div5, null);
    			append_dev(div5, t3);
    			append_dev(div5, p0);
    			append_dev(p0, input0);
    			set_input_value(input0, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentName);
    			append_dev(div5, t4);
    			append_dev(div5, p1);
    			append_dev(p1, input1);
    			set_input_value(input1, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentSignature);
    			append_dev(div5, t5);
    			append_dev(div5, p2);
    			append_dev(p2, span0);
    			append_dev(p2, t7);
    			if (if_block1) if_block1.m(p2, null);
    			append_dev(p2, t8);
    			append_dev(p2, span1);
    			append_dev(p2, t10);
    			append_dev(p2, input2);
    			set_input_value(input2, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentCallbackArgs);
    			append_dev(p2, t11);
    			append_dev(p2, span2);
    			append_dev(div5, t13);
    			append_dev(div5, p3);
    			mount_component(lchcomposeinput0, p3, null);
    			append_dev(p3, t14);
    			append_dev(p3, span3);
    			append_dev(p3, t16);
    			append_dev(p3, span4);
    			append_dev(p3, t18);
    			append_dev(p3, input3);
    			set_input_value(input3, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentOutputType);
    			append_dev(div5, t19);
    			if (if_block2) if_block2.m(div5, null);
    			append_dev(div5, t20);
    			append_dev(div5, hr0);
    			append_dev(div5, t21);
    			append_dev(div5, p4);
    			mount_component(lchcomposeinput1, p4, null);
    			append_dev(div5, t22);
    			append_dev(div5, hr1);
    			append_dev(div5, t23);
    			append_dev(div5, p5);
    			append_dev(p5, input4);
    			set_input_value(input4, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentURLFilter);
    			append_dev(div5, t24);
    			if (if_block3) if_block3.m(div5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchBack*/ ctx[1])) /*LCHComposeDetailDispatchBack*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchClone*/ ctx[2])) /*LCHComposeDetailDispatchClone*/ ctx[2].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button2, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
    					listen_dev(
    						input0,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[7]),
    					listen_dev(
    						input1,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[9]),
    					listen_dev(
    						input2,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen_dev(
    						input3,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[11]),
    					listen_dev(
    						input4,
    						"input",
    						function () {
    							if (is_function(/*LCHComposeDetailDispatchUpdate*/ ctx[4])) /*LCHComposeDetailDispatchUpdate*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentIsFlagged) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$1(ctx);
    					if_block0.c();
    					if_block0.m(div5, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input0.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentName) {
    				set_input_value(input0, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentName);
    			}

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input1.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentSignature) {
    				set_input_value(input1, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentSignature);
    			}

    			if (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentCallbackArgs) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$3(ctx);
    					if_block1.c();
    					if_block1.m(p2, t8);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input2.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentCallbackArgs) {
    				set_input_value(input2, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentCallbackArgs);
    			}

    			const lchcomposeinput0_changes = {};
    			if (dirty & /*LCHComposeDetailItem*/ 1) lchcomposeinput0_changes.LCHComposeInputItem = /*LCHComposeDetailItem*/ ctx[0];
    			if (dirty & /*LCHComposeDetailDispatchUpdate*/ 16) lchcomposeinput0_changes.LCHComposeInputDispatchUpdate = /*LCHComposeDetailDispatchUpdate*/ ctx[4];
    			lchcomposeinput0.$set(lchcomposeinput0_changes);

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input3.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentOutputType) {
    				set_input_value(input3, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentOutputType);
    			}

    			if (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentOutputType === "Bool") {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*LCHComposeDetailItem*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1$4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div5, t20);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			const lchcomposeinput1_changes = {};
    			if (dirty & /*LCHComposeDetailItem*/ 1) lchcomposeinput1_changes.LCHComposeInputItem = /*LCHComposeDetailItem*/ ctx[0];
    			if (dirty & /*LCHComposeDetailDispatchUpdate*/ 16) lchcomposeinput1_changes.LCHComposeInputDispatchUpdate = /*LCHComposeDetailDispatchUpdate*/ ctx[4];
    			lchcomposeinput1.$set(lchcomposeinput1_changes);

    			if (dirty & /*LCHComposeDetailItem*/ 1 && input4.value !== /*LCHComposeDetailItem*/ ctx[0].LCHDocumentURLFilter) {
    				set_input_value(input4, /*LCHComposeDetailItem*/ ctx[0].LCHDocumentURLFilter);
    			}

    			if (/*LCHComposeDetailItem*/ ctx[0].LCHDocumentURLFilter) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block$6(ctx);
    					if_block3.c();
    					if_block3.m(div5, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lchcomposeinput0.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(lchcomposeinput1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lchcomposeinput0.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(lchcomposeinput1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(lchcomposeinput0);
    			if (if_block2) if_block2.d();
    			destroy_component(lchcomposeinput1);
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { LCHComposeDetailItem } = $$props;
    	let { LCHComposeDetailDispatchBack } = $$props;
    	let { LCHComposeDetailDispatchClone } = $$props;
    	let { LCHComposeDetailDispatchDiscard } = $$props;
    	let { LCHComposeDetailDispatchUpdate } = $$props;

    	const writable_props = [
    		"LCHComposeDetailItem",
    		"LCHComposeDetailDispatchBack",
    		"LCHComposeDetailDispatchClone",
    		"LCHComposeDetailDispatchDiscard",
    		"LCHComposeDetailDispatchUpdate"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.confirm(main_1("LCHComposeDetailDiscardConfirmText")) && LCHComposeDetailDispatchDiscard();

    	function input0_input_handler() {
    		LCHComposeDetailItem.LCHDocumentName = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input1_input_handler() {
    		LCHComposeDetailItem.LCHDocumentSignature = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input_input_handler() {
    		LCHComposeDetailItem.LCHDocumentInputTypes = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input2_input_handler() {
    		LCHComposeDetailItem.LCHDocumentCallbackArgs = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input3_input_handler() {
    		LCHComposeDetailItem.LCHDocumentOutputType = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input4_input_handler() {
    		LCHComposeDetailItem.LCHDocumentURLFilter = this.value;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	function input_change_handler() {
    		LCHComposeDetailItem.LCHDocumentIsAutomatic = this.checked;
    		$$invalidate(0, LCHComposeDetailItem);
    	}

    	const input_handler = () => window.setTimeout(LCHComposeDetailDispatchUpdate);

    	$$self.$$set = $$props => {
    		if ("LCHComposeDetailItem" in $$props) $$invalidate(0, LCHComposeDetailItem = $$props.LCHComposeDetailItem);
    		if ("LCHComposeDetailDispatchBack" in $$props) $$invalidate(1, LCHComposeDetailDispatchBack = $$props.LCHComposeDetailDispatchBack);
    		if ("LCHComposeDetailDispatchClone" in $$props) $$invalidate(2, LCHComposeDetailDispatchClone = $$props.LCHComposeDetailDispatchClone);
    		if ("LCHComposeDetailDispatchDiscard" in $$props) $$invalidate(3, LCHComposeDetailDispatchDiscard = $$props.LCHComposeDetailDispatchDiscard);
    		if ("LCHComposeDetailDispatchUpdate" in $$props) $$invalidate(4, LCHComposeDetailDispatchUpdate = $$props.LCHComposeDetailDispatchUpdate);
    	};

    	$$self.$capture_state = () => ({
    		LCHComposeDetailItem,
    		LCHComposeDetailDispatchBack,
    		LCHComposeDetailDispatchClone,
    		LCHComposeDetailDispatchDiscard,
    		LCHComposeDetailDispatchUpdate,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$1,
    		_OLSKSharedBack: _OLSKSharedBack$1,
    		_OLSKSharedClone: _OLSKSharedClone$1,
    		_OLSKSharedDiscard: _OLSKSharedDiscard$1,
    		LCHComposeInput: Main$6
    	});

    	$$self.$inject_state = $$props => {
    		if ("LCHComposeDetailItem" in $$props) $$invalidate(0, LCHComposeDetailItem = $$props.LCHComposeDetailItem);
    		if ("LCHComposeDetailDispatchBack" in $$props) $$invalidate(1, LCHComposeDetailDispatchBack = $$props.LCHComposeDetailDispatchBack);
    		if ("LCHComposeDetailDispatchClone" in $$props) $$invalidate(2, LCHComposeDetailDispatchClone = $$props.LCHComposeDetailDispatchClone);
    		if ("LCHComposeDetailDispatchDiscard" in $$props) $$invalidate(3, LCHComposeDetailDispatchDiscard = $$props.LCHComposeDetailDispatchDiscard);
    		if ("LCHComposeDetailDispatchUpdate" in $$props) $$invalidate(4, LCHComposeDetailDispatchUpdate = $$props.LCHComposeDetailDispatchUpdate);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		LCHComposeDetailItem,
    		LCHComposeDetailDispatchBack,
    		LCHComposeDetailDispatchClone,
    		LCHComposeDetailDispatchDiscard,
    		LCHComposeDetailDispatchUpdate,
    		click_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		input_change_handler,
    		input_handler
    	];
    }

    class Main$7 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			LCHComposeDetailItem: 0,
    			LCHComposeDetailDispatchBack: 1,
    			LCHComposeDetailDispatchClone: 2,
    			LCHComposeDetailDispatchDiscard: 3,
    			LCHComposeDetailDispatchUpdate: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*LCHComposeDetailItem*/ ctx[0] === undefined && !("LCHComposeDetailItem" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeDetailItem'");
    		}

    		if (/*LCHComposeDetailDispatchBack*/ ctx[1] === undefined && !("LCHComposeDetailDispatchBack" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeDetailDispatchBack'");
    		}

    		if (/*LCHComposeDetailDispatchClone*/ ctx[2] === undefined && !("LCHComposeDetailDispatchClone" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeDetailDispatchClone'");
    		}

    		if (/*LCHComposeDetailDispatchDiscard*/ ctx[3] === undefined && !("LCHComposeDetailDispatchDiscard" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeDetailDispatchDiscard'");
    		}

    		if (/*LCHComposeDetailDispatchUpdate*/ ctx[4] === undefined && !("LCHComposeDetailDispatchUpdate" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeDetailDispatchUpdate'");
    		}
    	}

    	get LCHComposeDetailItem() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeDetailItem(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeDetailDispatchBack() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeDetailDispatchBack(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeDetailDispatchClone() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeDetailDispatchClone(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeDetailDispatchDiscard() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeDetailDispatchDiscard(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeDetailDispatchUpdate() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeDetailDispatchUpdate(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-compose/submodules/LCHComposeBuild/main.svelte generated by Svelte v3.38.2 */
    const file$8 = "os-app/open-compose/submodules/LCHComposeBuild/main.svelte";

    function create_fragment$8(ctx) {
    	let div;
    	let a;
    	let t0_value = main_1("LCHComposeBuildRunLinkText") + "";
    	let t0;
    	let t1;
    	let label0;
    	let input0;
    	let t2;
    	let span0;
    	let t4;
    	let label1;
    	let input1;
    	let t5;
    	let span1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			label0 = element("label");
    			input0 = element("input");
    			t2 = space();
    			span0 = element("span");
    			span0.textContent = `${main_1("LCHComposeBuildPipeModeEnabledFieldLabelText")}`;
    			t4 = space();
    			label1 = element("label");
    			input1 = element("input");
    			t5 = space();
    			span1 = element("span");
    			span1.textContent = `${main_1("LCHComposeBuildPageRecipesEnabledFieldLabelText")}`;
    			attr_dev(a, "class", "LCHComposeBuildRunLink svelte-181h40r");
    			attr_dev(a, "href", /*LCHComposeBuildRunLink*/ ctx[2]);
    			attr_dev(a, "accesskey", "r");
    			add_location(a, file$8, 25, 0, 507);
    			attr_dev(input0, "class", "LCHComposeBuildPipeModeEnabledField");
    			attr_dev(input0, "type", "checkbox");
    			add_location(input0, file$8, 28, 1, 693);
    			attr_dev(span0, "class", "LCHComposeBuildPipeModeEnabledFieldLabel");
    			add_location(span0, file$8, 29, 1, 893);
    			add_location(label0, file$8, 27, 0, 684);
    			attr_dev(input1, "class", "LCHComposeBuildPageRecipesEnabledField");
    			attr_dev(input1, "type", "checkbox");
    			add_location(input1, file$8, 33, 1, 1040);
    			attr_dev(span1, "class", "LCHComposeBuildPageRecipesEnabledFieldLabel");
    			add_location(span1, file$8, 34, 1, 1249);
    			add_location(label1, file$8, 32, 0, 1031);
    			attr_dev(div, "class", "LCHComposeBuild");
    			add_location(div, file$8, 23, 0, 476);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    			append_dev(div, label0);
    			append_dev(label0, input0);
    			input0.checked = /*LCHComposeBuildPipeModeEnabled*/ ctx[0];
    			append_dev(label0, t2);
    			append_dev(label0, span0);
    			append_dev(div, t4);
    			append_dev(div, label1);
    			append_dev(label1, input1);
    			input1.checked = /*LCHComposeBuildPageRecipesEnabled*/ ctx[1];
    			append_dev(label1, t5);
    			append_dev(label1, span1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a, "click", /*mod*/ ctx[5].InterfaceRunButtonDidClick, false, false, false),
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[7]),
    					listen_dev(input0, "input", /*input_handler*/ ctx[8], false, false, false),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[9]),
    					listen_dev(input1, "input", /*input_handler_1*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*LCHComposeBuildRunLink*/ 4) {
    				attr_dev(a, "href", /*LCHComposeBuildRunLink*/ ctx[2]);
    			}

    			if (dirty & /*LCHComposeBuildPipeModeEnabled*/ 1) {
    				input0.checked = /*LCHComposeBuildPipeModeEnabled*/ ctx[0];
    			}

    			if (dirty & /*LCHComposeBuildPageRecipesEnabled*/ 2) {
    				input1.checked = /*LCHComposeBuildPageRecipesEnabled*/ ctx[1];
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { LCHComposeBuildRunLink } = $$props;
    	let { LCHComposeBuildPipeModeEnabled } = $$props;
    	let { LCHComposeBuildPageRecipesEnabled } = $$props;
    	let { LCHComposeBuildDispatchRun } = $$props;
    	let { LCHComposeBuildDispatchPipeModeEnabled } = $$props;
    	let { LCHComposeBuildDispatchPageRecipesEnabled } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceRunButtonDidClick(event) {
    			event.preventDefault();
    			LCHComposeBuildDispatchRun();
    		}
    	};

    	const writable_props = [
    		"LCHComposeBuildRunLink",
    		"LCHComposeBuildPipeModeEnabled",
    		"LCHComposeBuildPageRecipesEnabled",
    		"LCHComposeBuildDispatchRun",
    		"LCHComposeBuildDispatchPipeModeEnabled",
    		"LCHComposeBuildDispatchPageRecipesEnabled"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input0_change_handler() {
    		LCHComposeBuildPipeModeEnabled = this.checked;
    		$$invalidate(0, LCHComposeBuildPipeModeEnabled);
    	}

    	const input_handler = function () {
    		LCHComposeBuildDispatchPipeModeEnabled(this.checked);
    	};

    	function input1_change_handler() {
    		LCHComposeBuildPageRecipesEnabled = this.checked;
    		$$invalidate(1, LCHComposeBuildPageRecipesEnabled);
    	}

    	const input_handler_1 = function () {
    		LCHComposeBuildDispatchPageRecipesEnabled(this.checked);
    	};

    	$$self.$$set = $$props => {
    		if ("LCHComposeBuildRunLink" in $$props) $$invalidate(2, LCHComposeBuildRunLink = $$props.LCHComposeBuildRunLink);
    		if ("LCHComposeBuildPipeModeEnabled" in $$props) $$invalidate(0, LCHComposeBuildPipeModeEnabled = $$props.LCHComposeBuildPipeModeEnabled);
    		if ("LCHComposeBuildPageRecipesEnabled" in $$props) $$invalidate(1, LCHComposeBuildPageRecipesEnabled = $$props.LCHComposeBuildPageRecipesEnabled);
    		if ("LCHComposeBuildDispatchRun" in $$props) $$invalidate(6, LCHComposeBuildDispatchRun = $$props.LCHComposeBuildDispatchRun);
    		if ("LCHComposeBuildDispatchPipeModeEnabled" in $$props) $$invalidate(3, LCHComposeBuildDispatchPipeModeEnabled = $$props.LCHComposeBuildDispatchPipeModeEnabled);
    		if ("LCHComposeBuildDispatchPageRecipesEnabled" in $$props) $$invalidate(4, LCHComposeBuildDispatchPageRecipesEnabled = $$props.LCHComposeBuildDispatchPageRecipesEnabled);
    	};

    	$$self.$capture_state = () => ({
    		LCHComposeBuildRunLink,
    		LCHComposeBuildPipeModeEnabled,
    		LCHComposeBuildPageRecipesEnabled,
    		LCHComposeBuildDispatchRun,
    		LCHComposeBuildDispatchPipeModeEnabled,
    		LCHComposeBuildDispatchPageRecipesEnabled,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("LCHComposeBuildRunLink" in $$props) $$invalidate(2, LCHComposeBuildRunLink = $$props.LCHComposeBuildRunLink);
    		if ("LCHComposeBuildPipeModeEnabled" in $$props) $$invalidate(0, LCHComposeBuildPipeModeEnabled = $$props.LCHComposeBuildPipeModeEnabled);
    		if ("LCHComposeBuildPageRecipesEnabled" in $$props) $$invalidate(1, LCHComposeBuildPageRecipesEnabled = $$props.LCHComposeBuildPageRecipesEnabled);
    		if ("LCHComposeBuildDispatchRun" in $$props) $$invalidate(6, LCHComposeBuildDispatchRun = $$props.LCHComposeBuildDispatchRun);
    		if ("LCHComposeBuildDispatchPipeModeEnabled" in $$props) $$invalidate(3, LCHComposeBuildDispatchPipeModeEnabled = $$props.LCHComposeBuildDispatchPipeModeEnabled);
    		if ("LCHComposeBuildDispatchPageRecipesEnabled" in $$props) $$invalidate(4, LCHComposeBuildDispatchPageRecipesEnabled = $$props.LCHComposeBuildDispatchPageRecipesEnabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		LCHComposeBuildPipeModeEnabled,
    		LCHComposeBuildPageRecipesEnabled,
    		LCHComposeBuildRunLink,
    		LCHComposeBuildDispatchPipeModeEnabled,
    		LCHComposeBuildDispatchPageRecipesEnabled,
    		mod,
    		LCHComposeBuildDispatchRun,
    		input0_change_handler,
    		input_handler,
    		input1_change_handler,
    		input_handler_1
    	];
    }

    class Main$8 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			LCHComposeBuildRunLink: 2,
    			LCHComposeBuildPipeModeEnabled: 0,
    			LCHComposeBuildPageRecipesEnabled: 1,
    			LCHComposeBuildDispatchRun: 6,
    			LCHComposeBuildDispatchPipeModeEnabled: 3,
    			LCHComposeBuildDispatchPageRecipesEnabled: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*LCHComposeBuildRunLink*/ ctx[2] === undefined && !("LCHComposeBuildRunLink" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildRunLink'");
    		}

    		if (/*LCHComposeBuildPipeModeEnabled*/ ctx[0] === undefined && !("LCHComposeBuildPipeModeEnabled" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildPipeModeEnabled'");
    		}

    		if (/*LCHComposeBuildPageRecipesEnabled*/ ctx[1] === undefined && !("LCHComposeBuildPageRecipesEnabled" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildPageRecipesEnabled'");
    		}

    		if (/*LCHComposeBuildDispatchRun*/ ctx[6] === undefined && !("LCHComposeBuildDispatchRun" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildDispatchRun'");
    		}

    		if (/*LCHComposeBuildDispatchPipeModeEnabled*/ ctx[3] === undefined && !("LCHComposeBuildDispatchPipeModeEnabled" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildDispatchPipeModeEnabled'");
    		}

    		if (/*LCHComposeBuildDispatchPageRecipesEnabled*/ ctx[4] === undefined && !("LCHComposeBuildDispatchPageRecipesEnabled" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposeBuildDispatchPageRecipesEnabled'");
    		}
    	}

    	get LCHComposeBuildRunLink() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildRunLink(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeBuildPipeModeEnabled() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildPipeModeEnabled(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeBuildPageRecipesEnabled() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildPageRecipesEnabled(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeBuildDispatchRun() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildDispatchRun(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeBuildDispatchPipeModeEnabled() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildDispatchPipeModeEnabled(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposeBuildDispatchPageRecipesEnabled() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposeBuildDispatchPageRecipesEnabled(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-compose/submodules/LCHComposePair/main.svelte generated by Svelte v3.38.2 */
    const file$9 = "os-app/open-compose/submodules/LCHComposePair/main.svelte";

    // (25:0) {#if !LCHComposePairClearIsVisible}
    function create_if_block_1$5(ctx) {
    	let form;
    	let input;
    	let input_placeholder_value;
    	let t0;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			button = element("button");
    			button.textContent = `${main_1("LCHComposePairSubmitButtonText")}`;
    			attr_dev(input, "class", "LCHComposePairKeyField svelte-gma1ta");
    			attr_dev(input, "placeholder", input_placeholder_value = main_1("LCHComposePairKeyFieldText"));
    			input.autofocus = true;
    			add_location(input, file$9, 26, 2, 476);
    			attr_dev(button, "class", "LCHComposePairSubmitButton");
    			add_location(button, file$9, 28, 2, 619);
    			attr_dev(form, "class", "svelte-gma1ta");
    			add_location(form, file$9, 25, 1, 426);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, input);
    			set_input_value(input, /*mod*/ ctx[2]._ValueKey);
    			append_dev(form, t0);
    			append_dev(form, button);
    			input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[4]),
    					listen_dev(
    						form,
    						"submit",
    						function () {
    							if (is_function(/*mod*/ ctx[2].InterfaceFormDidSubmit)) /*mod*/ ctx[2].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mod*/ 4 && input.value !== /*mod*/ ctx[2]._ValueKey) {
    				set_input_value(input, /*mod*/ ctx[2]._ValueKey);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(25:0) {#if !LCHComposePairClearIsVisible}",
    		ctx
    	});

    	return block;
    }

    // (33:0) {#if LCHComposePairClearIsVisible}
    function create_if_block$7(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1("LCHComposePairClearButtonText")}`;
    			attr_dev(button, "class", "LCHComposePairClearButton");
    			add_location(button, file$9, 33, 1, 775);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*LCHComposePairDispatchClear*/ ctx[1])) /*LCHComposePairDispatchClear*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(33:0) {#if LCHComposePairClearIsVisible}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let t;
    	let if_block0 = !/*LCHComposePairClearIsVisible*/ ctx[0] && create_if_block_1$5(ctx);
    	let if_block1 = /*LCHComposePairClearIsVisible*/ ctx[0] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "LCHComposePair svelte-gma1ta");
    			add_location(div, file$9, 22, 0, 359);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*LCHComposePairClearIsVisible*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$5(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*LCHComposePairClearIsVisible*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { LCHComposePairClearIsVisible } = $$props;
    	let { LCHComposePairDispatchSubmit } = $$props;
    	let { LCHComposePairDispatchClear } = $$props;

    	const mod = {
    		_ValueKey: "",
    		// INTERFACE
    		InterfaceFormDidSubmit(event) {
    			event.preventDefault();
    			LCHComposePairDispatchSubmit(mod._ValueKey);
    		}
    	};

    	const writable_props = [
    		"LCHComposePairClearIsVisible",
    		"LCHComposePairDispatchSubmit",
    		"LCHComposePairDispatchClear"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		mod._ValueKey = this.value;
    		$$invalidate(2, mod);
    	}

    	$$self.$$set = $$props => {
    		if ("LCHComposePairClearIsVisible" in $$props) $$invalidate(0, LCHComposePairClearIsVisible = $$props.LCHComposePairClearIsVisible);
    		if ("LCHComposePairDispatchSubmit" in $$props) $$invalidate(3, LCHComposePairDispatchSubmit = $$props.LCHComposePairDispatchSubmit);
    		if ("LCHComposePairDispatchClear" in $$props) $$invalidate(1, LCHComposePairDispatchClear = $$props.LCHComposePairDispatchClear);
    	};

    	$$self.$capture_state = () => ({
    		LCHComposePairClearIsVisible,
    		LCHComposePairDispatchSubmit,
    		LCHComposePairDispatchClear,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("LCHComposePairClearIsVisible" in $$props) $$invalidate(0, LCHComposePairClearIsVisible = $$props.LCHComposePairClearIsVisible);
    		if ("LCHComposePairDispatchSubmit" in $$props) $$invalidate(3, LCHComposePairDispatchSubmit = $$props.LCHComposePairDispatchSubmit);
    		if ("LCHComposePairDispatchClear" in $$props) $$invalidate(1, LCHComposePairDispatchClear = $$props.LCHComposePairDispatchClear);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		LCHComposePairClearIsVisible,
    		LCHComposePairDispatchClear,
    		mod,
    		LCHComposePairDispatchSubmit,
    		input_input_handler
    	];
    }

    class Main$9 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			LCHComposePairClearIsVisible: 0,
    			LCHComposePairDispatchSubmit: 3,
    			LCHComposePairDispatchClear: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*LCHComposePairClearIsVisible*/ ctx[0] === undefined && !("LCHComposePairClearIsVisible" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposePairClearIsVisible'");
    		}

    		if (/*LCHComposePairDispatchSubmit*/ ctx[3] === undefined && !("LCHComposePairDispatchSubmit" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposePairDispatchSubmit'");
    		}

    		if (/*LCHComposePairDispatchClear*/ ctx[1] === undefined && !("LCHComposePairDispatchClear" in props)) {
    			console.warn("<Main> was created without expected prop 'LCHComposePairDispatchClear'");
    		}
    	}

    	get LCHComposePairClearIsVisible() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposePairClearIsVisible(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposePairDispatchSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposePairDispatchSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get LCHComposePairDispatchClear() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set LCHComposePairDispatchClear(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKReloadButton/main.svelte generated by Svelte v3.38.2 */
    const file$a = "node_modules/OLSKReloadButton/main.svelte";

    function create_fragment$a(ctx) {
    	let button;
    	let div;
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKReloadButtonImage");
    			add_location(div, file$a, 7, 1, 329);
    			attr_dev(button, "class", "OLSKReloadButton OLSKToolbarButton OLSKDecorTappable OLSKDecorButtonNoStyle");
    			attr_dev(button, "title", button_title_value = main_1("OLSKReloadButtonText"));
    			add_location(button, file$a, 6, 0, 143);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = _OLSKSharedReload;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.location.reload();
    	$$self.$capture_state = () => ({ OLSKLocalized: main_1, _OLSKSharedReload });
    	return [click_handler];
    }

    class Main$a extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* node_modules/OLSKAppToolbar/main.svelte generated by Svelte v3.38.2 */
    const file$b = "node_modules/OLSKAppToolbar/main.svelte";

    // (52:1) {:else}
    function create_else_block$1(ctx) {
    	let olskreloadbutton;
    	let current;
    	olskreloadbutton = new Main$a({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskreloadbutton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskreloadbutton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskreloadbutton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskreloadbutton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskreloadbutton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(52:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:1) {#if OLSKAppToolbarDispatchApropos }
    function create_if_block_6$1(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedApropos + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarAproposButtonImage svelte-p1utxj");
    			add_location(div, file$b, 49, 3, 1421);
    			attr_dev(button, "class", "OLSKAppToolbarAproposButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-p1utxj");
    			attr_dev(button, "title", button_title_value = main_1("OLSKAppToolbarAproposButtonText"));
    			add_location(button, file$b, 48, 2, 1212);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchApropos*/ ctx[6])) /*OLSKAppToolbarDispatchApropos*/ ctx[6].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(48:1) {#if OLSKAppToolbarDispatchApropos }",
    		ctx
    	});

    	return block;
    }

    // (56:1) {#if OLSKAppToolbarDispatchTongue }
    function create_if_block_5$1(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedLanguage + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarLanguageButtonImage svelte-p1utxj");
    			add_location(div, file$b, 57, 3, 1815);
    			attr_dev(button, "class", "OLSKAppToolbarLanguageButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-p1utxj");
    			attr_dev(button, "title", button_title_value = main_1("OLSKAppToolbarLanguageButtonText"));
    			add_location(button, file$b, 56, 2, 1605);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchTongue*/ ctx[7])) /*OLSKAppToolbarDispatchTongue*/ ctx[7].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(56:1) {#if OLSKAppToolbarDispatchTongue }",
    		ctx
    	});

    	return block;
    }

    // (62:1) {#if OLSKAppToolbarGuideURL}
    function create_if_block_4$1(ctx) {
    	let a;
    	let t_value = main_1("OLSKAppToolbarGuideLinkText") + "";
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKAppToolbarGuideLink svelte-p1utxj");
    			attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$b, 62, 2, 1962);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarGuideURL*/ 1) {
    				attr_dev(a, "href", /*OLSKAppToolbarGuideURL*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(62:1) {#if OLSKAppToolbarGuideURL}",
    		ctx
    	});

    	return block;
    }

    // (71:2) {#if OLSKAppToolbarDispatchFund && !OLSKAppToolbarFundShowProgress }
    function create_if_block_2$4(ctx) {
    	let button;
    	let t1;
    	let if_block_anchor;
    	let mounted;
    	let dispose;
    	let if_block = /*OLSKAppToolbarFundLimitText*/ ctx[2] !== "" && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1("OLSKAppToolbarFundButtonText")}`;
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(button, "class", "OLSKAppToolbarFundButton OLSKDecorPress svelte-p1utxj");
    			add_location(button, file$b, 71, 3, 2275);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchFund*/ ctx[8])) /*OLSKAppToolbarDispatchFund*/ ctx[8].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*OLSKAppToolbarFundLimitText*/ ctx[2] !== "") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(71:2) {#if OLSKAppToolbarDispatchFund && !OLSKAppToolbarFundShowProgress }",
    		ctx
    	});

    	return block;
    }

    // (74:3) {#if OLSKAppToolbarFundLimitText !== '' }
    function create_if_block_3$2(ctx) {
    	let button;
    	let t_value = /*OLSKAppToolbarFundLimitText*/ ctx[2].toString() + "";
    	let t;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "OLSKAppToolbarFundLimit OLSKDecorButtonNoStyle svelte-p1utxj");
    			button.disabled = true;
    			add_location(button, file$b, 75, 4, 2546);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAppToolbarFundLimitText*/ 4 && t_value !== (t_value = /*OLSKAppToolbarFundLimitText*/ ctx[2].toString() + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(74:3) {#if OLSKAppToolbarFundLimitText !== '' }",
    		ctx
    	});

    	return block;
    }

    // (80:2) {#if OLSKAppToolbarFundShowProgress }
    function create_if_block_1$6(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "…";
    			attr_dev(div, "class", "OLSKAppToolbarFundProgress svelte-p1utxj");
    			add_location(div, file$b, 80, 3, 2731);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(80:2) {#if OLSKAppToolbarFundShowProgress }",
    		ctx
    	});

    	return block;
    }

    // (93:1) {#if OLSKAppToolbarDispatchLauncher }
    function create_if_block$8(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedLauncher + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKAppToolbarLauncherButtonImage svelte-p1utxj");
    			add_location(div, file$b, 94, 3, 3831);
    			attr_dev(button, "class", "OLSKAppToolbarLauncherButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-p1utxj");
    			attr_dev(button, "title", button_title_value = main_1("OLSKAppToolbarLauncherButtonText"));
    			add_location(button, file$b, 93, 2, 3619);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKAppToolbarDispatchLauncher*/ ctx[10])) /*OLSKAppToolbarDispatchLauncher*/ ctx[10].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(93:1) {#if OLSKAppToolbarDispatchLauncher }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div6;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let div2;
    	let div1;
    	let t4;
    	let t5;
    	let div5;
    	let div3;

    	let t6_value = (!/*OLSKAppToolbarCloudConnected*/ ctx[3]
    	? ""
    	: /*OLSKAppToolbarCloudError*/ ctx[5]
    		? main_1("OLSKAppToolbarCloudStatusError")
    		: /*OLSKAppToolbarCloudOffline*/ ctx[4]
    			? main_1("OLSKAppToolbarCloudStatusOffline")
    			: main_1("OLSKAppToolbarCloudStatusOnline")) + "";

    	let t6;
    	let t7;
    	let button;
    	let div4;

    	let raw_value = (/*OLSKAppToolbarCloudError*/ ctx[5]
    	? OLSKUIAssets._OLSKSharedCloudError
    	: /*OLSKAppToolbarCloudOffline*/ ctx[4]
    		? OLSKUIAssets._OLSKSharedCloudOffline
    		: OLSKUIAssets._OLSKSharedCloud) + "";

    	let button_title_value;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_6$1, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*OLSKAppToolbarDispatchApropos*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block1 = /*OLSKAppToolbarDispatchTongue*/ ctx[7] && create_if_block_5$1(ctx);
    	let if_block2 = /*OLSKAppToolbarGuideURL*/ ctx[0] && create_if_block_4$1(ctx);
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
    	let if_block3 = /*OLSKAppToolbarDispatchFund*/ ctx[8] && !/*OLSKAppToolbarFundShowProgress*/ ctx[1] && create_if_block_2$4(ctx);
    	let if_block4 = /*OLSKAppToolbarFundShowProgress*/ ctx[1] && create_if_block_1$6(ctx);
    	let if_block5 = /*OLSKAppToolbarDispatchLauncher*/ ctx[10] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div0 = element("div");
    			if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if (default_slot) default_slot.c();
    			t3 = space();
    			div2 = element("div");
    			div1 = element("div");
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			div5 = element("div");
    			div3 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			button = element("button");
    			div4 = element("div");
    			t8 = space();
    			if (if_block5) if_block5.c();
    			attr_dev(div0, "class", "OLSKToolbarElementGroup svelte-p1utxj");
    			add_location(div0, file$b, 46, 0, 1134);
    			attr_dev(div1, "class", "OLSKAppToolbarFund svelte-p1utxj");
    			add_location(div1, file$b, 69, 1, 2168);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup svelte-p1utxj");
    			add_location(div2, file$b, 68, 0, 2129);
    			attr_dev(div3, "class", "OLSKAppToolbarCloudStatus svelte-p1utxj");
    			add_location(div3, file$b, 86, 1, 2842);
    			attr_dev(div4, "class", "OLSKAppToolbarCloudButtonImage svelte-p1utxj");
    			add_location(div4, file$b, 89, 2, 3343);
    			attr_dev(button, "class", "OLSKAppToolbarCloudButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton svelte-p1utxj");
    			attr_dev(button, "title", button_title_value = main_1("OLSKAppToolbarCloudButtonText"));
    			add_location(button, file$b, 88, 1, 3141);
    			attr_dev(div5, "class", "OLSKToolbarElementGroup svelte-p1utxj");
    			add_location(div5, file$b, 85, 0, 2803);
    			attr_dev(div6, "class", "OLSKAppToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeTop svelte-p1utxj");
    			add_location(div6, file$b, 44, 0, 1055);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div0, t2);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div6, t3);
    			append_dev(div6, div2);
    			append_dev(div2, div1);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t4);
    			if (if_block4) if_block4.m(div1, null);
    			append_dev(div6, t5);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, t6);
    			append_dev(div5, t7);
    			append_dev(div5, button);
    			append_dev(button, div4);
    			div4.innerHTML = raw_value;
    			append_dev(div5, t8);
    			if (if_block5) if_block5.m(div5, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(window, "keydown", /*mod*/ ctx[11].InterfaceWindowDidKeydown, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*OLSKAppToolbarDispatchCloud*/ ctx[9])) /*OLSKAppToolbarDispatchCloud*/ ctx[9].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div0, t0);
    			}

    			if (/*OLSKAppToolbarDispatchTongue*/ ctx[7]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_5$1(ctx);
    					if_block1.c();
    					if_block1.m(div0, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*OLSKAppToolbarGuideURL*/ ctx[0]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_4$1(ctx);
    					if_block2.c();
    					if_block2.m(div0, t2);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
    				}
    			}

    			if (/*OLSKAppToolbarDispatchFund*/ ctx[8] && !/*OLSKAppToolbarFundShowProgress*/ ctx[1]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_2$4(ctx);
    					if_block3.c();
    					if_block3.m(div1, t4);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*OLSKAppToolbarFundShowProgress*/ ctx[1]) {
    				if (if_block4) ; else {
    					if_block4 = create_if_block_1$6(ctx);
    					if_block4.c();
    					if_block4.m(div1, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if ((!current || dirty & /*OLSKAppToolbarCloudConnected, OLSKAppToolbarCloudError, OLSKAppToolbarCloudOffline*/ 56) && t6_value !== (t6_value = (!/*OLSKAppToolbarCloudConnected*/ ctx[3]
    			? ""
    			: /*OLSKAppToolbarCloudError*/ ctx[5]
    				? main_1("OLSKAppToolbarCloudStatusError")
    				: /*OLSKAppToolbarCloudOffline*/ ctx[4]
    					? main_1("OLSKAppToolbarCloudStatusOffline")
    					: main_1("OLSKAppToolbarCloudStatusOnline")) + "")) set_data_dev(t6, t6_value);

    			if ((!current || dirty & /*OLSKAppToolbarCloudError, OLSKAppToolbarCloudOffline*/ 48) && raw_value !== (raw_value = (/*OLSKAppToolbarCloudError*/ ctx[5]
    			? OLSKUIAssets._OLSKSharedCloudError
    			: /*OLSKAppToolbarCloudOffline*/ ctx[4]
    				? OLSKUIAssets._OLSKSharedCloudOffline
    				: OLSKUIAssets._OLSKSharedCloud) + "")) div4.innerHTML = raw_value;
    			if (/*OLSKAppToolbarDispatchLauncher*/ ctx[10]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block$8(ctx);
    					if_block5.c();
    					if_block5.m(div5, null);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if_blocks[current_block_type_index].d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (default_slot) default_slot.d(detaching);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['default']);
    	let { OLSKAppToolbarGuideURL = "" } = $$props;
    	let { OLSKAppToolbarFundShowProgress = false } = $$props;
    	let { OLSKAppToolbarFundLimitText = "" } = $$props;
    	let { OLSKAppToolbarCloudConnected = false } = $$props;
    	let { OLSKAppToolbarCloudOffline = false } = $$props;
    	let { OLSKAppToolbarCloudError = false } = $$props;
    	let { OLSKAppToolbarDispatchApropos = null } = $$props;
    	let { OLSKAppToolbarDispatchTongue = null } = $$props;
    	let { OLSKAppToolbarDispatchFund = null } = $$props;
    	let { OLSKAppToolbarDispatchCloud } = $$props;
    	let { OLSKAppToolbarDispatchLauncher = null } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceWindowDidKeydown(event) {
    			const handlerFunctions = {
    				Space() {
    					if (!event.altKey) {
    						return;
    					}

    					OLSKAppToolbarDispatchLauncher();
    					return event.preventDefault();
    				}
    			};

    			handlerFunctions[event.code] && handlerFunctions[event.code]();
    		}
    	};

    	const writable_props = [
    		"OLSKAppToolbarGuideURL",
    		"OLSKAppToolbarFundShowProgress",
    		"OLSKAppToolbarFundLimitText",
    		"OLSKAppToolbarCloudConnected",
    		"OLSKAppToolbarCloudOffline",
    		"OLSKAppToolbarCloudError",
    		"OLSKAppToolbarDispatchApropos",
    		"OLSKAppToolbarDispatchTongue",
    		"OLSKAppToolbarDispatchFund",
    		"OLSKAppToolbarDispatchCloud",
    		"OLSKAppToolbarDispatchLauncher"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKAppToolbarGuideURL" in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ("OLSKAppToolbarFundShowProgress" in $$props) $$invalidate(1, OLSKAppToolbarFundShowProgress = $$props.OLSKAppToolbarFundShowProgress);
    		if ("OLSKAppToolbarFundLimitText" in $$props) $$invalidate(2, OLSKAppToolbarFundLimitText = $$props.OLSKAppToolbarFundLimitText);
    		if ("OLSKAppToolbarCloudConnected" in $$props) $$invalidate(3, OLSKAppToolbarCloudConnected = $$props.OLSKAppToolbarCloudConnected);
    		if ("OLSKAppToolbarCloudOffline" in $$props) $$invalidate(4, OLSKAppToolbarCloudOffline = $$props.OLSKAppToolbarCloudOffline);
    		if ("OLSKAppToolbarCloudError" in $$props) $$invalidate(5, OLSKAppToolbarCloudError = $$props.OLSKAppToolbarCloudError);
    		if ("OLSKAppToolbarDispatchApropos" in $$props) $$invalidate(6, OLSKAppToolbarDispatchApropos = $$props.OLSKAppToolbarDispatchApropos);
    		if ("OLSKAppToolbarDispatchTongue" in $$props) $$invalidate(7, OLSKAppToolbarDispatchTongue = $$props.OLSKAppToolbarDispatchTongue);
    		if ("OLSKAppToolbarDispatchFund" in $$props) $$invalidate(8, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    		if ("OLSKAppToolbarDispatchCloud" in $$props) $$invalidate(9, OLSKAppToolbarDispatchCloud = $$props.OLSKAppToolbarDispatchCloud);
    		if ("OLSKAppToolbarDispatchLauncher" in $$props) $$invalidate(10, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    		if ("$$scope" in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarFundShowProgress,
    		OLSKAppToolbarFundLimitText,
    		OLSKAppToolbarCloudConnected,
    		OLSKAppToolbarCloudOffline,
    		OLSKAppToolbarCloudError,
    		OLSKAppToolbarDispatchApropos,
    		OLSKAppToolbarDispatchTongue,
    		OLSKAppToolbarDispatchFund,
    		OLSKAppToolbarDispatchCloud,
    		OLSKAppToolbarDispatchLauncher,
    		OLSKLocalized: main_1,
    		mod,
    		OLSKReloadButton: Main$a,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKAppToolbarGuideURL" in $$props) $$invalidate(0, OLSKAppToolbarGuideURL = $$props.OLSKAppToolbarGuideURL);
    		if ("OLSKAppToolbarFundShowProgress" in $$props) $$invalidate(1, OLSKAppToolbarFundShowProgress = $$props.OLSKAppToolbarFundShowProgress);
    		if ("OLSKAppToolbarFundLimitText" in $$props) $$invalidate(2, OLSKAppToolbarFundLimitText = $$props.OLSKAppToolbarFundLimitText);
    		if ("OLSKAppToolbarCloudConnected" in $$props) $$invalidate(3, OLSKAppToolbarCloudConnected = $$props.OLSKAppToolbarCloudConnected);
    		if ("OLSKAppToolbarCloudOffline" in $$props) $$invalidate(4, OLSKAppToolbarCloudOffline = $$props.OLSKAppToolbarCloudOffline);
    		if ("OLSKAppToolbarCloudError" in $$props) $$invalidate(5, OLSKAppToolbarCloudError = $$props.OLSKAppToolbarCloudError);
    		if ("OLSKAppToolbarDispatchApropos" in $$props) $$invalidate(6, OLSKAppToolbarDispatchApropos = $$props.OLSKAppToolbarDispatchApropos);
    		if ("OLSKAppToolbarDispatchTongue" in $$props) $$invalidate(7, OLSKAppToolbarDispatchTongue = $$props.OLSKAppToolbarDispatchTongue);
    		if ("OLSKAppToolbarDispatchFund" in $$props) $$invalidate(8, OLSKAppToolbarDispatchFund = $$props.OLSKAppToolbarDispatchFund);
    		if ("OLSKAppToolbarDispatchCloud" in $$props) $$invalidate(9, OLSKAppToolbarDispatchCloud = $$props.OLSKAppToolbarDispatchCloud);
    		if ("OLSKAppToolbarDispatchLauncher" in $$props) $$invalidate(10, OLSKAppToolbarDispatchLauncher = $$props.OLSKAppToolbarDispatchLauncher);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKAppToolbarGuideURL,
    		OLSKAppToolbarFundShowProgress,
    		OLSKAppToolbarFundLimitText,
    		OLSKAppToolbarCloudConnected,
    		OLSKAppToolbarCloudOffline,
    		OLSKAppToolbarCloudError,
    		OLSKAppToolbarDispatchApropos,
    		OLSKAppToolbarDispatchTongue,
    		OLSKAppToolbarDispatchFund,
    		OLSKAppToolbarDispatchCloud,
    		OLSKAppToolbarDispatchLauncher,
    		mod,
    		$$scope,
    		slots
    	];
    }

    class Main$b extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			OLSKAppToolbarGuideURL: 0,
    			OLSKAppToolbarFundShowProgress: 1,
    			OLSKAppToolbarFundLimitText: 2,
    			OLSKAppToolbarCloudConnected: 3,
    			OLSKAppToolbarCloudOffline: 4,
    			OLSKAppToolbarCloudError: 5,
    			OLSKAppToolbarDispatchApropos: 6,
    			OLSKAppToolbarDispatchTongue: 7,
    			OLSKAppToolbarDispatchFund: 8,
    			OLSKAppToolbarDispatchCloud: 9,
    			OLSKAppToolbarDispatchLauncher: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKAppToolbarDispatchCloud*/ ctx[9] === undefined && !("OLSKAppToolbarDispatchCloud" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKAppToolbarDispatchCloud'");
    		}
    	}

    	get OLSKAppToolbarGuideURL() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarGuideURL(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarFundShowProgress() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarFundShowProgress(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarFundLimitText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarFundLimitText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudConnected() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudConnected(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudOffline() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudOffline(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarCloudError() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarCloudError(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchApropos() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchApropos(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchTongue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchTongue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchFund() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchFund(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchCloud() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchCloud(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAppToolbarDispatchLauncher() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAppToolbarDispatchLauncher(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/_shared/__external/OLSKServiceWorker/main.svelte generated by Svelte v3.38.2 */

    const { console: console_1 } = globals;
    const file$c = "os-app/_shared/__external/OLSKServiceWorker/main.svelte";

    // (104:0) {#if mod._ValueUpdateAlertIsVisible }
    function create_if_block$9(ctx) {
    	let div;
    	let span;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = `${main_1("OLSKServiceWorkerUpdateAlertLabelText")}`;
    			t1 = space();
    			button = element("button");
    			button.textContent = `${main_1("OLSKServiceWorkerUpdateAlertReloadButtonText")}`;
    			attr_dev(span, "class", "OLSKServiceWorkerUpdateAlertLabel svelte-o3rgu5");
    			add_location(span, file$c, 105, 1, 2509);
    			attr_dev(button, "class", "OLSKServiceWorkerUpdateAlertReloadButton OLSKDecorPress OLSKDecorPressCall svelte-o3rgu5");
    			add_location(button, file$c, 106, 1, 2624);
    			attr_dev(div, "class", "OLSKServiceWorkerUpdateAlert svelte-o3rgu5");
    			add_location(div, file$c, 104, 0, 2407);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(div, t1);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceReloadButtonDidClick)) /*mod*/ ctx[0].InterfaceReloadButtonDidClick.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div, "click", /*click_handler*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(104:0) {#if mod._ValueUpdateAlertIsVisible }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let if_block_anchor;
    	let if_block = /*mod*/ ctx[0]._ValueUpdateAlertIsVisible && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[0]._ValueUpdateAlertIsVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKServiceWorkerRegistrationRoute } = $$props;
    	let { DebugFakeUpdateAlertVisible = false } = $$props;
    	let { DebugEnableLogging = true } = $$props;
    	let { DebugAllowLocalhost = false } = $$props;

    	const mod = {
    		// VALUE
    		_ValueRegistration: undefined,
    		_ValueNextWorker: undefined,
    		_ValueUpdateAlertIsVisible: DebugFakeUpdateAlertVisible,
    		// INTERFACE
    		InterfaceReloadButtonDidClick() {
    			mod.ControlSkipWaiting();
    		},
    		// CONTROL
    		ControlSkipWaiting() {
    			mod._ValueNextWorker.postMessage("OLSKServiceWorker_SkipWaiting");
    		},
    		// MESSAGE
    		MessageUpdateFound(event) {
    			DebugEnableLogging && console.log("updatefound", event);
    			$$invalidate(0, mod._ValueNextWorker = mod._ValueRegistration.installing, mod);
    			mod._ValueNextWorker.addEventListener("statechange", mod.MessageNextWorkerStateChange);
    		},
    		MessageNextWorkerStateChange(event) {
    			DebugEnableLogging && console.log("statechange", mod._ValueNextWorker.state, event, navigator.serviceWorker.controller);

    			if (mod._ValueNextWorker.state !== "installed") {
    				return;
    			}

    			if (!navigator.serviceWorker.controller) {
    				return;
    			}

    			$$invalidate(0, mod._ValueUpdateAlertIsVisible = true, mod);
    		},
    		MessageControllerChange(event) {
    			DebugEnableLogging && console.log("controllerchange", event);
    			window.location.reload();
    		},
    		// SETUP
    		async SetupEverything() {
    			if (!navigator.serviceWorker) {
    				return DebugEnableLogging && console.info("Service worker not available");
    			}

    			if (!OLSKServiceWorkerRegistrationRoute) {
    				return DebugEnableLogging && console.info("Missing registration route");
    			}

    			if (document.location.hostname === "localhost" && !DebugAllowLocalhost) {
    				return DebugEnableLogging && console.info("OLSKServiceWorker: Skipping on localhost");
    			}

    			
    			await mod.SetupRegistration();
    			mod.SetupControllerChange();
    		},
    		async SetupRegistration() {
    			$$invalidate(0, mod._ValueRegistration = await navigator.serviceWorker.register(OLSKServiceWorkerRegistrationRoute), mod);
    			DebugEnableLogging && console.info("Service Worker Registered");
    			mod._ValueRegistration.addEventListener("updatefound", mod.MessageUpdateFound);
    		},
    		SetupControllerChange() {
    			navigator.serviceWorker.addEventListener("controllerchange", mod.MessageControllerChange);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidMount() {
    			mod.SetupEverything();
    		}
    	};

    	mod.LifecycleModuleDidMount();

    	const writable_props = [
    		"OLSKServiceWorkerRegistrationRoute",
    		"DebugFakeUpdateAlertVisible",
    		"DebugEnableLogging",
    		"DebugAllowLocalhost"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, mod._ValueUpdateAlertIsVisible = false, mod);

    	$$self.$$set = $$props => {
    		if ("OLSKServiceWorkerRegistrationRoute" in $$props) $$invalidate(1, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ("DebugFakeUpdateAlertVisible" in $$props) $$invalidate(2, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ("DebugEnableLogging" in $$props) $$invalidate(3, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ("DebugAllowLocalhost" in $$props) $$invalidate(4, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	$$self.$capture_state = () => ({
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKServiceWorkerRegistrationRoute" in $$props) $$invalidate(1, OLSKServiceWorkerRegistrationRoute = $$props.OLSKServiceWorkerRegistrationRoute);
    		if ("DebugFakeUpdateAlertVisible" in $$props) $$invalidate(2, DebugFakeUpdateAlertVisible = $$props.DebugFakeUpdateAlertVisible);
    		if ("DebugEnableLogging" in $$props) $$invalidate(3, DebugEnableLogging = $$props.DebugEnableLogging);
    		if ("DebugAllowLocalhost" in $$props) $$invalidate(4, DebugAllowLocalhost = $$props.DebugAllowLocalhost);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		mod,
    		OLSKServiceWorkerRegistrationRoute,
    		DebugFakeUpdateAlertVisible,
    		DebugEnableLogging,
    		DebugAllowLocalhost,
    		click_handler
    	];
    }

    class Main$c extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			OLSKServiceWorkerRegistrationRoute: 1,
    			DebugFakeUpdateAlertVisible: 2,
    			DebugEnableLogging: 3,
    			DebugAllowLocalhost: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKServiceWorkerRegistrationRoute*/ ctx[1] === undefined && !("OLSKServiceWorkerRegistrationRoute" in props)) {
    			console_1.warn("<Main> was created without expected prop 'OLSKServiceWorkerRegistrationRoute'");
    		}
    	}

    	get OLSKServiceWorkerRegistrationRoute() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKServiceWorkerRegistrationRoute(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugFakeUpdateAlertVisible() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugFakeUpdateAlertVisible(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugEnableLogging() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugEnableLogging(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DebugAllowLocalhost() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DebugAllowLocalhost(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/submodules/OLSKCloudForm/main.svelte generated by Svelte v3.38.2 */
    const file$d = "node_modules/OLSKCloud/submodules/OLSKCloudForm/main.svelte";

    function create_fragment$d(ctx) {
    	let form;
    	let input;
    	let t0;
    	let button;
    	let t1_value = main_1("OLSKCloudFormConnectButtonText") + "";
    	let t1;
    	let button_disabled_value;
    	let t2;
    	let a;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			form = element("form");
    			input = element("input");
    			t0 = space();
    			button = element("button");
    			t1 = text(t1_value);
    			t2 = space();
    			a = element("a");
    			a.textContent = `${main_1("OLSKCloudFormRegisterLinkText")}`;
    			attr_dev(input, "class", "OLSKCloudFormAddressField OLSKDecorInput svelte-1907px6");
    			attr_dev(input, "type", "email");
    			input.autofocus = true;
    			input.required = true;
    			attr_dev(input, "placeholder", "example@5apps.com");
    			add_location(input, file$d, 24, 0, 376);
    			attr_dev(button, "class", "OLSKCloudFormConnectButton svelte-1907px6");
    			button.disabled = button_disabled_value = /*mod*/ ctx[0]._ValueAddress.length ? null : true;
    			add_location(button, file$d, 26, 0, 533);
    			attr_dev(a, "class", "OLSKCloudFormRegisterLink svelte-1907px6");
    			attr_dev(a, "href", "https://5apps.com/users/sign_up?site=storage");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$d, 28, 0, 730);
    			attr_dev(form, "class", "OLSKCloudForm OLSKDecor svelte-1907px6");
    			add_location(form, file$d, 22, 0, 294);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, input);
    			set_input_value(input, /*mod*/ ctx[0]._ValueAddress);
    			append_dev(form, t0);
    			append_dev(form, button);
    			append_dev(button, t1);
    			append_dev(form, t2);
    			append_dev(form, a);
    			input.focus();

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[2]),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceFormDidSubmit)) /*mod*/ ctx[0].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						form,
    						"submit",
    						function () {
    							if (is_function(/*mod*/ ctx[0].InterfaceFormDidSubmit)) /*mod*/ ctx[0].InterfaceFormDidSubmit.apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*mod*/ 1 && input.value !== /*mod*/ ctx[0]._ValueAddress) {
    				set_input_value(input, /*mod*/ ctx[0]._ValueAddress);
    			}

    			if (dirty & /*mod*/ 1 && button_disabled_value !== (button_disabled_value = /*mod*/ ctx[0]._ValueAddress.length ? null : true)) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKCloudFormDispatchSubmit } = $$props;

    	const mod = {
    		// VALUE
    		_ValueAddress: "",
    		// INTERFACE
    		InterfaceFormDidSubmit(event) {
    			event.preventDefault();
    			OLSKCloudFormDispatchSubmit(mod._ValueAddress);
    		}
    	};

    	const writable_props = ["OLSKCloudFormDispatchSubmit"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		mod._ValueAddress = this.value;
    		$$invalidate(0, mod);
    	}

    	$$self.$$set = $$props => {
    		if ("OLSKCloudFormDispatchSubmit" in $$props) $$invalidate(1, OLSKCloudFormDispatchSubmit = $$props.OLSKCloudFormDispatchSubmit);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudFormDispatchSubmit,
    		OLSKLocalized: main_1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKCloudFormDispatchSubmit" in $$props) $$invalidate(1, OLSKCloudFormDispatchSubmit = $$props.OLSKCloudFormDispatchSubmit);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [mod, OLSKCloudFormDispatchSubmit, input_input_handler];
    }

    class Main$d extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { OLSKCloudFormDispatchSubmit: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCloudFormDispatchSubmit*/ ctx[1] === undefined && !("OLSKCloudFormDispatchSubmit" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudFormDispatchSubmit'");
    		}
    	}

    	get OLSKCloudFormDispatchSubmit() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudFormDispatchSubmit(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/submodules/OLSKCloudStatus/main.svelte generated by Svelte v3.38.2 */
    const file$e = "node_modules/OLSKCloud/submodules/OLSKCloudStatus/main.svelte";

    // (17:0) {#if !OLSKCloudStatusIsSyncing }
    function create_if_block_1$7(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedSyncStart + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKCloudStatusSyncStartButtonImage");
    			add_location(div, file$e, 18, 2, 690);
    			attr_dev(button, "class", "OLSKCloudStatusSyncStartButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1("OLSKCloudStatusSyncStartButtonText"));
    			add_location(button, file$e, 17, 1, 473);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudStatusDispatchSyncStart*/ ctx[2])) /*OLSKCloudStatusDispatchSyncStart*/ ctx[2].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(17:0) {#if !OLSKCloudStatusIsSyncing }",
    		ctx
    	});

    	return block;
    }

    // (23:0) {#if OLSKCloudStatusIsSyncing }
    function create_if_block$a(ctx) {
    	let button;
    	let div;
    	let raw_value = OLSKUIAssets._OLSKSharedSyncStop + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div = element("div");
    			attr_dev(div, "class", "OLSKCloudStatusSyncStopButtonImage");
    			add_location(div, file$e, 24, 2, 1053);
    			attr_dev(button, "class", "OLSKCloudStatusSyncStopButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1("OLSKCloudStatusSyncStopButtonText"));
    			add_location(button, file$e, 23, 1, 839);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div);
    			div.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudStatusDispatchSyncStop*/ ctx[3])) /*OLSKCloudStatusDispatchSyncStop*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(23:0) {#if OLSKCloudStatusIsSyncing }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div1;
    	let strong;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let button;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedStorageDisconnect + "";
    	let button_title_value;
    	let mounted;
    	let dispose;
    	let if_block0 = !/*OLSKCloudStatusIsSyncing*/ ctx[1] && create_if_block_1$7(ctx);
    	let if_block1 = /*OLSKCloudStatusIsSyncing*/ ctx[1] && create_if_block$a(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			strong = element("strong");
    			t0 = text(/*OLSKCloudStatusIdentityText*/ ctx[0]);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			button = element("button");
    			div0 = element("div");
    			attr_dev(strong, "class", "OLSKCloudStatusIdentity");
    			add_location(strong, file$e, 14, 0, 357);
    			attr_dev(div0, "class", "OLSKCloudStatusDisconnectButtonImage");
    			add_location(div0, file$e, 29, 1, 1467);
    			attr_dev(button, "class", "OLSKCloudStatusDisconnectButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1("OLSKCloudStatusDisconnectButtonText"));
    			add_location(button, file$e, 28, 0, 1167);
    			attr_dev(div1, "class", "OLSKCloudStatus svelte-10ewvcb");
    			add_location(div1, file$e, 12, 0, 326);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, strong);
    			append_dev(strong, t0);
    			append_dev(div1, t1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t3);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKCloudStatusIdentityText*/ 1) set_data_dev(t0, /*OLSKCloudStatusIdentityText*/ ctx[0]);

    			if (!/*OLSKCloudStatusIsSyncing*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$7(ctx);
    					if_block0.c();
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*OLSKCloudStatusIsSyncing*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$a(ctx);
    					if_block1.c();
    					if_block1.m(div1, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKCloudStatusIdentityText } = $$props;
    	let { OLSKCloudStatusIsSyncing } = $$props;
    	let { OLSKCloudStatusDispatchSyncStart } = $$props;
    	let { OLSKCloudStatusDispatchSyncStop } = $$props;
    	let { OLSKCloudStatusDispatchDisconnect } = $$props;

    	const writable_props = [
    		"OLSKCloudStatusIdentityText",
    		"OLSKCloudStatusIsSyncing",
    		"OLSKCloudStatusDispatchSyncStart",
    		"OLSKCloudStatusDispatchSyncStop",
    		"OLSKCloudStatusDispatchDisconnect"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.confirm(main_1("OLSKCloudStatusDisconnectConfirmText")) && OLSKCloudStatusDispatchDisconnect();

    	$$self.$$set = $$props => {
    		if ("OLSKCloudStatusIdentityText" in $$props) $$invalidate(0, OLSKCloudStatusIdentityText = $$props.OLSKCloudStatusIdentityText);
    		if ("OLSKCloudStatusIsSyncing" in $$props) $$invalidate(1, OLSKCloudStatusIsSyncing = $$props.OLSKCloudStatusIsSyncing);
    		if ("OLSKCloudStatusDispatchSyncStart" in $$props) $$invalidate(2, OLSKCloudStatusDispatchSyncStart = $$props.OLSKCloudStatusDispatchSyncStart);
    		if ("OLSKCloudStatusDispatchSyncStop" in $$props) $$invalidate(3, OLSKCloudStatusDispatchSyncStop = $$props.OLSKCloudStatusDispatchSyncStop);
    		if ("OLSKCloudStatusDispatchDisconnect" in $$props) $$invalidate(4, OLSKCloudStatusDispatchDisconnect = $$props.OLSKCloudStatusDispatchDisconnect);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudStatusIdentityText,
    		OLSKCloudStatusIsSyncing,
    		OLSKCloudStatusDispatchSyncStart,
    		OLSKCloudStatusDispatchSyncStop,
    		OLSKCloudStatusDispatchDisconnect,
    		OLSKLocalized: main_1,
    		OLSKUIAssets
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKCloudStatusIdentityText" in $$props) $$invalidate(0, OLSKCloudStatusIdentityText = $$props.OLSKCloudStatusIdentityText);
    		if ("OLSKCloudStatusIsSyncing" in $$props) $$invalidate(1, OLSKCloudStatusIsSyncing = $$props.OLSKCloudStatusIsSyncing);
    		if ("OLSKCloudStatusDispatchSyncStart" in $$props) $$invalidate(2, OLSKCloudStatusDispatchSyncStart = $$props.OLSKCloudStatusDispatchSyncStart);
    		if ("OLSKCloudStatusDispatchSyncStop" in $$props) $$invalidate(3, OLSKCloudStatusDispatchSyncStop = $$props.OLSKCloudStatusDispatchSyncStop);
    		if ("OLSKCloudStatusDispatchDisconnect" in $$props) $$invalidate(4, OLSKCloudStatusDispatchDisconnect = $$props.OLSKCloudStatusDispatchDisconnect);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKCloudStatusIdentityText,
    		OLSKCloudStatusIsSyncing,
    		OLSKCloudStatusDispatchSyncStart,
    		OLSKCloudStatusDispatchSyncStop,
    		OLSKCloudStatusDispatchDisconnect,
    		click_handler
    	];
    }

    class Main$e extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			OLSKCloudStatusIdentityText: 0,
    			OLSKCloudStatusIsSyncing: 1,
    			OLSKCloudStatusDispatchSyncStart: 2,
    			OLSKCloudStatusDispatchSyncStop: 3,
    			OLSKCloudStatusDispatchDisconnect: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCloudStatusIdentityText*/ ctx[0] === undefined && !("OLSKCloudStatusIdentityText" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusIdentityText'");
    		}

    		if (/*OLSKCloudStatusIsSyncing*/ ctx[1] === undefined && !("OLSKCloudStatusIsSyncing" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusIsSyncing'");
    		}

    		if (/*OLSKCloudStatusDispatchSyncStart*/ ctx[2] === undefined && !("OLSKCloudStatusDispatchSyncStart" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchSyncStart'");
    		}

    		if (/*OLSKCloudStatusDispatchSyncStop*/ ctx[3] === undefined && !("OLSKCloudStatusDispatchSyncStop" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchSyncStop'");
    		}

    		if (/*OLSKCloudStatusDispatchDisconnect*/ ctx[4] === undefined && !("OLSKCloudStatusDispatchDisconnect" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudStatusDispatchDisconnect'");
    		}
    	}

    	get OLSKCloudStatusIdentityText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusIdentityText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusIsSyncing() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusIsSyncing(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchSyncStart() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchSyncStart(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchSyncStop() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchSyncStop(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudStatusDispatchDisconnect() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudStatusDispatchDisconnect(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKCloud/main.svelte generated by Svelte v3.38.2 */
    const file$f = "node_modules/OLSKCloud/main.svelte";

    // (13:0) {#if $$props.OLSKCloudErrorText }
    function create_if_block_2$5(ctx) {
    	let p;
    	let t0;
    	let t1;
    	let show_if = /*OLSKCloudErrorText*/ ctx[0].match("Unauthorized");
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_3$3(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text(/*OLSKCloudErrorText*/ ctx[0]);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(p, "class", "OLSKCloudError svelte-kyilmw");
    			add_location(p, file$f, 13, 1, 344);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKCloudErrorText*/ 1) set_data_dev(t0, /*OLSKCloudErrorText*/ ctx[0]);
    			if (dirty & /*OLSKCloudErrorText*/ 1) show_if = /*OLSKCloudErrorText*/ ctx[0].match("Unauthorized");

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(13:0) {#if $$props.OLSKCloudErrorText }",
    		ctx
    	});

    	return block;
    }

    // (16:1) {#if OLSKCloudErrorText.match('Unauthorized') }
    function create_if_block_3$3(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1("OLSKCloudRenewButtonText")}`;
    			attr_dev(button, "class", "OLSKCloudRenewButton");
    			add_location(button, file$f, 16, 2, 449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*OLSKCloudDispatchRenew*/ ctx[1])) /*OLSKCloudDispatchRenew*/ ctx[1].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(16:1) {#if OLSKCloudErrorText.match('Unauthorized') }",
    		ctx
    	});

    	return block;
    }

    // (21:0) {#if !$$props.OLSKCloudStatusIdentityText }
    function create_if_block_1$8(ctx) {
    	let olskcloudform;
    	let current;

    	olskcloudform = new Main$d({
    			props: {
    				OLSKCloudFormDispatchSubmit: /*$$props*/ ctx[2].OLSKCloudFormDispatchSubmit
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskcloudform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskcloudform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloudform_changes = {};
    			if (dirty & /*$$props*/ 4) olskcloudform_changes.OLSKCloudFormDispatchSubmit = /*$$props*/ ctx[2].OLSKCloudFormDispatchSubmit;
    			olskcloudform.$set(olskcloudform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloudform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloudform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskcloudform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(21:0) {#if !$$props.OLSKCloudStatusIdentityText }",
    		ctx
    	});

    	return block;
    }

    // (27:0) {#if $$props.OLSKCloudStatusIdentityText }
    function create_if_block$b(ctx) {
    	let olskcloudstatus;
    	let current;

    	olskcloudstatus = new Main$e({
    			props: {
    				OLSKCloudStatusIdentityText: /*$$props*/ ctx[2].OLSKCloudStatusIdentityText,
    				OLSKCloudStatusIsSyncing: /*$$props*/ ctx[2].OLSKCloudStatusIsSyncing,
    				OLSKCloudStatusDispatchSyncStart: /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStart,
    				OLSKCloudStatusDispatchSyncStop: /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStop,
    				OLSKCloudStatusDispatchDisconnect: /*$$props*/ ctx[2].OLSKCloudStatusDispatchDisconnect
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskcloudstatus.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskcloudstatus, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloudstatus_changes = {};
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusIdentityText = /*$$props*/ ctx[2].OLSKCloudStatusIdentityText;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusIsSyncing = /*$$props*/ ctx[2].OLSKCloudStatusIsSyncing;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchSyncStart = /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStart;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchSyncStop = /*$$props*/ ctx[2].OLSKCloudStatusDispatchSyncStop;
    			if (dirty & /*$$props*/ 4) olskcloudstatus_changes.OLSKCloudStatusDispatchDisconnect = /*$$props*/ ctx[2].OLSKCloudStatusDispatchDisconnect;
    			olskcloudstatus.$set(olskcloudstatus_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloudstatus.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloudstatus.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskcloudstatus, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(27:0) {#if $$props.OLSKCloudStatusIdentityText }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let if_block0 = /*$$props*/ ctx[2].OLSKCloudErrorText && create_if_block_2$5(ctx);
    	let if_block1 = !/*$$props*/ ctx[2].OLSKCloudStatusIdentityText && create_if_block_1$8(ctx);
    	let if_block2 = /*$$props*/ ctx[2].OLSKCloudStatusIdentityText && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "OLSKCloud svelte-kyilmw");
    			add_location(div, file$f, 10, 0, 284);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$$props*/ ctx[2].OLSKCloudErrorText) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$5(ctx);
    					if_block0.c();
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!/*$$props*/ ctx[2].OLSKCloudStatusIdentityText) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$props*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$8(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$$props*/ ctx[2].OLSKCloudStatusIdentityText) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$props*/ 4) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$b(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKCloudErrorText = null } = $$props;
    	let { OLSKCloudDispatchRenew } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("OLSKCloudErrorText" in $$new_props) $$invalidate(0, OLSKCloudErrorText = $$new_props.OLSKCloudErrorText);
    		if ("OLSKCloudDispatchRenew" in $$new_props) $$invalidate(1, OLSKCloudDispatchRenew = $$new_props.OLSKCloudDispatchRenew);
    	};

    	$$self.$capture_state = () => ({
    		OLSKCloudErrorText,
    		OLSKCloudDispatchRenew,
    		OLSKLocalized: main_1,
    		OLSKCloudForm: Main$d,
    		OLSKCloudStatus: Main$e
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(2, $$props = assign(assign({}, $$props), $$new_props));
    		if ("OLSKCloudErrorText" in $$props) $$invalidate(0, OLSKCloudErrorText = $$new_props.OLSKCloudErrorText);
    		if ("OLSKCloudDispatchRenew" in $$props) $$invalidate(1, OLSKCloudDispatchRenew = $$new_props.OLSKCloudDispatchRenew);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [OLSKCloudErrorText, OLSKCloudDispatchRenew, $$props];
    }

    class Main$f extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {
    			OLSKCloudErrorText: 0,
    			OLSKCloudDispatchRenew: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKCloudDispatchRenew*/ ctx[1] === undefined && !("OLSKCloudDispatchRenew" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKCloudDispatchRenew'");
    		}
    	}

    	get OLSKCloudErrorText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudErrorText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKCloudDispatchRenew() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKCloudDispatchRenew(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKPointer/main.svelte generated by Svelte v3.38.2 */

    const file$g = "node_modules/OLSKPointer/main.svelte";

    function create_fragment$g(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "OLSKPointer svelte-1lkaohs");
    			set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			add_location(div, file$g, 5, 0, 87);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*OLSKPointerSize*/ 1) {
    				set_style(div, "--OLSKPointerSize", /*OLSKPointerSize*/ ctx[0] + "px");
    			}

    			if (dirty & /*OLSKPointerStroke*/ 2) {
    				set_style(div, "--OLSKPointerStroke", /*OLSKPointerStroke*/ ctx[1] + "px");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKPointerSize = 20 } = $$props;
    	let { OLSKPointerStroke = 2 } = $$props;
    	const writable_props = ["OLSKPointerSize", "OLSKPointerStroke"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKPointerSize" in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ("OLSKPointerStroke" in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	$$self.$capture_state = () => ({ OLSKPointerSize, OLSKPointerStroke });

    	$$self.$inject_state = $$props => {
    		if ("OLSKPointerSize" in $$props) $$invalidate(0, OLSKPointerSize = $$props.OLSKPointerSize);
    		if ("OLSKPointerStroke" in $$props) $$invalidate(1, OLSKPointerStroke = $$props.OLSKPointerStroke);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKPointerSize, OLSKPointerStroke];
    }

    class Main$g extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { OLSKPointerSize: 0, OLSKPointerStroke: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get OLSKPointerSize() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerSize(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKPointerStroke() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKPointerStroke(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(n);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var MicroModal = function () {

      var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];

      var Modal = /*#__PURE__*/function () {
        function Modal(_ref) {
          var targetModal = _ref.targetModal,
              _ref$triggers = _ref.triggers,
              triggers = _ref$triggers === void 0 ? [] : _ref$triggers,
              _ref$onShow = _ref.onShow,
              onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,
              _ref$onClose = _ref.onClose,
              onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,
              _ref$openTrigger = _ref.openTrigger,
              openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,
              _ref$closeTrigger = _ref.closeTrigger,
              closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,
              _ref$openClass = _ref.openClass,
              openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,
              _ref$disableScroll = _ref.disableScroll,
              disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,
              _ref$disableFocus = _ref.disableFocus,
              disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,
              _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,
              awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,
              _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,
              awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,
              _ref$debugMode = _ref.debugMode,
              debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;

          _classCallCheck(this, Modal);

          // Save a reference of the modal
          this.modal = document.getElementById(targetModal); // Save a reference to the passed config

          this.config = {
            debugMode: debugMode,
            disableScroll: disableScroll,
            openTrigger: openTrigger,
            closeTrigger: closeTrigger,
            openClass: openClass,
            onShow: onShow,
            onClose: onClose,
            awaitCloseAnimation: awaitCloseAnimation,
            awaitOpenAnimation: awaitOpenAnimation,
            disableFocus: disableFocus
          }; // Register click events only if pre binding eventListeners

          if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners

          this.onClick = this.onClick.bind(this);
          this.onKeydown = this.onKeydown.bind(this);
        }
        /**
         * Loops through all openTriggers and binds click event
         * @param  {array} triggers [Array of node elements]
         * @return {void}
         */


        _createClass(Modal, [{
          key: "registerTriggers",
          value: function registerTriggers() {
            var _this = this;

            for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {
              triggers[_key] = arguments[_key];
            }

            triggers.filter(Boolean).forEach(function (trigger) {
              trigger.addEventListener('click', function (event) {
                return _this.showModal(event);
              });
            });
          }
        }, {
          key: "showModal",
          value: function showModal() {
            var _this2 = this;

            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            this.activeElement = document.activeElement;
            this.modal.setAttribute('aria-hidden', 'false');
            this.modal.classList.add(this.config.openClass);
            this.scrollBehaviour('disable');
            this.addEventListeners();

            if (this.config.awaitOpenAnimation) {
              var handler = function handler() {
                _this2.modal.removeEventListener('animationend', handler, false);

                _this2.setFocusToFirstNode();
              };

              this.modal.addEventListener('animationend', handler, false);
            } else {
              this.setFocusToFirstNode();
            }

            this.config.onShow(this.modal, this.activeElement, event);
          }
        }, {
          key: "closeModal",
          value: function closeModal() {
            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var modal = this.modal;
            this.modal.setAttribute('aria-hidden', 'true');
            this.removeEventListeners();
            this.scrollBehaviour('enable');

            if (this.activeElement && this.activeElement.focus) {
              this.activeElement.focus();
            }

            this.config.onClose(this.modal, this.activeElement, event);

            if (this.config.awaitCloseAnimation) {
              var openClass = this.config.openClass; // <- old school ftw

              this.modal.addEventListener('animationend', function handler() {
                modal.classList.remove(openClass);
                modal.removeEventListener('animationend', handler, false);
              }, false);
            } else {
              modal.classList.remove(this.config.openClass);
            }
          }
        }, {
          key: "closeModalById",
          value: function closeModalById(targetModal) {
            this.modal = document.getElementById(targetModal);
            if (this.modal) this.closeModal();
          }
        }, {
          key: "scrollBehaviour",
          value: function scrollBehaviour(toggle) {
            if (!this.config.disableScroll) return;
            var body = document.querySelector('body');

            switch (toggle) {
              case 'enable':
                Object.assign(body.style, {
                  overflow: ''
                });
                break;

              case 'disable':
                Object.assign(body.style, {
                  overflow: 'hidden'
                });
                break;
            }
          }
        }, {
          key: "addEventListeners",
          value: function addEventListeners() {
            this.modal.addEventListener('touchstart', this.onClick);
            this.modal.addEventListener('click', this.onClick);
            document.addEventListener('keydown', this.onKeydown);
          }
        }, {
          key: "removeEventListeners",
          value: function removeEventListeners() {
            this.modal.removeEventListener('touchstart', this.onClick);
            this.modal.removeEventListener('click', this.onClick);
            document.removeEventListener('keydown', this.onKeydown);
          }
        }, {
          key: "onClick",
          value: function onClick(event) {
            if (event.target.hasAttribute(this.config.closeTrigger)) {
              this.closeModal(event);
            }
          }
        }, {
          key: "onKeydown",
          value: function onKeydown(event) {
            if (event.keyCode === 27) this.closeModal(event); // esc

            if (event.keyCode === 9) this.retainFocus(event); // tab
          }
        }, {
          key: "getFocusableNodes",
          value: function getFocusableNodes() {
            var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);
            return Array.apply(void 0, _toConsumableArray(nodes));
          }
          /**
           * Tries to set focus on a node which is not a close trigger
           * if no other nodes exist then focuses on first close trigger
           */

        }, {
          key: "setFocusToFirstNode",
          value: function setFocusToFirstNode() {
            var _this3 = this;

            if (this.config.disableFocus) return;
            var focusableNodes = this.getFocusableNodes(); // no focusable nodes

            if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes
            // could not think of a better name :(

            var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {
              return !node.hasAttribute(_this3.config.closeTrigger);
            });
            if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();
            if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();
          }
        }, {
          key: "retainFocus",
          value: function retainFocus(event) {
            var focusableNodes = this.getFocusableNodes(); // no focusable nodes

            if (focusableNodes.length === 0) return;
            /**
             * Filters nodes which are hidden to prevent
             * focus leak outside modal
             */

            focusableNodes = focusableNodes.filter(function (node) {
              return node.offsetParent !== null;
            }); // if disableFocus is true

            if (!this.modal.contains(document.activeElement)) {
              focusableNodes[0].focus();
            } else {
              var focusedItemIndex = focusableNodes.indexOf(document.activeElement);

              if (event.shiftKey && focusedItemIndex === 0) {
                focusableNodes[focusableNodes.length - 1].focus();
                event.preventDefault();
              }

              if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {
                focusableNodes[0].focus();
                event.preventDefault();
              }
            }
          }
        }]);

        return Modal;
      }();
      /**
       * Modal prototype ends.
       * Here on code is responsible for detecting and
       * auto binding event handlers on modal triggers
       */
      // Keep a reference to the opened modal


      var activeModal = null;
      /**
       * Generates an associative array of modals and it's
       * respective triggers
       * @param  {array} triggers     An array of all triggers
       * @param  {string} triggerAttr The data-attribute which triggers the module
       * @return {array}
       */

      var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {
        var triggerMap = [];
        triggers.forEach(function (trigger) {
          var targetModal = trigger.attributes[triggerAttr].value;
          if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];
          triggerMap[targetModal].push(trigger);
        });
        return triggerMap;
      };
      /**
       * Validates whether a modal of the given id exists
       * in the DOM
       * @param  {number} id  The id of the modal
       * @return {boolean}
       */


      var validateModalPresence = function validateModalPresence(id) {
        if (!document.getElementById(id)) {
          console.warn("MicroModal: \u2757Seems like you have missed %c'".concat(id, "'"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');
          console.warn("%cExample:", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', "<div class=\"modal\" id=\"".concat(id, "\"></div>"));
          return false;
        }
      };
      /**
       * Validates if there are modal triggers present
       * in the DOM
       * @param  {array} triggers An array of data-triggers
       * @return {boolean}
       */


      var validateTriggerPresence = function validateTriggerPresence(triggers) {
        if (triggers.length <= 0) {
          console.warn("MicroModal: \u2757Please specify at least one %c'micromodal-trigger'", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');
          console.warn("%cExample:", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', "<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>");
          return false;
        }
      };
      /**
       * Checks if triggers and their corresponding modals
       * are present in the DOM
       * @param  {array} triggers   Array of DOM nodes which have data-triggers
       * @param  {array} triggerMap Associative array of modals and their triggers
       * @return {boolean}
       */


      var validateArgs = function validateArgs(triggers, triggerMap) {
        validateTriggerPresence(triggers);
        if (!triggerMap) return true;

        for (var id in triggerMap) {
          validateModalPresence(id);
        }

        return true;
      };
      /**
       * Binds click handlers to all modal triggers
       * @param  {object} config [description]
       * @return void
       */


      var init = function init(config) {
        // Create an config object with default openTrigger
        var options = Object.assign({}, {
          openTrigger: 'data-micromodal-trigger'
        }, config); // Collects all the nodes with the trigger

        var triggers = _toConsumableArray(document.querySelectorAll("[".concat(options.openTrigger, "]"))); // Makes a mappings of modals with their trigger nodes


        var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom

        if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance

        for (var key in triggerMap) {
          var value = triggerMap[key];
          options.targetModal = key;
          options.triggers = _toConsumableArray(value);
          activeModal = new Modal(options); // eslint-disable-line no-new
        }
      };
      /**
       * Shows a particular modal
       * @param  {string} targetModal [The id of the modal to display]
       * @param  {object} config [The configuration object to pass]
       * @return {void}
       */


      var show = function show(targetModal, config) {
        var options = config || {};
        options.targetModal = targetModal; // Checks if modals and triggers exist in dom

        if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close

        if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal

        activeModal = new Modal(options); // eslint-disable-line no-new

        activeModal.showModal();
      };
      /**
       * Closes the active modal
       * @param  {string} targetModal [The id of the modal to close]
       * @return {void}
       */


      var close = function close(targetModal) {
        targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();
      };

      return {
        init: init,
        show: show,
        close: close
      };
    }();
    window.MicroModal = MicroModal;

    /* node_modules/OLSKStandardView/main.svelte generated by Svelte v3.38.2 */

    const file$h = "node_modules/OLSKStandardView/main.svelte";
    const get_OLSKStandardViewTail_slot_changes = dirty => ({});
    const get_OLSKStandardViewTail_slot_context = ctx => ({});
    const get_OLSKStandardViewHead_slot_changes = dirty => ({});
    const get_OLSKStandardViewHead_slot_context = ctx => ({});

    // (2:1) {#if $$slots.OLSKStandardViewHead}
    function create_if_block_2$6(ctx) {
    	let div;
    	let current;
    	const OLSKStandardViewHead_slot_template = /*#slots*/ ctx[2].OLSKStandardViewHead;
    	const OLSKStandardViewHead_slot = create_slot(OLSKStandardViewHead_slot_template, ctx, /*$$scope*/ ctx[1], get_OLSKStandardViewHead_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKStandardViewHead_slot) OLSKStandardViewHead_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewHead OLSKDecorFixedHeader svelte-hvaqwn");
    			add_location(div, file$h, 2, 2, 84);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKStandardViewHead_slot) {
    				OLSKStandardViewHead_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewHead_slot) {
    				if (OLSKStandardViewHead_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot(OLSKStandardViewHead_slot, OLSKStandardViewHead_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_OLSKStandardViewHead_slot_changes, get_OLSKStandardViewHead_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewHead_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewHead_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKStandardViewHead_slot) OLSKStandardViewHead_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(2:1) {#if $$slots.OLSKStandardViewHead}",
    		ctx
    	});

    	return block;
    }

    // (8:1) {#if $$slots.default }
    function create_if_block_1$9(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewBody OLSKDecorFixedSecondary svelte-hvaqwn");
    			add_location(div, file$h, 8, 2, 229);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(8:1) {#if $$slots.default }",
    		ctx
    	});

    	return block;
    }

    // (14:1) {#if $$slots.OLSKStandardViewTail}
    function create_if_block$c(ctx) {
    	let div;
    	let current;
    	const OLSKStandardViewTail_slot_template = /*#slots*/ ctx[2].OLSKStandardViewTail;
    	const OLSKStandardViewTail_slot = create_slot(OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[1], get_OLSKStandardViewTail_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.c();
    			attr_dev(div, "class", "OLSKStandardViewTail");
    			add_location(div, file$h, 14, 2, 360);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (OLSKStandardViewTail_slot) {
    				OLSKStandardViewTail_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewTail_slot) {
    				if (OLSKStandardViewTail_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot(OLSKStandardViewTail_slot, OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_OLSKStandardViewTail_slot_changes, get_OLSKStandardViewTail_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(14:1) {#if $$slots.OLSKStandardViewTail}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let div;
    	let t0;
    	let t1;
    	let current;
    	let if_block0 = /*$$slots*/ ctx[0].OLSKStandardViewHead && create_if_block_2$6(ctx);
    	let if_block1 = /*$$slots*/ ctx[0].default && create_if_block_1$9(ctx);
    	let if_block2 = /*$$slots*/ ctx[0].OLSKStandardViewTail && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", "OLSKStandardView OLSKDecorFixed svelte-hvaqwn");
    			add_location(div, file$h, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$$slots*/ ctx[0].OLSKStandardViewHead) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_2$6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[0].default) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$$slots*/ ctx[0].OLSKStandardViewTail) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$c(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['OLSKStandardViewHead','default','OLSKStandardViewTail']);
    	const $$slots = compute_slots(slots);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	return [$$slots, $$scope, slots];
    }

    class Main$h extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* node_modules/OLSKModalView/main.svelte generated by Svelte v3.38.2 */
    const file$i = "node_modules/OLSKModalView/main.svelte";
    const get_OLSKStandardViewTail_slot_changes$1 = dirty => ({});
    const get_OLSKStandardViewTail_slot_context$1 = ctx => ({});

    // (80:0) {#if mod._ValueIsVisible }
    function create_if_block$d(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let olskstandardview;
    	let div0_aria_labelledby_value;
    	let div2_id_value;
    	let current;

    	olskstandardview = new Main$h({
    			props: {
    				$$slots: {
    					OLSKStandardViewTail: [create_OLSKStandardViewTail_slot],
    					OLSKStandardViewHead: [create_OLSKStandardViewHead_slot],
    					default: [create_default_slot$2]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			create_component(olskstandardview.$$.fragment);
    			attr_dev(div0, "class", "OLSKModalViewContainer svelte-16rd7qp");
    			attr_dev(div0, "role", "dialog");
    			attr_dev(div0, "aria-modal", "true");
    			attr_dev(div0, "aria-labelledby", div0_aria_labelledby_value = /*mod*/ ctx[2]._DataRandomTitleID);
    			add_location(div0, file$i, 83, 2, 1586);
    			attr_dev(div1, "class", "OLSKModalViewOverlay svelte-16rd7qp");
    			attr_dev(div1, "tabindex", "-1");
    			attr_dev(div1, "data-micromodal-close", "");
    			add_location(div1, file$i, 82, 1, 1513);
    			attr_dev(div2, "class", "OLSKModalView svelte-16rd7qp");
    			attr_dev(div2, "id", div2_id_value = /*mod*/ ctx[2]._DataRandomID);
    			attr_dev(div2, "aria-hidden", "true");
    			toggle_class(div2, "OLSKModalViewCapped", /*OLSKModalViewIsCapped*/ ctx[1]);
    			add_location(div2, file$i, 81, 0, 1388);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			mount_component(olskstandardview, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskstandardview_changes = {};

    			if (dirty & /*$$scope, $$slots, mod, OLSKModalViewTitleText*/ 77) {
    				olskstandardview_changes.$$scope = { dirty, ctx };
    			}

    			olskstandardview.$set(olskstandardview_changes);

    			if (!current || dirty & /*mod*/ 4 && div0_aria_labelledby_value !== (div0_aria_labelledby_value = /*mod*/ ctx[2]._DataRandomTitleID)) {
    				attr_dev(div0, "aria-labelledby", div0_aria_labelledby_value);
    			}

    			if (!current || dirty & /*mod*/ 4 && div2_id_value !== (div2_id_value = /*mod*/ ctx[2]._DataRandomID)) {
    				attr_dev(div2, "id", div2_id_value);
    			}

    			if (dirty & /*OLSKModalViewIsCapped*/ 2) {
    				toggle_class(div2, "OLSKModalViewCapped", /*OLSKModalViewIsCapped*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskstandardview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskstandardview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(olskstandardview);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(80:0) {#if mod._ValueIsVisible }",
    		ctx
    	});

    	return block;
    }

    // (85:3) <OLSKStandardView>
    function create_default_slot$2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(85:3) <OLSKStandardView>",
    		ctx
    	});

    	return block;
    }

    // (86:4) 
    function create_OLSKStandardViewHead_slot(ctx) {
    	let div3;
    	let div0;
    	let t1;
    	let div1;
    	let span;
    	let t2;
    	let span_id_value;
    	let t3;
    	let div2;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			div0.textContent = " ";
    			t1 = space();
    			div1 = element("div");
    			span = element("span");
    			t2 = text(/*OLSKModalViewTitleText*/ ctx[0]);
    			t3 = space();
    			div2 = element("div");
    			button = element("button");
    			button.textContent = `${main_1("OLSKModalViewCloseButtonText")}`;
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$i, 86, 5, 1841);
    			attr_dev(span, "class", "OLSKModalViewTitle svelte-16rd7qp");
    			attr_dev(span, "id", span_id_value = /*mod*/ ctx[2]._DataRandomTitleID);
    			add_location(span, file$i, 89, 6, 1941);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$i, 88, 5, 1897);
    			attr_dev(button, "class", "OLSKModalViewCloseButton OLSKDecorButtonNoStyle OLSKDecorTappable");
    			add_location(button, file$i, 93, 6, 2100);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$i, 92, 5, 2056);
    			attr_dev(div3, "class", "OLSKModalViewHead OLSKToolbar OLSKCommonEdgeBottom OLSKToolbarJustify svelte-16rd7qp");
    			attr_dev(div3, "slot", "OLSKStandardViewHead");
    			add_location(div3, file$i, 85, 4, 1724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, span);
    			append_dev(span, t2);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[2].ControlClose)) /*mod*/ ctx[2].ControlClose.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*OLSKModalViewTitleText*/ 1) set_data_dev(t2, /*OLSKModalViewTitleText*/ ctx[0]);

    			if (dirty & /*mod*/ 4 && span_id_value !== (span_id_value = /*mod*/ ctx[2]._DataRandomTitleID)) {
    				attr_dev(span, "id", span_id_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewHead_slot.name,
    		type: "slot",
    		source: "(86:4) ",
    		ctx
    	});

    	return block;
    }

    // (100:110) {#if $$slots.OLSKStandardViewTail}
    function create_if_block_1$a(ctx) {
    	let current;
    	const OLSKStandardViewTail_slot_template = /*#slots*/ ctx[5].OLSKStandardViewTail;
    	const OLSKStandardViewTail_slot = create_slot(OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[6], get_OLSKStandardViewTail_slot_context$1);

    	const block = {
    		c: function create() {
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (OLSKStandardViewTail_slot) {
    				OLSKStandardViewTail_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (OLSKStandardViewTail_slot) {
    				if (OLSKStandardViewTail_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot(OLSKStandardViewTail_slot, OLSKStandardViewTail_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_OLSKStandardViewTail_slot_changes$1, get_OLSKStandardViewTail_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(OLSKStandardViewTail_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(OLSKStandardViewTail_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (OLSKStandardViewTail_slot) OLSKStandardViewTail_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(100:110) {#if $$slots.OLSKStandardViewTail}",
    		ctx
    	});

    	return block;
    }

    // (100:4) 
    function create_OLSKStandardViewTail_slot(ctx) {
    	let div;
    	let current;
    	let if_block = /*$$slots*/ ctx[3].OLSKStandardViewTail && create_if_block_1$a(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "slot", "OLSKStandardViewTail");
    			toggle_class(div, "OLSKStandardViewTailHotfixHidden", !/*$$slots*/ ctx[3].OLSKStandardViewTail);
    			add_location(div, file$i, 99, 4, 2318);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$$slots*/ ctx[3].OLSKStandardViewTail) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$$slots*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$a(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$$slots*/ 8) {
    				toggle_class(div, "OLSKStandardViewTailHotfixHidden", !/*$$slots*/ ctx[3].OLSKStandardViewTail);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewTail_slot.name,
    		type: "slot",
    		source: "(100:4) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*mod*/ ctx[2]._ValueIsVisible && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*mod*/ ctx[2]._ValueIsVisible) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*mod*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, ['OLSKStandardViewTail','default']);
    	const $$slots = compute_slots(slots);
    	let { OLSKModalViewTitleText } = $$props;
    	let { OLSKModalViewIsCapped = false } = $$props;

    	const modPublic = {
    		_OLSKModalViewIsVisible() {
    			return mod._ValueIsVisible;
    		},
    		OLSKModalViewShow() {
    			mod.ControlShow();
    		},
    		OLSKModalViewClose() {
    			mod.ControlClose();
    		}
    	};

    	const mod = {
    		// VALUE
    		_ValueIsVisible: false,
    		_ValueUpdateCallback: null,
    		// DATA
    		_DataRandomID: "OLSKModalView_" + Math.random().toString().slice(2),
    		_DataRandomTitleID: "OLSKModalViewTitle_" + Math.random().toString().slice(2),
    		// CONTROL
    		ControlShow() {
    			$$invalidate(
    				2,
    				mod._ValueUpdateCallback = function () {
    					MicroModal.show(mod._DataRandomID, {
    						openClass: "OLSKModalViewOpen",
    						awaitOpenAnimation: true,
    						awaitCloseAnimation: true,
    						onClose() {
    							setTimeout(
    								function () {
    									$$invalidate(2, mod._ValueIsVisible = false, mod);
    								},
    								600
    							);
    						}
    					});
    				},
    				mod
    			);

    			$$invalidate(2, mod._ValueIsVisible = true, mod);
    		},
    		ControlClose() {
    			MicroModal.close(mod._DataRandomID);
    		},
    		// LIFECYCLE
    		LifecycleModuleDidUpdate() {
    			if (!mod._ValueUpdateCallback) {
    				return;
    			}

    			mod._ValueUpdateCallback();
    			delete mod._ValueUpdateCallback;
    		}
    	};

    	afterUpdate(mod.LifecycleModuleDidUpdate);
    	const writable_props = ["OLSKModalViewTitleText", "OLSKModalViewIsCapped"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKModalViewTitleText" in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ("OLSKModalViewIsCapped" in $$props) $$invalidate(1, OLSKModalViewIsCapped = $$props.OLSKModalViewIsCapped);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		OLSKModalViewTitleText,
    		OLSKModalViewIsCapped,
    		modPublic,
    		OLSKLocalized: main_1,
    		MicroModal,
    		mod,
    		afterUpdate,
    		OLSKStandardView: Main$h
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKModalViewTitleText" in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ("OLSKModalViewIsCapped" in $$props) $$invalidate(1, OLSKModalViewIsCapped = $$props.OLSKModalViewIsCapped);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKModalViewTitleText,
    		OLSKModalViewIsCapped,
    		mod,
    		$$slots,
    		modPublic,
    		slots,
    		$$scope
    	];
    }

    class Main$i extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			OLSKModalViewTitleText: 0,
    			OLSKModalViewIsCapped: 1,
    			modPublic: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKModalViewTitleText*/ ctx[0] === undefined && !("OLSKModalViewTitleText" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKModalViewTitleText'");
    		}
    	}

    	get OLSKModalViewTitleText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewTitleText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKModalViewIsCapped() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewIsCapped(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[4];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKWebView/main.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1$1 } = globals;
    const file$j = "node_modules/OLSKWebView/main.svelte";

    // (28:0) <OLSKModalView bind:this={ mod._OLSKModalView } OLSKModalViewTitleText={ OLSKModalViewTitleText }>
    function create_default_slot$3(ctx) {
    	let div;
    	let iframe;
    	let iframe_data_src_value;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			iframe = element("iframe");
    			attr_dev(iframe, "class", "OLSKWebViewFrame svelte-1dgazwi");

    			attr_dev(iframe, "data-src", iframe_data_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? /*OLSKWebViewURL*/ ctx[1]
    			: "");

    			if (iframe.src !== (iframe_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? ""
    			: /*OLSKWebViewURL*/ ctx[1])) attr_dev(iframe, "src", iframe_src_value);

    			attr_dev(iframe, "title", /*OLSKModalViewTitleText*/ ctx[0]);
    			attr_dev(iframe, "frameborder", "0");
    			add_location(iframe, file$j, 29, 2, 607);
    			attr_dev(div, "class", "OLSKWebView");
    			add_location(div, file$j, 28, 1, 579);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, iframe);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*DEBUG_OLSKWebViewDataSource, OLSKWebViewURL*/ 6 && iframe_data_src_value !== (iframe_data_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? /*OLSKWebViewURL*/ ctx[1]
    			: "")) {
    				attr_dev(iframe, "data-src", iframe_data_src_value);
    			}

    			if (dirty & /*DEBUG_OLSKWebViewDataSource, OLSKWebViewURL*/ 6 && iframe.src !== (iframe_src_value = /*DEBUG_OLSKWebViewDataSource*/ ctx[2]
    			? ""
    			: /*OLSKWebViewURL*/ ctx[1])) {
    				attr_dev(iframe, "src", iframe_src_value);
    			}

    			if (dirty & /*OLSKModalViewTitleText*/ 1) {
    				attr_dev(iframe, "title", /*OLSKModalViewTitleText*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(28:0) <OLSKModalView bind:this={ mod._OLSKModalView } OLSKModalViewTitleText={ OLSKModalViewTitleText }>",
    		ctx
    	});

    	return block;
    }

    // (33:1) 
    function create_OLSKStandardViewTail_slot$1(ctx) {
    	let div1;
    	let div0;
    	let a;
    	let t_value = main_1("OLSKWebViewWindowButtonText") + "";
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKWebViewWindowButton svelte-1dgazwi");
    			attr_dev(a, "href", /*OLSKWebViewURL*/ ctx[1]);
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$j, 34, 3, 961);
    			attr_dev(div0, "class", "OLSKToolbarElementGroup");
    			add_location(div0, file$j, 33, 2, 920);
    			attr_dev(div1, "class", "OLSKWebViewTail OLSKToolbar OLSKCommonEdgeTop svelte-1dgazwi");
    			attr_dev(div1, "slot", "OLSKStandardViewTail");
    			add_location(div1, file$j, 32, 1, 830);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, a);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKWebViewURL*/ 2) {
    				attr_dev(a, "href", /*OLSKWebViewURL*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKStandardViewTail_slot$1.name,
    		type: "slot",
    		source: "(33:1) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let olskmodalview;
    	let current;

    	let olskmodalview_props = {
    		OLSKModalViewTitleText: /*OLSKModalViewTitleText*/ ctx[0],
    		$$slots: {
    			OLSKStandardViewTail: [create_OLSKStandardViewTail_slot$1],
    			default: [create_default_slot$3]
    		},
    		$$scope: { ctx }
    	};

    	olskmodalview = new Main$i({
    			props: olskmodalview_props,
    			$$inline: true
    		});

    	/*olskmodalview_binding*/ ctx[5](olskmodalview);

    	const block = {
    		c: function create() {
    			create_component(olskmodalview.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskmodalview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const olskmodalview_changes = {};
    			if (dirty & /*OLSKModalViewTitleText*/ 1) olskmodalview_changes.OLSKModalViewTitleText = /*OLSKModalViewTitleText*/ ctx[0];

    			if (dirty & /*$$scope, OLSKWebViewURL, DEBUG_OLSKWebViewDataSource, OLSKModalViewTitleText*/ 71) {
    				olskmodalview_changes.$$scope = { dirty, ctx };
    			}

    			olskmodalview.$set(olskmodalview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskmodalview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskmodalview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*olskmodalview_binding*/ ctx[5](null);
    			destroy_component(olskmodalview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKModalViewTitleText } = $$props;
    	let { OLSKWebViewURL } = $$props;
    	let { DEBUG_OLSKWebViewDataSource = false } = $$props;
    	const modPublic = {};

    	const mod = {
    		_OLSKModalView: null,
    		// LIFECYCLE
    		LifecycleModuleDidMount() {
    			Object.assign(modPublic, mod._OLSKModalView.modPublic);
    		}
    	};

    	onMount(mod.LifecycleModuleDidMount);
    	const writable_props = ["OLSKModalViewTitleText", "OLSKWebViewURL", "DEBUG_OLSKWebViewDataSource"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function olskmodalview_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod._OLSKModalView = $$value;
    			$$invalidate(3, mod);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ("OLSKModalViewTitleText" in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ("OLSKWebViewURL" in $$props) $$invalidate(1, OLSKWebViewURL = $$props.OLSKWebViewURL);
    		if ("DEBUG_OLSKWebViewDataSource" in $$props) $$invalidate(2, DEBUG_OLSKWebViewDataSource = $$props.DEBUG_OLSKWebViewDataSource);
    	};

    	$$self.$capture_state = () => ({
    		OLSKModalViewTitleText,
    		OLSKWebViewURL,
    		DEBUG_OLSKWebViewDataSource,
    		modPublic,
    		OLSKLocalized: main_1,
    		mod,
    		onMount,
    		OLSKModalView: Main$i
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKModalViewTitleText" in $$props) $$invalidate(0, OLSKModalViewTitleText = $$props.OLSKModalViewTitleText);
    		if ("OLSKWebViewURL" in $$props) $$invalidate(1, OLSKWebViewURL = $$props.OLSKWebViewURL);
    		if ("DEBUG_OLSKWebViewDataSource" in $$props) $$invalidate(2, DEBUG_OLSKWebViewDataSource = $$props.DEBUG_OLSKWebViewDataSource);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		OLSKModalViewTitleText,
    		OLSKWebViewURL,
    		DEBUG_OLSKWebViewDataSource,
    		mod,
    		modPublic,
    		olskmodalview_binding
    	];
    }

    class Main$j extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			OLSKModalViewTitleText: 0,
    			OLSKWebViewURL: 1,
    			DEBUG_OLSKWebViewDataSource: 2,
    			modPublic: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*OLSKModalViewTitleText*/ ctx[0] === undefined && !("OLSKModalViewTitleText" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKModalViewTitleText'");
    		}

    		if (/*OLSKWebViewURL*/ ctx[1] === undefined && !("OLSKWebViewURL" in props)) {
    			console.warn("<Main> was created without expected prop 'OLSKWebViewURL'");
    		}
    	}

    	get OLSKModalViewTitleText() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKModalViewTitleText(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKWebViewURL() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKWebViewURL(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get DEBUG_OLSKWebViewDataSource() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set DEBUG_OLSKWebViewDataSource(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modPublic() {
    		return this.$$.ctx[4];
    	}

    	set modPublic(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/OLSKApropos/main.svelte generated by Svelte v3.38.2 */
    const file$k = "node_modules/OLSKApropos/main.svelte";

    // (25:0) {#if OLSKAproposFeedbackValue }
    function create_if_block_1$b(ctx) {
    	let a;
    	let t_value = main_1("OLSKAproposFeedbackButtonText") + "";
    	let t;

    	const block = {
    		c: function create() {
    			a = element("a");
    			t = text(t_value);
    			attr_dev(a, "class", "OLSKAproposFeedbackButton svelte-1koztnt");
    			attr_dev(a, "href", /*OLSKAproposFeedbackValue*/ ctx[0]);
    			add_location(a, file$k, 25, 1, 462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*OLSKAproposFeedbackValue*/ 1) {
    				attr_dev(a, "href", /*OLSKAproposFeedbackValue*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(25:0) {#if OLSKAproposFeedbackValue }",
    		ctx
    	});

    	return block;
    }

    // (29:0) {#if OLSKAproposShareData }
    function create_if_block$e(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1("OLSKAproposShareButtonText")}`;
    			attr_dev(button, "class", "OLSKAproposShareButton OLSKDecorButtonNoStyle OLSKDecorTappable svelte-1koztnt");
    			add_location(button, file$k, 29, 1, 624);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*mod*/ ctx[2].InterfaceShareButtonDidClick, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(29:0) {#if OLSKAproposShareData }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let div;
    	let t;
    	let if_block0 = /*OLSKAproposFeedbackValue*/ ctx[0] && create_if_block_1$b(ctx);
    	let if_block1 = /*OLSKAproposShareData*/ ctx[1] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "OLSKApropos svelte-1koztnt");
    			add_location(div, file$k, 22, 0, 402);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*OLSKAproposFeedbackValue*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$b(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*OLSKAproposShareData*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$e(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);
    	let { OLSKAproposFeedbackValue = null } = $$props;
    	let { OLSKAproposShareData = null } = $$props;

    	const mod = {
    		// INTERFACE
    		InterfaceShareButtonDidClick() {
    			if (main_1$1()) {
    				return window.alert(JSON.stringify(OLSKAproposShareData));
    			}

    			navigator.share(OLSKAproposShareData);
    		}
    	};

    	const writable_props = ["OLSKAproposFeedbackValue", "OLSKAproposShareData"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("OLSKAproposFeedbackValue" in $$props) $$invalidate(0, OLSKAproposFeedbackValue = $$props.OLSKAproposFeedbackValue);
    		if ("OLSKAproposShareData" in $$props) $$invalidate(1, OLSKAproposShareData = $$props.OLSKAproposShareData);
    	};

    	$$self.$capture_state = () => ({
    		OLSKAproposFeedbackValue,
    		OLSKAproposShareData,
    		OLSKLocalized: main_1,
    		OLSK_SPEC_UI: main_1$1,
    		mod
    	});

    	$$self.$inject_state = $$props => {
    		if ("OLSKAproposFeedbackValue" in $$props) $$invalidate(0, OLSKAproposFeedbackValue = $$props.OLSKAproposFeedbackValue);
    		if ("OLSKAproposShareData" in $$props) $$invalidate(1, OLSKAproposShareData = $$props.OLSKAproposShareData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [OLSKAproposFeedbackValue, OLSKAproposShareData, mod];
    }

    class Main$k extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
    			OLSKAproposFeedbackValue: 0,
    			OLSKAproposShareData: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get OLSKAproposFeedbackValue() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAproposFeedbackValue(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get OLSKAproposShareData() {
    		throw new Error("<Main>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set OLSKAproposShareData(value) {
    		throw new Error("<Main>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* os-app/open-compose/main.svelte generated by Svelte v3.38.2 */

    const { Object: Object_1$2 } = globals;
    const file$l = "os-app/open-compose/main.svelte";

    // (1062:1) 
    function create_OLSKNarrowToolbarTail_slot$1(ctx) {
    	let div1;
    	let button;
    	let div0;
    	let raw_value = OLSKUIAssets._OLSKSharedCreate + "";
    	let button_title_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			button = element("button");
    			div0 = element("div");
    			attr_dev(div0, "class", "LCHComposeCreateButtonImage");
    			add_location(div0, file$l, 1063, 3, 32881);
    			attr_dev(button, "class", "LCHComposeCreateButton OLSKDecorButtonNoStyle OLSKDecorTappable OLSKToolbarButton");
    			attr_dev(button, "title", button_title_value = main_1("LCHComposeCreateButtonText"));
    			attr_dev(button, "accesskey", "n");
    			add_location(button, file$l, 1062, 2, 32664);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			attr_dev(div1, "slot", "OLSKNarrowToolbarTail");
    			add_location(div1, file$l, 1061, 1, 32595);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, button);
    			append_dev(button, div0);
    			div0.innerHTML = raw_value;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[0].InterfaceCreateButtonDidClick)) /*mod*/ ctx[0].InterfaceCreateButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKNarrowToolbarTail_slot$1.name,
    		type: "slot",
    		source: "(1062:1) ",
    		ctx
    	});

    	return block;
    }

    // (1070:1) 
    function create_OLSKCollectionItem_slot$2(ctx) {
    	let div;
    	let lchcomposelistitem;
    	let current;

    	lchcomposelistitem = new Main$5({
    			props: {
    				LCHComposeListItem: /*OLSKCollectionItem*/ ctx[5]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(lchcomposelistitem.$$.fragment);
    			attr_dev(div, "slot", "OLSKCollectionItem");
    			add_location(div, file$l, 1069, 1, 33011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(lchcomposelistitem, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lchcomposelistitem_changes = {};
    			if (dirty & /*OLSKCollectionItem*/ 32) lchcomposelistitem_changes.LCHComposeListItem = /*OLSKCollectionItem*/ ctx[5];
    			lchcomposelistitem.$set(lchcomposelistitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lchcomposelistitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lchcomposelistitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(lchcomposelistitem);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCollectionItem_slot$2.name,
    		type: "slot",
    		source: "(1070:1) ",
    		ctx
    	});

    	return block;
    }

    // (1076:1) 
    function create_OLSKCatalogDetailContent_slot(ctx) {
    	let div;
    	let lchcomposedetail;
    	let current;

    	let lchcomposedetail_props = {
    		LCHComposeDetailItem: /*OLSKCatalogItemSelected*/ ctx[6],
    		LCHComposeDetailDispatchBack: /*mod*/ ctx[0].LCHComposeDetailDispatchBack,
    		LCHComposeDetailDispatchClone: /*mod*/ ctx[0].LCHComposeDetailDispatchClone,
    		LCHComposeDetailDispatchDiscard: /*mod*/ ctx[0].LCHComposeDetailDispatchDiscard,
    		LCHComposeDetailDispatchUpdate: /*mod*/ ctx[0].LCHComposeDetailDispatchUpdate
    	};

    	lchcomposedetail = new Main$7({
    			props: lchcomposedetail_props,
    			$$inline: true
    		});

    	/*lchcomposedetail_binding*/ ctx[1](lchcomposedetail);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(lchcomposedetail.$$.fragment);
    			attr_dev(div, "class", "LCHComposeDetailContainer");
    			attr_dev(div, "slot", "OLSKCatalogDetailContent");
    			add_location(div, file$l, 1075, 1, 33139);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(lchcomposedetail, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const lchcomposedetail_changes = {};
    			if (dirty & /*OLSKCatalogItemSelected*/ 64) lchcomposedetail_changes.LCHComposeDetailItem = /*OLSKCatalogItemSelected*/ ctx[6];
    			if (dirty & /*mod*/ 1) lchcomposedetail_changes.LCHComposeDetailDispatchBack = /*mod*/ ctx[0].LCHComposeDetailDispatchBack;
    			if (dirty & /*mod*/ 1) lchcomposedetail_changes.LCHComposeDetailDispatchClone = /*mod*/ ctx[0].LCHComposeDetailDispatchClone;
    			if (dirty & /*mod*/ 1) lchcomposedetail_changes.LCHComposeDetailDispatchDiscard = /*mod*/ ctx[0].LCHComposeDetailDispatchDiscard;
    			if (dirty & /*mod*/ 1) lchcomposedetail_changes.LCHComposeDetailDispatchUpdate = /*mod*/ ctx[0].LCHComposeDetailDispatchUpdate;
    			lchcomposedetail.$set(lchcomposedetail_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lchcomposedetail.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lchcomposedetail.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*lchcomposedetail_binding*/ ctx[1](null);
    			destroy_component(lchcomposedetail);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_OLSKCatalogDetailContent_slot.name,
    		type: "slot",
    		source: "(1076:1) ",
    		ctx
    	});

    	return block;
    }

    // (1108:3) {#if !mod._ValueToolsPairIsVisible}
    function create_if_block_7$1(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = `${main_1("LCHComposeToolsPairButtonText")}`;
    			attr_dev(button, "class", "LCHComposeToolsPairButton svelte-rnrwg5");
    			add_location(button, file$l, 1108, 4, 34406);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*mod*/ ctx[0].InterfaceToolsPairButtonDidClick)) /*mod*/ ctx[0].InterfaceToolsPairButtonDidClick.apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(1108:3) {#if !mod._ValueToolsPairIsVisible}",
    		ctx
    	});

    	return block;
    }

    // (1112:3) {#if mod._ValueToolsPairIsVisible}
    function create_if_block_4$2(ctx) {
    	let t0;
    	let t1;
    	let lchcomposepair;
    	let current;
    	let if_block0 = /*mod*/ ctx[0]._ValuePairStatus === "kStatusWaiting" && create_if_block_6$2(ctx);
    	let if_block1 = /*mod*/ ctx[0]._ValuePairStatus === "kStatusFailed" && create_if_block_5$2(ctx);

    	lchcomposepair = new Main$9({
    			props: {
    				LCHComposePairClearIsVisible: !!/*mod*/ ctx[0]._ValuePublicKey,
    				LCHComposePairDispatchSubmit: /*mod*/ ctx[0].LCHComposePairDispatchSubmit,
    				LCHComposePairDispatchClear: /*mod*/ ctx[0].LCHComposePairDispatchClear
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			create_component(lchcomposepair.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(lchcomposepair, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*mod*/ ctx[0]._ValuePairStatus === "kStatusWaiting") {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_6$2(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[0]._ValuePairStatus === "kStatusFailed") {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_5$2(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const lchcomposepair_changes = {};
    			if (dirty & /*mod*/ 1) lchcomposepair_changes.LCHComposePairClearIsVisible = !!/*mod*/ ctx[0]._ValuePublicKey;
    			if (dirty & /*mod*/ 1) lchcomposepair_changes.LCHComposePairDispatchSubmit = /*mod*/ ctx[0].LCHComposePairDispatchSubmit;
    			if (dirty & /*mod*/ 1) lchcomposepair_changes.LCHComposePairDispatchClear = /*mod*/ ctx[0].LCHComposePairDispatchClear;
    			lchcomposepair.$set(lchcomposepair_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(lchcomposepair.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(lchcomposepair.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(lchcomposepair, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(1112:3) {#if mod._ValueToolsPairIsVisible}",
    		ctx
    	});

    	return block;
    }

    // (1113:4) {#if mod._ValuePairStatus === 'kStatusWaiting' }
    function create_if_block_6$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = `${main_1("LCHComposeToolsPairStatusWaitingText")}`;
    			attr_dev(span, "class", "LCHComposeToolsPairStatusWaiting svelte-rnrwg5");
    			add_location(span, file$l, 1113, 5, 34664);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(1113:4) {#if mod._ValuePairStatus === 'kStatusWaiting' }",
    		ctx
    	});

    	return block;
    }

    // (1117:4) {#if mod._ValuePairStatus === 'kStatusFailed' }
    function create_if_block_5$2(ctx) {
    	let span0;
    	let t1;
    	let span1;
    	let t2_value = /*mod*/ ctx[0]._ValueToolsPairStatusFailedError + "";
    	let t2;

    	const block = {
    		c: function create() {
    			span0 = element("span");
    			span0.textContent = `${main_1("LCHComposeToolsPairStatusFailedText")}`;
    			t1 = space();
    			span1 = element("span");
    			t2 = text(t2_value);
    			attr_dev(span0, "class", "LCHComposeToolsPairStatusFailed svelte-rnrwg5");
    			add_location(span0, file$l, 1117, 5, 34844);
    			attr_dev(span1, "class", "LCHComposeToolsPairStatusFailedError svelte-rnrwg5");
    			add_location(span1, file$l, 1118, 5, 34959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, span1, anchor);
    			append_dev(span1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mod*/ 1 && t2_value !== (t2_value = /*mod*/ ctx[0]._ValueToolsPairStatusFailedError + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(span1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(1117:4) {#if mod._ValuePairStatus === 'kStatusFailed' }",
    		ctx
    	});

    	return block;
    }

    // (1131:1) {#if !mod._ValueCloudToolbarHidden }
    function create_if_block_3$4(ctx) {
    	let div3;
    	let div1;
    	let div0;
    	let t;
    	let div2;
    	let olskcloud;
    	let current;

    	olskcloud = new Main$f({
    			props: {
    				OLSKCloudErrorText: /*mod*/ ctx[0]._ValueCloudErrorText,
    				OLSKCloudDispatchRenew: /*mod*/ ctx[0].OLSKCloudDispatchRenew,
    				OLSKCloudFormDispatchSubmit: /*mod*/ ctx[0].OLSKCloudFormDispatchSubmit,
    				OLSKCloudStatusIdentityText: /*mod*/ ctx[0]._ValueCloudIdentity,
    				OLSKCloudStatusIsSyncing: /*mod*/ ctx[0]._ValueIsSyncing,
    				OLSKCloudStatusDispatchSyncStart: /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStart,
    				OLSKCloudStatusDispatchSyncStop: /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStop,
    				OLSKCloudStatusDispatchDisconnect: /*mod*/ ctx[0].OLSKCloudStatusDispatchDisconnect
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			div2 = element("div");
    			create_component(olskcloud.$$.fragment);
    			add_location(div0, file$l, 1133, 4, 35502);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup");
    			add_location(div1, file$l, 1132, 3, 35460);
    			attr_dev(div2, "class", "OLSKToolbarElementGroup");
    			add_location(div2, file$l, 1136, 3, 35528);
    			attr_dev(div3, "class", "LCHComposeCloudToolbar OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeTop svelte-rnrwg5");
    			add_location(div3, file$l, 1131, 2, 35371);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, div0);
    			append_dev(div3, t);
    			append_dev(div3, div2);
    			mount_component(olskcloud, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskcloud_changes = {};
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudErrorText = /*mod*/ ctx[0]._ValueCloudErrorText;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudDispatchRenew = /*mod*/ ctx[0].OLSKCloudDispatchRenew;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudFormDispatchSubmit = /*mod*/ ctx[0].OLSKCloudFormDispatchSubmit;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusIdentityText = /*mod*/ ctx[0]._ValueCloudIdentity;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusIsSyncing = /*mod*/ ctx[0]._ValueIsSyncing;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchSyncStart = /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStart;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchSyncStop = /*mod*/ ctx[0].OLSKCloudStatusDispatchSyncStop;
    			if (dirty & /*mod*/ 1) olskcloud_changes.OLSKCloudStatusDispatchDisconnect = /*mod*/ ctx[0].OLSKCloudStatusDispatchDisconnect;
    			olskcloud.$set(olskcloud_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcloud.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcloud.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(olskcloud);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(1131:1) {#if !mod._ValueCloudToolbarHidden }",
    		ctx
    	});

    	return block;
    }

    // (1166:1) {#if !OLSK_SPEC_UI()}
    function create_if_block_2$7(ctx) {
    	let olskserviceworkerview;
    	let current;

    	olskserviceworkerview = new Main$c({
    			props: {
    				OLSKServiceWorkerRegistrationRoute: window.OLSKCanonical("LCHServiceWorkerRoute")
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskserviceworkerview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskserviceworkerview, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskserviceworkerview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskserviceworkerview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskserviceworkerview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(1166:1) {#if !OLSK_SPEC_UI()}",
    		ctx
    	});

    	return block;
    }

    // (1171:0) {#if !!mod._ValueCloudIdentity }
    function create_if_block_1$c(ctx) {
    	let olskwebview;
    	let current;

    	let olskwebview_props = {
    		OLSKModalViewTitleText: main_1("OLSKFundWebViewTitleText"),
    		OLSKWebViewURL: /*mod*/ ctx[0]._ValueFundURL,
    		DEBUG_OLSKWebViewDataSource: main_1$1()
    	};

    	olskwebview = new Main$j({ props: olskwebview_props, $$inline: true });
    	/*olskwebview_binding*/ ctx[3](olskwebview);

    	const block = {
    		c: function create() {
    			create_component(olskwebview.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskwebview, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskwebview_changes = {};
    			if (dirty & /*mod*/ 1) olskwebview_changes.OLSKWebViewURL = /*mod*/ ctx[0]._ValueFundURL;
    			olskwebview.$set(olskwebview_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskwebview.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskwebview.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			/*olskwebview_binding*/ ctx[3](null);
    			destroy_component(olskwebview, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(1171:0) {#if !!mod._ValueCloudIdentity }",
    		ctx
    	});

    	return block;
    }

    // (1175:0) <OLSKModalView OLSKModalViewTitleText={ OLSKLocalized('OLSKAproposHeadingText') } bind:this={ mod._OLSKModalView } OLSKModalViewIsCapped={ true }>
    function create_default_slot$4(ctx) {
    	let olskapropos;
    	let current;

    	olskapropos = new Main$k({
    			props: {
    				OLSKAproposFeedbackValue: `javascript:window.location.href = window.atob('${window.btoa(OLSKString.OLSKStringFormatted(window.atob("bWFpbHRvOmErJUBAcmNyZWF0aXYuY29t"), "RP_001" + (/*mod*/ ctx[0]._ValueFundClue
				? "+" + /*mod*/ ctx[0]._ValueFundClue
				: "")))}')`
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(olskapropos.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskapropos, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const olskapropos_changes = {};

    			if (dirty & /*mod*/ 1) olskapropos_changes.OLSKAproposFeedbackValue = `javascript:window.location.href = window.atob('${window.btoa(OLSKString.OLSKStringFormatted(window.atob("bWFpbHRvOmErJUBAcmNyZWF0aXYuY29t"), "RP_001" + (/*mod*/ ctx[0]._ValueFundClue
			? "+" + /*mod*/ ctx[0]._ValueFundClue
			: "")))}')`;

    			olskapropos.$set(olskapropos_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskapropos.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskapropos.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskapropos, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(1175:0) <OLSKModalView OLSKModalViewTitleText={ OLSKLocalized('OLSKAproposHeadingText') } bind:this={ mod._OLSKModalView } OLSKModalViewIsCapped={ true }>",
    		ctx
    	});

    	return block;
    }

    // (1183:0) {#if mod._IsRunningDemo }
    function create_if_block$f(ctx) {
    	let olskpointer;
    	let current;
    	olskpointer = new Main$g({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(olskpointer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(olskpointer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskpointer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskpointer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(olskpointer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(1183:0) {#if mod._IsRunningDemo }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div3;
    	let div0;
    	let olskcatalog;
    	let t0;
    	let footer1;
    	let footer0;
    	let div1;
    	let lchcomposebuild;
    	let t1;
    	let div2;
    	let t2;
    	let t3;
    	let t4;
    	let olskapptoolbar;
    	let t5;
    	let show_if = !main_1$1();
    	let t6;
    	let t7;
    	let olskmodalview;
    	let t8;
    	let if_block5_anchor;
    	let current;

    	let olskcatalog_props = {
    		OLSKCollectionItemAccessibilitySummaryFunction: /*mod*/ ctx[0].OLSKCollectionItemAccessibilitySummaryFunction,
    		OLSKCollectionItemClass: "OLSKCommonEdgeBottom",
    		OLSKCatalogSortFunction: mod$4.LCHComposeSortFunction,
    		OLSKCatalogIsMatch: mod$4.LCHComposeIsMatch,
    		OLSKCatalogExactSortFunction: mod$4.LCHComposeExactSortFunction,
    		_OLSKCatalogDispatchKey: /*mod*/ ctx[0]._OLSKCatalogDispatchKey,
    		OLSKCollectionDispatchClick: /*mod*/ ctx[0].OLSKCollectionDispatchClick,
    		OLSKCollectionDispatchArrow: /*mod*/ ctx[0].OLSKCollectionDispatchArrow,
    		OLSKCatalogDispatchDetailActivate: /*mod*/ ctx[0].OLSKCatalogDispatchDetailActivate,
    		OLSKCatalogDispatchMasterShouldActivate: /*mod*/ ctx[0].OLSKCatalogDispatchMasterShouldActivate,
    		OLSKCatalogDispatchQuantity: /*mod*/ ctx[0].OLSKCatalogDispatchQuantity,
    		$$slots: {
    			OLSKCatalogDetailContent: [
    				create_OLSKCatalogDetailContent_slot,
    				({ OLSKCatalogItemSelected, OLSKCollectionItem }) => ({
    					6: OLSKCatalogItemSelected,
    					5: OLSKCollectionItem
    				}),
    				({ OLSKCatalogItemSelected, OLSKCollectionItem }) => (OLSKCatalogItemSelected ? 64 : 0) | (OLSKCollectionItem ? 32 : 0)
    			],
    			OLSKCollectionItem: [
    				create_OLSKCollectionItem_slot$2,
    				({ OLSKCollectionItem }) => ({ 5: OLSKCollectionItem }),
    				({ OLSKCollectionItem }) => OLSKCollectionItem ? 32 : 0
    			],
    			OLSKNarrowToolbarTail: [
    				create_OLSKNarrowToolbarTail_slot$1,
    				({ OLSKCollectionItem }) => ({ 5: OLSKCollectionItem }),
    				({ OLSKCollectionItem }) => OLSKCollectionItem ? 32 : 0
    			]
    		},
    		$$scope: { ctx }
    	};

    	olskcatalog = new Main$4({ props: olskcatalog_props, $$inline: true });
    	/*olskcatalog_binding*/ ctx[2](olskcatalog);

    	lchcomposebuild = new Main$8({
    			props: {
    				LCHComposeBuildRunLink: /*mod*/ ctx[0]._JavascriptCompositionBinary,
    				LCHComposeBuildPipeModeEnabled: /*mod*/ ctx[0]._ValuePipeModeEnabled,
    				LCHComposeBuildPageRecipesEnabled: /*mod*/ ctx[0]._ValuePageRecipesEnabled,
    				LCHComposeBuildDispatchRun: /*mod*/ ctx[0].LCHComposeBuildDispatchRun,
    				LCHComposeBuildDispatchPipeModeEnabled: /*mod*/ ctx[0].LCHComposeBuildDispatchPipeModeEnabled,
    				LCHComposeBuildDispatchPageRecipesEnabled: /*mod*/ ctx[0].LCHComposeBuildDispatchPageRecipesEnabled
    			},
    			$$inline: true
    		});

    	let if_block0 = !/*mod*/ ctx[0]._ValueToolsPairIsVisible && create_if_block_7$1(ctx);
    	let if_block1 = /*mod*/ ctx[0]._ValueToolsPairIsVisible && create_if_block_4$2(ctx);
    	let if_block2 = !/*mod*/ ctx[0]._ValueCloudToolbarHidden && create_if_block_3$4(ctx);

    	olskapptoolbar = new Main$b({
    			props: {
    				OLSKAppToolbarDispatchApropos: /*mod*/ ctx[0].OLSKAppToolbarDispatchApropos,
    				OLSKAppToolbarDispatchTongue: /*mod*/ ctx[0].OLSKAppToolbarDispatchTongue,
    				OLSKAppToolbarGuideURL: window.OLSKCanonical("LCHGuideRoute"),
    				OLSKAppToolbarFundShowProgress: /*mod*/ ctx[0]._ValueOLSKFundProgress,
    				OLSKAppToolbarFundLimitText: /*mod*/ ctx[0]._ValueDocumentRemainder,
    				OLSKAppToolbarCloudConnected: !!/*mod*/ ctx[0]._ValueCloudIdentity,
    				OLSKAppToolbarCloudOffline: /*mod*/ ctx[0]._ValueCloudIsOffline,
    				OLSKAppToolbarCloudError: !!/*mod*/ ctx[0]._ValueCloudErrorText,
    				OLSKAppToolbarDispatchFund: /*mod*/ ctx[0]._ValueOLSKFundGrant || main$9.OLSKFundResponseIsPresent()
    				? null
    				: /*mod*/ ctx[0].OLSKAppToolbarDispatchFund,
    				OLSKAppToolbarDispatchCloud: /*mod*/ ctx[0].OLSKAppToolbarDispatchCloud,
    				OLSKAppToolbarDispatchLauncher: /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher
    			},
    			$$inline: true
    		});

    	let if_block3 = show_if && create_if_block_2$7(ctx);
    	let if_block4 = !!/*mod*/ ctx[0]._ValueCloudIdentity && create_if_block_1$c(ctx);

    	let olskmodalview_props = {
    		OLSKModalViewTitleText: main_1("OLSKAproposHeadingText"),
    		OLSKModalViewIsCapped: true,
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	olskmodalview = new Main$i({
    			props: olskmodalview_props,
    			$$inline: true
    		});

    	/*olskmodalview_binding*/ ctx[4](olskmodalview);
    	let if_block5 = /*mod*/ ctx[0]._IsRunningDemo && create_if_block$f(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			create_component(olskcatalog.$$.fragment);
    			t0 = space();
    			footer1 = element("footer");
    			footer0 = element("footer");
    			div1 = element("div");
    			create_component(lchcomposebuild.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			create_component(olskapptoolbar.$$.fragment);
    			t5 = space();
    			if (if_block3) if_block3.c();
    			t6 = space();
    			if (if_block4) if_block4.c();
    			t7 = space();
    			create_component(olskmodalview.$$.fragment);
    			t8 = space();
    			if (if_block5) if_block5.c();
    			if_block5_anchor = empty();
    			attr_dev(div0, "class", "OLSKViewportContent");
    			add_location(div0, file$l, 1036, 0, 31686);
    			attr_dev(div1, "class", "OLSKToolbarElementGroup svelte-rnrwg5");
    			add_location(div1, file$l, 1095, 2, 33828);
    			attr_dev(div2, "class", "svelte-rnrwg5");
    			add_location(div2, file$l, 1106, 2, 34357);
    			attr_dev(footer0, "class", "LCHComposeTools OLSKToolbar OLSKToolbarJustify OLSKCommonEdgeTop svelte-rnrwg5");
    			add_location(footer0, file$l, 1094, 1, 33744);
    			attr_dev(footer1, "class", "LCHComposeViewportFooter OLSKMobileViewFooter");
    			add_location(footer1, file$l, 1092, 0, 33679);
    			attr_dev(div3, "class", "LCHCompose OLSKViewport svelte-rnrwg5");
    			toggle_class(div3, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			add_location(div3, file$l, 1034, 0, 31603);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			mount_component(olskcatalog, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, footer1);
    			append_dev(footer1, footer0);
    			append_dev(footer0, div1);
    			mount_component(lchcomposebuild, div1, null);
    			append_dev(footer0, t1);
    			append_dev(footer0, div2);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t2);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(footer1, t3);
    			if (if_block2) if_block2.m(footer1, null);
    			append_dev(footer1, t4);
    			mount_component(olskapptoolbar, footer1, null);
    			append_dev(footer1, t5);
    			if (if_block3) if_block3.m(footer1, null);
    			append_dev(div3, t6);
    			if (if_block4) if_block4.m(div3, null);
    			append_dev(div3, t7);
    			mount_component(olskmodalview, div3, null);
    			insert_dev(target, t8, anchor);
    			if (if_block5) if_block5.m(target, anchor);
    			insert_dev(target, if_block5_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const olskcatalog_changes = {};
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCollectionItemAccessibilitySummaryFunction = /*mod*/ ctx[0].OLSKCollectionItemAccessibilitySummaryFunction;
    			if (dirty & /*mod*/ 1) olskcatalog_changes._OLSKCatalogDispatchKey = /*mod*/ ctx[0]._OLSKCatalogDispatchKey;
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCollectionDispatchClick = /*mod*/ ctx[0].OLSKCollectionDispatchClick;
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCollectionDispatchArrow = /*mod*/ ctx[0].OLSKCollectionDispatchArrow;
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCatalogDispatchDetailActivate = /*mod*/ ctx[0].OLSKCatalogDispatchDetailActivate;
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCatalogDispatchMasterShouldActivate = /*mod*/ ctx[0].OLSKCatalogDispatchMasterShouldActivate;
    			if (dirty & /*mod*/ 1) olskcatalog_changes.OLSKCatalogDispatchQuantity = /*mod*/ ctx[0].OLSKCatalogDispatchQuantity;

    			if (dirty & /*$$scope, OLSKCatalogItemSelected, mod, OLSKCollectionItem*/ 225) {
    				olskcatalog_changes.$$scope = { dirty, ctx };
    			}

    			olskcatalog.$set(olskcatalog_changes);
    			const lchcomposebuild_changes = {};
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildRunLink = /*mod*/ ctx[0]._JavascriptCompositionBinary;
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildPipeModeEnabled = /*mod*/ ctx[0]._ValuePipeModeEnabled;
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildPageRecipesEnabled = /*mod*/ ctx[0]._ValuePageRecipesEnabled;
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildDispatchRun = /*mod*/ ctx[0].LCHComposeBuildDispatchRun;
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildDispatchPipeModeEnabled = /*mod*/ ctx[0].LCHComposeBuildDispatchPipeModeEnabled;
    			if (dirty & /*mod*/ 1) lchcomposebuild_changes.LCHComposeBuildDispatchPageRecipesEnabled = /*mod*/ ctx[0].LCHComposeBuildDispatchPageRecipesEnabled;
    			lchcomposebuild.$set(lchcomposebuild_changes);

    			if (!/*mod*/ ctx[0]._ValueToolsPairIsVisible) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7$1(ctx);
    					if_block0.c();
    					if_block0.m(div2, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*mod*/ ctx[0]._ValueToolsPairIsVisible) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!/*mod*/ ctx[0]._ValueCloudToolbarHidden) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_3$4(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(footer1, t4);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			const olskapptoolbar_changes = {};
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchApropos = /*mod*/ ctx[0].OLSKAppToolbarDispatchApropos;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchTongue = /*mod*/ ctx[0].OLSKAppToolbarDispatchTongue;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarFundShowProgress = /*mod*/ ctx[0]._ValueOLSKFundProgress;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarFundLimitText = /*mod*/ ctx[0]._ValueDocumentRemainder;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudConnected = !!/*mod*/ ctx[0]._ValueCloudIdentity;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudOffline = /*mod*/ ctx[0]._ValueCloudIsOffline;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarCloudError = !!/*mod*/ ctx[0]._ValueCloudErrorText;

    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchFund = /*mod*/ ctx[0]._ValueOLSKFundGrant || main$9.OLSKFundResponseIsPresent()
    			? null
    			: /*mod*/ ctx[0].OLSKAppToolbarDispatchFund;

    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchCloud = /*mod*/ ctx[0].OLSKAppToolbarDispatchCloud;
    			if (dirty & /*mod*/ 1) olskapptoolbar_changes.OLSKAppToolbarDispatchLauncher = /*mod*/ ctx[0].OLSKAppToolbarDispatchLauncher;
    			olskapptoolbar.$set(olskapptoolbar_changes);
    			if (show_if) if_block3.p(ctx, dirty);

    			if (!!/*mod*/ ctx[0]._ValueCloudIdentity) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_1$c(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div3, t7);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			const olskmodalview_changes = {};

    			if (dirty & /*$$scope, mod*/ 129) {
    				olskmodalview_changes.$$scope = { dirty, ctx };
    			}

    			olskmodalview.$set(olskmodalview_changes);

    			if (dirty & /*mod*/ 1) {
    				toggle_class(div3, "OLSKIsLoading", /*mod*/ ctx[0]._ValueIsLoading);
    			}

    			if (/*mod*/ ctx[0]._IsRunningDemo) {
    				if (if_block5) {
    					if (dirty & /*mod*/ 1) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block$f(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(olskcatalog.$$.fragment, local);
    			transition_in(lchcomposebuild.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(olskapptoolbar.$$.fragment, local);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(olskmodalview.$$.fragment, local);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(olskcatalog.$$.fragment, local);
    			transition_out(lchcomposebuild.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(olskapptoolbar.$$.fragment, local);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(olskmodalview.$$.fragment, local);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			/*olskcatalog_binding*/ ctx[2](null);
    			destroy_component(olskcatalog);
    			destroy_component(lchcomposebuild);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			destroy_component(olskapptoolbar);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			/*olskmodalview_binding*/ ctx[4](null);
    			destroy_component(olskmodalview);
    			if (detaching) detach_dev(t8);
    			if (if_block5) if_block5.d(detaching);
    			if (detaching) detach_dev(if_block5_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Main", slots, []);

    	const mod$1 = {
    		// VALUE
    		_ValueIsLoading: true,
    		_JavascriptComposition: "",
    		_JavascriptCompositionBinary: "",
    		_ValueRecipesArrayString: "",
    		_ValueCloudToolbarHidden: true,
    		_ValuePersistThrottleMap: {},
    		_ValuePipeModeEnabled: false,
    		_ValueToolsPairIsVisible: undefined,
    		_ValuePublicKey: null,
    		ValuePublicKeySet(inputData) {
    			$$invalidate(0, mod$1._ValuePublicKey = inputData, mod$1);
    			$$invalidate(0, mod$1._ValueToolsPairIsVisible = !!inputData, mod$1);
    		},
    		_ValuePairStatus: "kStatusWaiting",
    		_ValueToolsPairStatusFailedError: "",
    		_IsRunningDemo: false,
    		// DATA
    		DataIsMobile() {
    			return window.innerWidth <= 760;
    		},
    		DataPackageStyle() {
    			return [window.LCHComposeBuildPackageStyle.textContent].map(mod$9.LCHBuildStripSourceMap).pop();
    		},
    		DataPackageScript() {
    			return [window.LCHComposeBuildPackageScript.textContent].map(mod$9.LCHBuildStripSourceMap).pop();
    		},
    		DataPackageOptions() {
    			return {
    				LCHOptionLanguage: window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage"),
    				LCHOptionMode: mod$1._ValuePipeModeEnabled
    				? mod$8.LCHLauncherModePipe()
    				: mod$8.LCHLauncherModeCommit(),
    				LCHOptionIncludePageRecipes: mod$1._ValuePageRecipesEnabled
    			};
    		},
    		_LCH_DISABLE_ENCRYPTION() {
    			return false;
    		},
    		DataDocumentObjectTemplate(inputData = "") {
    			return {
    				LCHDocumentName: inputData,
    				LCHDocumentInputTypes: "",
    				LCHDocumentCallbackArgs: "",
    				LCHDocumentCallbackBody: "",
    				LCHDocumentOutputType: "",
    				LCHDocumentCanonicalExampleCallbackBody: "",
    				LCHDocumentSignature: "",
    				LCHDocumentURLFilter: "",
    				LCHDocumentStyle: ""
    			};
    		},
    		DataNavigator() {
    			return navigator.serviceWorker
    			? navigator
    			: { serviceWorker: {} };
    		},
    		DataIsEligible(inputData = {}) {
    			return main$9.OLSKFundIsEligible(Object.assign(
    				{
    					ParamMinimumTier: 1,
    					ParamCurrentProject: "RP_001",
    					ParamBundleProjects: ["FakeBundleProject"],
    					ParamGrantTier: main$9.OLSKFundTier("0:10 10,100 50,500 250", mod$1._ValueOLSKFundGrant),
    					ParamGrantProject: mod$1._ValueOLSKFundGrant
    					? mod$1._ValueOLSKFundGrant.OLSKPactGrantProject
    					: ""
    				},
    				inputData
    			));
    		},
    		DataComposeRecipes() {
    			const items = [];

    			if (mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()) {
    				items.push({
    					LCHRecipeSignature: "LCHComposeLauncherItemClone",
    					LCHRecipeName: main_1("LCHComposeLauncherItemCloneText"),
    					LCHRecipeCallback() {
    						mod$1.ControlDocumentClone(mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    					}
    				});
    			}

    			if (main_1$1()) {
    				items.push(...[
    					{
    						LCHRecipeName: "FakeZDRSchemaDispatchSyncCreateDocument",
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncCreateDocument() {
    							return mod$1.ZDRSchemaDispatchSyncCreateDocument(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentCreate(mod$1.DataDocumentObjectTemplate("FakeZDRSchemaDispatchSyncCreateDocument")));
    						}
    					},
    					{
    						LCHRecipeName: "FakeZDRSchemaDispatchSyncUpdateDocument",
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncUpdateDocument() {
    							return mod$1.ZDRSchemaDispatchSyncUpdateDocument(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentUpdate(Object.assign(
    								mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    									return e.LCHDocumentName.match("FakeZDRSchemaDispatchSync");
    								}).pop(),
    								{
    									LCHDocumentName: "FakeZDRSchemaDispatchSyncUpdateDocument"
    								}
    							)));
    						}
    					},
    					{
    						LCHRecipeName: "FakeZDRSchemaDispatchSyncDeleteDocument",
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncDeleteDocument() {
    							return mod$1.ZDRSchemaDispatchSyncDeleteDocument(await mod$1._ValueZDRWrap.App.LCHDocument.ZDRModelDeleteObject(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    								return e.LCHDocumentName.match("FakeZDRSchemaDispatchSync");
    							}).pop()));
    						}
    					},
    					{
    						LCHRecipeName: "FakeZDRSchemaDispatchSyncConflictDocument",
    						LCHRecipeCallback: async function FakeZDRSchemaDispatchSyncConflictDocument() {
    							const item = mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().filter(function (e) {
    								return e.LCHDocumentName.match("FakeZDRSchemaDispatchSyncConflictDocument");
    							}).pop();

    							return mod$1.ZDRSchemaDispatchSyncConflictDocument({
    								origin: "conflict",
    								oldValue: JSON.parse(JSON.stringify(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentUpdate(Object.assign({}, item, {
    									LCHDocumentName: item.LCHDocumentName + "-local"
    								})))),
    								newValue: JSON.parse(JSON.stringify(Object.assign(Object.assign({}, item), {
    									LCHDocumentName: item.LCHDocumentName + "-remote"
    								})))
    							});
    						}
    					},
    					{
    						LCHRecipeName: "FakeEscapeWithoutSort",
    						LCHRecipeCallback: function FakeEscapeWithoutSort() {
    							mod$1.ControlDocumentActivate(null);
    						}
    					},
    					{
    						LCHRecipeName: "FakeFundDocumentLimit",
    						LCHRecipeCallback: async function FakeFundDocumentLimit() {
    							await Promise.all(Array.from(Array(mod$1._ValueDocumentRemainder)).map(function (e) {
    								return mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentCreate(mod$1.DataDocumentObjectTemplate());
    							}));

    							return mod$1.SetupCatalog();
    						}
    					}
    				]);
    			}

    			items.push(...main$d.ZDRRecipes({
    				ParamMod: mod$1,
    				ParamSpecUI: main_1$1()
    			}));

    			items.push(...main$c.OLSKTransportRecipes({
    				OLSKLocalized: main_1,
    				OLSKTransportDispatchImportJSON: mod$1.OLSKTransportDispatchImportJSON,
    				OLSKTransportDispatchExportInput: mod$1.OLSKTransportDispatchExportInput,
    				ParamSpecUI: main_1$1()
    			}));

    			if (mod$1._ValueZDRWrap.ZDRStorageProtocol === main$d.ZDRProtocolRemoteStorage()) {
    				items.push(...main$2.OLSKRemoteStorageRecipes({
    					ParamStorage: mod$1._ValueZDRWrap.ZDRStorageClient(),
    					OLSKLocalized: main_1,
    					ParamMod: mod$1,
    					ParamSpecUI: main_1$1()
    				}));
    			}

    			items.push(...main_1$2.OLSKServiceWorkerRecipes(window, mod$1.DataNavigator(), main_1, main_1$1()));

    			items.push(...main$9.OLSKFundRecipes({
    				OLSKLocalized: main_1,
    				ParamConnected: !!mod$1._ValueCloudIdentity,
    				ParamAuthorized: !!mod$1._ValueFundClue,
    				OLSKFundDispatchGrant: mod$1.OLSKFundDispatchGrant,
    				OLSKFundDispatchPersist: mod$1.OLSKFundDispatchPersist,
    				ParamMod: mod$1,
    				ParamSpecUI: main_1$1()
    			}));

    			return items;
    		},
    		// INTERFACE
    		InterfaceCreateButtonDidClick() {
    			mod$1.ControlDocumentCreate();
    		},
    		InterfaceToolsPairButtonDidClick() {
    			$$invalidate(0, mod$1._ValueToolsPairIsVisible = !mod$1._ValueToolsPairIsVisible, mod$1);
    		},
    		// CONTROL
    		ControlDocumentPersist(inputData) {
    			main$1.OLSKThrottleMappedTimeout(mod$1._ValuePersistThrottleMap, inputData.LCHDocumentID, {
    				OLSKThrottleDuration: 500,
    				async OLSKThrottleCallback() {
    					mod$1._ControlDocumentFlag(inputData);

    					if (inputData.LCHDocumentCallbackBody === "LCH_TEST_FLAG_ON_BUILD") {
    						Object.assign(inputData, {
    							LCHDocumentCallbackBody: "eval(\"console.log('hello')\")"
    						});
    					}

    					await mod$1._ControlDocumentSave(inputData);
    					mod$1.ReactDocuments(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll());
    				}
    			});

    			if (main_1$1()) {
    				main$1.OLSKThrottleSkip(mod$1._ValuePersistThrottleMap[inputData.LCHDocumentID]);
    			}
    		},
    		async _ControlDocumentSave(inputData) {
    			await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentUpdate(inputData);
    		},
    		_ControlDocumentFlag(inputData) {
    			Object.assign(inputData, { LCHDocumentSyntaxErrorMessage: "" });

    			try {
    				inputData.LCHDocumentIsFlagged = !!mod$5.LCHFlags(mod.LCHFormulaToEvaluate(mod.LCHFormulaFrom(inputData)));
    			} catch(e) {
    				if (!e.name.match("SyntaxError")) {
    					throw e;
    				}

    				inputData.LCHDocumentIsFlagged = true;
    				inputData.LCHDocumentSyntaxErrorMessage = e.message;
    			} // Object.assign(inputData, {
    			// 	LCHDocumentSyntaxErrorMessage: e.message,

    			// });
    			// if (inputData === mod._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()) {
    			// 	// causes reload of codemirror
    			// 	// inputData.LCHDocumentIsFlagged = inputData.LCHDocumentIsFlagged;
    			// };
    			if (inputData === mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()) {
    				mod$1._OLSKCatalog.modPublic.OLSKCatalogSelect(mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()); // #purge-svelte-force-update
    			}

    			return inputData;
    		},
    		async ControlDocumentCreate(inputData) {
    			if (mod$1._ValueDocumentRemainder < 1 && !mod$1.DataIsEligible()) {
    				return mod$1.OLSKFundDocumentGate();
    			}

    			mod$1.ControlDocumentActivate(mod$1._OLSKCatalog.modPublic.OLSKCatalogInsert(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentCreate(inputData || mod$1.DataDocumentObjectTemplate())));
    		},
    		ControlDocumentActivate(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogSelect(inputData);
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogFocusDetail();
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogActivateDetail();
    		},
    		async ControlDocumentClone(inputData) {
    			const item = Object.assign({}, inputData);
    			delete item.LCHDocumentID;
    			mod$1.ControlDocumentCreate(item);
    		},
    		ControlDocumentDiscard(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogRemove(inputData);
    			mod$1._ValueZDRWrap.App.LCHDocument.ZDRModelDeleteObject(inputData);
    		},
    		ControlRun() {
    			setTimeout(new Function(mod$1._JavascriptComposition));

    			setTimeout(function () {
    				document.querySelector(".LCHLauncher").parentElement.classList.add("LCHComposeLauncher");
    			});
    		},
    		ControlPipeModeEnabledPersist(inputData) {
    			mod$1.ReactDocuments(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll());

    			mod$1._ValueZDRWrap.App.LCHSetting.ZDRModelWriteObject({
    				LCHSettingKey: "kLCHComposePreferenceModePipeEnabled",
    				LCHSettingValue: inputData.toString()
    			});
    		},
    		ControlPageRecipesEnabledPersist(inputData) {
    			mod$1.ReactDocuments(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll());

    			mod$1._ValueZDRWrap.App.LCHSetting.ZDRModelWriteObject({
    				LCHSettingKey: "kLCHComposePreferenceIncludePageRecipes",
    				LCHSettingValue: inputData.toString()
    			});
    		},
    		ControlPublicKeyValidate(inputData) {
    			if (!mod$4.LCHComposePublicKeyIsValid(inputData)) {
    				return window.alert(main_1("LCHComposePublicKeyNotValidAlertText"));
    			}

    			mod$1.ControlPublicKeyUpdate(inputData);
    		},
    		ControlPublicKeyUpdate(inputData) {
    			window.localStorage.setItem("kLCHComposePreferencePublicKey", inputData);
    			mod$1.ValuePublicKeySet(JSON.parse(inputData || "null"));

    			if (!inputData) {
    				return;
    			}

    			mod$1.ControlPairPayloadSend();
    		},
    		async ControlPairPayloadSend() {
    			const item = {
    				LBXPayloadPackageScript: mod$1.DataPackageScript(),
    				LBXPayloadPackageStyle: mod$1.DataPackageStyle(),
    				LBXPayloadPackageOptions: mod$1.DataPackageOptions(),
    				LBXPayloadRecipes: mod$1._ValueRecipesArrayString,
    				LBXPayloadConfirmation: Math.random().toString()
    			};

    			mod$1._ControlPairPayloadPost(main_1$1()
    			? "LBX_TESTING_REQUEST_DATA"
    			: await mod$1._ControlPairPayloadEncrypt(JSON.stringify(item), mod$1._ValuePublicKey));

    			$$invalidate(0, mod$1._ValuePairPayloadHash = item.LBXPayloadConfirmation, mod$1);
    		},
    		async _ControlPairPayloadEncrypt(param1, param2) {
    			if (mod$1._LCH_DISABLE_ENCRYPTION()) {
    				return Promise.resolve(param1);
    			}

    			

    			return new Promise(function (resolve, reject) {
    					

    					return simpleCrypto.asym.importEncryptPublicKey(param2, reject, function (inputData) {
    						return simpleCrypto.asym.encrypt(inputData, new TextEncoder().encode(param1), reject, function (inputData) {
    							return resolve((function SerializeCipher(inputData) {
    								// javascript - Converting array buffer to string - Maximum call stack size exceeded - Stack Overflow https://stackoverflow.com/a/20604561
    								function ab2str(buffer) {
    									var bufView = new Uint16Array(buffer);
    									var length = bufView.length;
    									var result = "";
    									var addition = Math.pow(2, 16) - 1;

    									for (var i = 0; i < length; i += addition) {
    										if (i + addition > length) {
    											addition = length - i;
    										}

    										result += String.fromCharCode.apply(null, bufView.subarray(i, i + addition));
    									}

    									return result;
    								}

    								

    								return JSON.stringify(Object.keys(inputData).reduce(
    									function (coll, item) {
    										coll[item] = ab2str(inputData[item]);
    										return coll;
    									},
    									{}
    								));
    							})(inputData));
    						});
    					});
    				});
    		},
    		_ControlPairPayloadPost(inputData) {
    			window.postMessage(
    				{
    					LBXRequestName: "DispatchRequestStorePayload",
    					LBXRequestEncryptedData: inputData
    				},
    				window.location.href
    			);
    		},
    		ControlPairResponseReceive(inputData) {
    			if (!mod$4.LBXResponseIsValid(inputData)) {
    				return;
    			}

    			$$invalidate(
    				0,
    				mod$1._ValuePairStatus = inputData.LBXResponseHash === (main_1$1()
    				? "LBX_TESTING_RESPONSE_HASH"
    				: mod$1._ValuePairPayloadHash)
    				? "kStatusSuccess"
    				: "kStatusFailed",
    				mod$1
    			);

    			if (mod$1._ValuePairStatus === "kStatusFailed") {
    				$$invalidate(0, mod$1._ValueToolsPairStatusFailedError = inputData.LBXResponseError, mod$1);
    			}
    		},
    		async ControlDemo() {
    			$$invalidate(0, mod$1._IsRunningDemo = true, mod$1);
    			window.OLSK_DEMO = true;

    			await Promise.all([
    				"Open tweet in Thread Reader",
    				"Toggle mobile app capable",
    				"Go to parent directory",
    				"Clear service workers",
    				"Cite URL",
    				"BugMeNot",
    				"Wayback Machine",
    				"Domain on twitter",
    				"YouTube",
    				"GitHub",
    				"Pocket URL"
    			].reverse().map(function (e) {
    				return mod$1.ControlDocumentCreate(mod$1.DataDocumentObjectTemplate(e));
    			}));

    			await mod$1.LCHComposeDetailDispatchBack();

    			return main$a.OLSKChainGather(Object.assign(
    				{
    					Wait: main$b.OLSKBeaconWait,
    					Point(inputData) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconPointFunction(".OLSKPointer", inputData));
    					},
    					Click(inputData) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconClickFunction(inputData, ".OLSKPointer", "OLSKPointerActive"));
    					},
    					Defer(inputData) {
    						return main$b.OLSKBeaconDeferFunction(inputData);
    					},
    					Focus(inputData) {
    						return new Promise(function (resolve) {
    								resolve(document.querySelector(inputData).focus());
    							});
    					},
    					Fill(param1, param2, param3) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconFillFunction(param1, param2), param3);
    					},
    					FillCode(param1, param2, param3) {
    						return main$b._OLSKBeaconAnimate(
    							function (pct) {
    								window.OLSKDemoEditor.setValue(param2.slice(0, param2.length * pct));
    							},
    							param3
    						);
    					},
    					Set(param1, param2) {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconSetFunction(param1, param2));
    					},
    					Nudge() {
    						return main$b._OLSKBeaconAnimate(main$b.OLSKBeaconNudgeFunction(".OLSKPointer", ...arguments));
    					}
    				},
    				mod$1
    			)).Point(".LCHComposeCreateButton").Nudge(0, 50).Wait().Point(".LCHComposeCreateButton").Click(".LCHComposeCreateButton").Point(".LCHComposeDetailFormNameField").Focus(".LCHComposeDetailFormNameField").Fill(".LCHComposeDetailFormNameField", "Say Hello").Point(".LCHComposeDetailFormCallbackBody .CodeMirror").Focus(".LCHComposeDetailFormCallbackBody .CodeMirror").FillCode(".LCHComposeDetailFormCallbackBody .CodeMirror", `alert('Hello')`).Point(".LCHComposeBuildRunLink").Click(".LCHComposeBuildRunLink").Point(".LCHLauncherFilterInput").// .Click('.LCHLauncherFilterInput')
    			Wait(2200).// .Wait()
    			// .Fill('.LCHLauncherFilterInput', 'sh')
    			Wait(2000).Point(".LCHLauncherPipeItem").Wait().Click(".LCHLauncherPipeItem").Wait().Nudge(0, -200).OLSKChainExecute();
    		},
    		// MESSAGE
    		OLSKCollectionItemAccessibilitySummaryFunction(inputData) {
    			return mod$4.LCHComposeAccessibilitySummary(inputData, main_1);
    		},
    		_OLSKCatalogDispatchKey(inputData) {
    			return inputData.LCHDocumentID;
    		},
    		OLSKCollectionDispatchClick(inputData) {
    			mod$1.ControlDocumentActivate(inputData);
    		},
    		OLSKCollectionDispatchArrow(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogSelect(inputData);
    		},
    		OLSKCatalogDispatchDetailActivate() {
    			document.querySelector(".LCHComposeDetailFormNameField").focus();
    		},
    		OLSKCatalogDispatchMasterShouldActivate() {
    			return document.activeElement === document.querySelector(".LCHComposeDetailFormNameField");
    		},
    		OLSKCatalogDispatchQuantity(inputData) {
    			mod$1.OLSKFundDocumentRemainder && mod$1.OLSKFundDocumentRemainder(inputData);
    		},
    		LCHComposeBuildDispatchRun() {
    			mod$1.ControlRun();
    		},
    		LCHComposeBuildDispatchPipeModeEnabled(inputData) {
    			mod$1.ControlPipeModeEnabledPersist($$invalidate(0, mod$1._ValuePipeModeEnabled = inputData, mod$1)); // #purge-svelte-update
    		},
    		LCHComposeBuildDispatchPageRecipesEnabled(inputData) {
    			mod$1.ControlPageRecipesEnabledPersist($$invalidate(0, mod$1._ValuePageRecipesEnabled = inputData, mod$1)); // #purge-svelte-update
    		},
    		LCHComposePairDispatchSubmit(inputData) {
    			mod$1.ControlPublicKeyValidate(inputData);
    		},
    		LCHComposePairDispatchClear() {
    			mod$1.ControlPublicKeyUpdate("");
    		},
    		async OLSKTransportDispatchImportJSON(inputData) {
    			await mod$1._ValueZDRWrap.App.LCHTransport.LCHTransportImport(main$2.OLSKRemoteStoragePostJSONParse(inputData));
    			await mod$1.SetupSettingsAll();
    			await mod$1.SetupCatalog();
    		},
    		async OLSKTransportDispatchExportInput() {
    			return mod$1._ValueZDRWrap.App.LCHTransport.LCHTransportExport({
    				LCHDocument: mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll(),
    				LCHSetting: await mod$1._ValueZDRWrap.App.LCHSetting.LCHSettingList()
    			});
    		},
    		async OLSKCloudFormDispatchSubmit(inputData) {
    			const protocol = main$d.ZDRPreferenceProtocolConnect(inputData);

    			(main$d.ZDRPreferenceProtocolMigrate()
    			? await mod$1.DataStorageClient(protocol)
    			: mod$1._ValueZDRWrap).ZDRCloudConnect(inputData);
    		},
    		OLSKCloudDispatchRenew() {
    			mod$1._ValueZDRWrap.ZDRCloudReconnect(mod$1._ValueCloudIdentity);
    		},
    		OLSKCloudStatusDispatchDisconnect() {
    			mod$1._ValueZDRWrap.ZDRCloudDisconnect();
    			$$invalidate(0, mod$1._ValueCloudIdentity = null, mod$1);
    			main$d.ZDRPreferenceProtocolClear();
    		},
    		ZDRParamDispatchError(error) {
    			$$invalidate(0, mod$1._ValueCloudErrorText = error.toString(), mod$1);
    		},
    		ZDRParamDispatchConnected(identity, token) {
    			$$invalidate(0, mod$1._ValueCloudIdentity = identity, mod$1);
    			$$invalidate(0, mod$1._ValueCloudToken = token, mod$1);
    		},
    		ZDRParamDispatchOnline() {
    			$$invalidate(0, mod$1._ValueCloudIsOffline = false, mod$1);
    		},
    		ZDRParamDispatchOffline() {
    			$$invalidate(0, mod$1._ValueCloudIsOffline = true, mod$1);
    		},
    		ZDRParamDispatchSyncDidStart() {
    			$$invalidate(0, mod$1._ValueIsSyncing = true, mod$1);
    		},
    		ZDRParamDispatchSyncDidStop() {
    			$$invalidate(0, mod$1._ValueIsSyncing = false, mod$1);
    		},
    		OLSKCloudStatusDispatchSyncStart() {
    			if (mod$1._ValueZDRWrap.ZDRStorageProtocol !== main$d.ZDRProtocolRemoteStorage()) {
    				return;
    			}

    			mod$1._ValueZDRWrap.ZDRStorageClient().startSync();
    			mod$1.ZDRParamDispatchSyncDidStart();
    		},
    		OLSKCloudStatusDispatchSyncStop() {
    			if (mod$1._ValueZDRWrap.ZDRStorageProtocol !== main$d.ZDRProtocolRemoteStorage()) {
    				return;
    			}

    			mod$1._ValueZDRWrap.ZDRStorageClient().stopSync();
    		},
    		OLSKAppToolbarDispatchApropos() {
    			mod$1._OLSKModalView.modPublic.OLSKModalViewShow();
    		},
    		OLSKAppToolbarDispatchTongue() {
    			if (window.Launchlet.LCHSingletonExists()) {
    				return window.Launchlet.LCHSingletonDestroy();
    			}

    			// #hotfix launchlet show all items
    			let selected;

    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: main$5.OLSKLanguageSwitcherRecipes({
    					ParamLanguageCodes: window.OLSKPublicConstants("OLSKSharedPageLanguagesAvailable"),
    					ParamCurrentLanguage: window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage"),
    					ParamSpecUI: main_1$1(),
    					ParamRouteConstant: window.OLSKPublicConstants("OLSKSharedActiveRouteConstant"),
    					OLSKCanonical: window.OLSKCanonical
    				}).map(function (e) {
    					const item = e.LCHRecipeCallback;

    					return Object.assign(e, {
    						LCHRecipeCallback() {
    							selected = item;
    						}
    					});
    				}),
    				LCHOptionCompletionHandler() {
    					selected && selected();
    				},
    				LCHOptionMode: Launchlet.LCHModePreview,
    				LCHOptionLanguage: window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")
    			});
    		},
    		OLSKAppToolbarDispatchCloud() {
    			$$invalidate(0, mod$1._ValueCloudToolbarHidden = !mod$1._ValueCloudToolbarHidden, mod$1);
    		},
    		OLSKAppToolbarDispatchLauncher() {
    			if (window.Launchlet.LCHSingletonExists()) {
    				return window.Launchlet.LCHSingletonDestroy();
    			}

    			window.Launchlet.LCHSingletonCreate({
    				LCHOptionRecipes: mod$1.DataComposeRecipes(),
    				LCHOptionLanguage: window.OLSKPublicConstants("OLSKSharedPageCurrentLanguage")
    			});
    		},
    		LCHComposeDetailDispatchBack() {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogFocusMaster();
    		},
    		LCHComposeDetailDispatchClone() {
    			mod$1.ControlDocumentClone(mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    		},
    		LCHComposeDetailDispatchDiscard() {
    			mod$1.ControlDocumentDiscard(mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected());
    		},
    		LCHComposeDetailDispatchUpdate() {
    			mod$1.ControlDocumentPersist(mod$1._OLSKCatalog.modPublic.OLSKCatalogUpdate(mod$1._OLSKCatalog.modPublic.OLSKCatalogDataItemSelected()));
    		},
    		MessageReceived(event) {
    			// We only accept messages from ourselves
    			if (event.source !== window && !main_1$1()) {
    				return;
    			}

    			if (event.data === "LCHPageRecipes") {
    				return;
    			}

    			// We only accept messages from ourselves
    			// if (not launchlet.dev) {
    			//   return;
    			// }
    			mod$1.ControlPairResponseReceive(event.data);
    		},
    		ZDRSchemaDispatchSyncCreateDocument(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogInsert(inputData);
    		},
    		ZDRSchemaDispatchSyncUpdateDocument(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogUpdate(inputData);
    		},
    		ZDRSchemaDispatchSyncDeleteDocument(inputData) {
    			mod$1._OLSKCatalog.modPublic.OLSKCatalogRemove(inputData);
    		},
    		ZDRSchemaDispatchSyncConflictDocument(event) {
    			setTimeout(
    				async function () {
    					return mod$1.ZDRSchemaDispatchSyncUpdateDocument(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentUpdate(main$2.OLSKRemoteStoragePostJSONParse(main$2.OLSKRemoteStorageChangeDelegateConflictSelectRecent(event))));
    				},
    				main_1$1() ? 0 : 500
    			);
    		},
    		OLSKFundSetupDispatchClue() {
    			return mod$1.DataSetting("LCHSettingFundClue") || null;
    		},
    		_OLSKFundSetupDispatchUpdate(inputData) {
    			$$invalidate(0, mod$1); // #purge-svelte-force-update
    		},
    		OLSKFundDispatchPersist(inputData) {
    			$$invalidate(0, mod$1._ValueFundClue = inputData, mod$1); // #hotfix-missing-persist

    			if (!inputData) {
    				return mod$1._ValueZDRWrap.App.LCHSetting.ZDRModelDeleteObject({ LCHSettingKey: "LCHSettingFundClue" });
    			}

    			return mod$1._ValueZDRWrap.App.LCHSetting.ZDRModelWriteObject({
    				LCHSettingKey: "LCHSettingFundClue",
    				LCHSettingValue: inputData
    			}).then(function () {
    				if (main_1$1()) {
    					return;
    				}

    				setTimeout(
    					function () {
    						window.location.reload();
    					},
    					mod$1._ValueZDRWrap.ZDRStorageProtocol === main$d.ZDRProtocolFission()
    					? 1000
    					: 0
    				); // #hotfix-fission-delay
    			});
    		},
    		// REACT
    		ReactIsLoading(inputData) {
    			if (inputData) {
    				return;
    			}

    			if (mod$1.DataIsMobile()) {
    				return;
    			}

    			setTimeout(function () {
    				document.querySelector(".OLSKNarrowFilterField").focus();
    			});
    		},
    		ReactDocuments(inputData) {
    			const _validDocuments = inputData.map(function (e) {
    				return Object.entries(mod$1._ControlDocumentFlag(e)).map(function (e) {
    					if (e[0] === "LCHDocumentCallbackBody" && !e[1]) {
    						// #purge
    						e[1] = "return";
    					}

    					
    					return e;
    				}).filter(function (e) {
    					if (typeof e[1] === "string" && !e[1]) {
    						return false;
    					}

    					return true;
    				}).reduce(
    					function (coll, item) {
    						coll[item[0]] = item[1];
    						return coll;
    					},
    					{}
    				);
    			}).filter(function (e) {
    				return !e.LCHDocumentIsFlagged;
    			});

    			$$invalidate(0, mod$1._ValueRecipesArrayString = mod$9.LCHBuildRecipeArrayString(_validDocuments), mod$1);

    			$$invalidate(
    				0,
    				mod$1._JavascriptComposition = OLSKString.OLSKStringReplaceTokens(mod$9.LCHBuildBoomarkletTemplate(), {
    					LCHBuildBoomarkletTemplate_Style: mod$1.DataPackageStyle(),
    					LCHBuildBoomarkletTemplate_Script: mod$1.DataPackageScript(),
    					LCHBuildBoomarkletTemplate_Options: JSON.stringify(mod$1.DataPackageOptions()),
    					LCHBuildBoomarkletTemplate_Recipes: mod$1._ValueRecipesArrayString
    				}),
    				mod$1
    			);

    			$$invalidate(0, mod$1._JavascriptCompositionBinary = mod$9.LCHBuildEscape(mod$1._JavascriptComposition), mod$1);

    			if (!mod$1._ValuePublicKey) {
    				return;
    			}

    			mod$1.ControlPairPayloadSend();
    		},
    		// SETUP
    		async SetupEverything() {
    			await mod$1.SetupStorageClient(); // mod.ControlDemo();
    			await mod$1.SetupSettingsAll();
    			mod$1.SetupValuePublicKey();
    			mod$1.SetupValueToolsPairIsVisible();
    			await mod$1.SetupCatalog();
    			mod$1.SetupPageRecipes();
    			mod$1.ReactDocuments(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll());
    			mod$1.SetupFund();
    			mod$1.ReactIsLoading($$invalidate(0, mod$1._ValueIsLoading = false, mod$1));
    		}, // mod.ControlDemo();
    		DataStorageClient(inputData) {
    			return main$d.ZDRWrap({
    				ZDRParamLibrary: (function () {
    					if (inputData === main$d.ZDRProtocolFission()) {
    						return webnative;
    					}

    					return RemoteStorage;
    				})(),
    				ZDRParamScopes: [
    					{
    						ZDRScopeKey: "App",
    						ZDRScopeDirectory: "launchlet",
    						ZDRScopeCreatorDirectory: "rCreativ",
    						ZDRScopeSchemas: [
    							Object.assign(LCHDocument, {
    								ZDRSchemaDispatchSyncCreate: mod$1.ZDRSchemaDispatchSyncCreateDocument,
    								ZDRSchemaDispatchSyncUpdate: mod$1.ZDRSchemaDispatchSyncUpdateDocument,
    								ZDRSchemaDispatchSyncDelete: mod$1.ZDRSchemaDispatchSyncDeleteDocument,
    								ZDRSchemaDispatchSyncConflict: mod$1.ZDRSchemaDispatchSyncConflictDocument
    							}),
    							LCHSetting,
    							LCHTransport
    						]
    					}
    				],
    				ZDRParamDispatchError: mod$1.ZDRParamDispatchError,
    				ZDRParamDispatchConnected: mod$1.ZDRParamDispatchConnected,
    				ZDRParamDispatchOnline: mod$1.ZDRParamDispatchOnline,
    				ZDRParamDispatchOffline: mod$1.ZDRParamDispatchOffline,
    				_ZDRParamDispatchJSONPreStringify: mod$3.OLSKObjectSafeCopy,
    				_ZDRParamDispatchJSONPostParse: main$2.OLSKRemoteStoragePostJSONParse
    			});
    		},
    		async SetupStorageClient() {
    			$$invalidate(0, mod$1._ValueZDRWrap = await mod$1.DataStorageClient(main$d.ZDRPreferenceProtocol(main$d.ZDRProtocolRemoteStorage())), mod$1);
    		},
    		DataSetting(inputData) {
    			return mod$1._ValueSettingsAll[inputData];
    		},
    		async DataSettingValue(inputData) {
    			return ((await mod$1._ValueZDRWrap.App.LCHSetting.LCHSettingList()).filter(function (e) {
    				return e.LCHSettingKey === inputData;
    			}).pop() || {}).LCHSettingValue;
    		},
    		async SetupSettingsAll() {
    			$$invalidate(
    				0,
    				mod$1._ValueSettingsAll = Object.fromEntries((await mod$1._ValueZDRWrap.App.LCHSetting.LCHSettingList()).map(function (e) {
    					return [e.LCHSettingKey, e.LCHSettingValue];
    				})),
    				mod$1
    			);

    			$$invalidate(0, mod$1._ValuePipeModeEnabled = await mod$1.DataSettingValue("kLCHComposePreferenceModePipeEnabled") === "true", mod$1);
    			$$invalidate(0, mod$1._ValuePageRecipesEnabled = await mod$1.DataSettingValue("kLCHComposePreferenceIncludePageRecipes") === "true", mod$1);
    		},
    		SetupValuePublicKey() {
    			mod$1.ValuePublicKeySet(JSON.parse(localStorage.getItem("kLCHComposePreferencePublicKey") || "null"));
    		},
    		SetupValueToolsPairIsVisible() {
    			if (main_1$1()) {
    				$$invalidate(0, mod$1._ValueToolsPairIsVisible = window.location.search.match("TestLCHComposeToolsPairIsVisible=true"), mod$1);
    			}
    		},
    		async SetupCatalog() {
    			if (main$d.ZDRPreferenceProtocolMigrate()) {
    				const client = await mod$1.DataStorageClient(main$d.ZDRPreferenceProtocolMigrate());

    				await Promise.all((await client.App.ZDRStoragePathsRecursive("/")).map(async function (e) {
    					await mod$1._ValueZDRWrap.App.ZDRStorageWriteObject(e, await client.App.ZDRStorageReadObject(e));
    					await client.App.ZDRStorageDeleteFile(e);
    				}));

    				main$d.ZDRPreferenceProtocolMigrateClear();
    				client.ZDRCloudDisconnect();
    			}

    			

    			if (!(await mod$1._ValueZDRWrap.App.LCHDocument.LCHDocumentList()).map(mod$1._OLSKCatalog.modPublic.OLSKCatalogInsert).length) {
    				mod$1.OLSKCatalogDispatchQuantity(0);
    			}
    		},
    		SetupPageRecipes() {
    			if (!main_1$1()) {
    				return;
    			}

    			window.LCHPageRecipes = [
    				{
    					LCHRecipeName: "LCH_TEST_PAGE_RECIPES",
    					LCHRecipeCallback() {
    						
    					}
    				}
    			];
    		},
    		async SetupFund() {
    			main$9.OLSKFundSetup({
    				ParamMod: mod$1,
    				OLSKLocalized: main_1,
    				ParamFormURL: "http://rocobook.local:3001/fund",
    				ParamProject: "RP_001",
    				ParamSpecUI: main_1$1(),
    				ParamDocumentLimit: parseInt("25")
    			});

    			mod$1.OLSKFundDocumentRemainder(mod$1._OLSKCatalog.modPublic._OLSKCatalogDataItemsAll().length);
    			await main$9.OLSKFundSetupPostPay(mod$1);

    			if (!mod$1._ValueCloudIdentity) {
    				return;
    			}

    			if (!mod$1._ValueFundClue) {
    				return;
    			}

    			if (mod$1._ValueZDRWrap.ZDRStorageProtocol !== main$d.ZDRProtocolRemoteStorage()) {
    				return;
    			}

    			const item = {
    				OLSK_CRYPTO_PAIR_RECEIVER_PRIVATE: `{"coeff":"b5d3b9eeb334da14576c28b904b085afb4331a0423aea5c1fcc576fd367fd93368bdfb6840146d7363cd74bea968c7266ce1065e1268962e78eee0ca068b87a7","d":"6921c6e468255a4b5cf6c21619b0b7af33bbec997916c95cb38855444a2ba109f62ad0c38100562e89cba5d80bbe5aacb9795247a9897e64798eba02afde79f52d9969892e01d1efa59bae9fdf6b7e61d116ab5ec8c019e529fde92a6f6e86b7bcd9e0756c987293f0bafd39a06195f20216101a042a60918338c9736422582b","dmp1":"966578949d193d7b0a60a04793a10f280e1e091612f28bdd762d3a637b6afb5cc6c0d398add8c6aa7826582df5f5cb27b8abb3476b9289bddea18664a68f69c7","dmq1":"774d3166fa8cb6fa141afd367cf52fe40bd8727fb1e4800e05da3cb0177f15f5676a46cf76b8a1f93a99147ca8ffb97f55e36a7f3a9fa3e6f77d61063713a66b","e":"3","n":"9db2aa569c3807710b72232126891386cd99e2e635a22e0b0d4c7fe66f41718ef140392541808145ceb178c4119d88031635fb6b7e4e3d96b656170407cdb6f158f21d47287ba9972622f22ce8029c24e093ba6ed462b8b8f908105d0384e40ee087784c59bec8d375379ed65f02a7e598f7c4d0ff8ad5518603894d62a81c8b","p":"e19834deeba5dc388f90f06b5d7196bc152d0da11c6bd1cc3143d7953920790b2a213d6504c529ffb4398444f0f0b0bb95018ceb215bce9ccdf24996f9d71eab","q":"b2f3ca1a77d312771e287bd1bb6fc7d611c4abbf8ad6c01508c75b08233ea0f01b1f6a373214f2f5d7e59ebafd7f963f00d51fbed7ef75da733c1189529d79a1"}${""}`, // #purge
    				OLSK_CRYPTO_PAIR_SENDER_PUBLIC: "35xc7GRsmMMQuLrXIH3qTTT1LfDIb692KkoBkxCwV6pdBlw9zVYcfycIhbs6cHdIRTwx507r4a0ZC87/3RFwLFYQzGDF5+/k1N/sjHrePGHbtWKxSzy/Yl3hPs/65cggAl/rQs+jiPyfkPBfXZDYZPzpHE6DfQfGVu7eDHv/OIs=",
    				OLSK_FUND_API_URL: "http://rocobook.local:3001/api/grant",
    				ParamBody: {
    					OLSKPactAuthType: mod$1._ValueZDRWrap.ZDRStorageProtocol === main$d.ZDRProtocolRemoteStorage()
    					? main$6.OLSKPactAuthTypeRemoteStorage()
    					: main$6.OLSKPactAuthTypeFission(),
    					OLSKPactAuthIdentity: mod$1._ValueCloudIdentity,
    					OLSKPactAuthProof: mod$1._ValueCloudToken,
    					OLSKPactAuthMetadata: {
    						OLSKPactAuthMetadataModuleName: "launchlet",
    						OLSKPactAuthMetadataFolderPath: LCHDocument.LCHDocumentDirectory() + "/"
    					},
    					OLSKPactPayIdentity: mod$1._ValueCloudIdentity,
    					OLSKPactPayClue: mod$1._ValueFundClue
    				},
    				OLSKLocalized: main_1,
    				OLSKFundDispatchProgress: mod$1.OLSKFundDispatchProgress,
    				OLSKFundDispatchFail: mod$1.OLSKFundDispatchFail,
    				OLSKFundDispatchGrant: mod$1.OLSKFundDispatchGrant
    			};

    			return main$9.OLSKFundSetupGrant(item);
    		},
    		// LIFECYCLE
    		LifecycleModuleWillMount() {
    			mod$1.SetupEverything();
    		}
    	};

    	onMount(mod$1.LifecycleModuleWillMount);
    	window.addEventListener("message", mod$1.MessageReceived, false);
    	const writable_props = [];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Main> was created with unknown prop '${key}'`);
    	});

    	function lchcomposedetail_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod$1._LCHComposeDetail = $$value;
    			$$invalidate(0, mod$1);
    		});
    	}

    	function olskcatalog_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod$1._OLSKCatalog = $$value;
    			$$invalidate(0, mod$1);
    		});
    	}

    	function olskwebview_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod$1._OLSKWebView = $$value;
    			$$invalidate(0, mod$1);
    		});
    	}

    	function olskmodalview_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			mod$1._OLSKModalView = $$value;
    			$$invalidate(0, mod$1);
    		});
    	}

    	$$self.$capture_state = () => ({
    		OLSKLocalized: main_1,
    		OLSKThrottle: main$1,
    		LCHDocument,
    		LCHSetting,
    		LCHTransport,
    		OLSK_SPEC_UI: main_1$1,
    		OLSKRemoteStorage: main$2,
    		OLSKObject: mod$3,
    		OLSKServiceWorker: main_1$2,
    		LCHComposeLogic: mod$4,
    		LCHFlagsLogic: mod$5,
    		LCHFormula: mod,
    		LCHLauncherLogic: mod$8,
    		LCHBuild: mod$9,
    		OLSKString,
    		RemoteStorage,
    		OLSKLanguageSwitcher: main$5,
    		OLSKFund: main$9,
    		OLSKPact: main$6,
    		OLSKChain: main$a,
    		OLSKBeacon: main$b,
    		OLSKTransport: main$c,
    		zerodatawrap: main$d,
    		mod: mod$1,
    		onMount,
    		OLSKCatalog: Main$4,
    		LCHComposeListItem: Main$5,
    		LCHComposeDetail: Main$7,
    		LCHComposeBuild: Main$8,
    		LCHComposePair: Main$9,
    		OLSKAppToolbar: Main$b,
    		OLSKServiceWorkerView: Main$c,
    		OLSKCloud: Main$f,
    		OLSKPointer: Main$g,
    		OLSKWebView: Main$j,
    		OLSKModalView: Main$i,
    		OLSKApropos: Main$k,
    		OLSKUIAssets
    	});

    	return [
    		mod$1,
    		lchcomposedetail_binding,
    		olskcatalog_binding,
    		olskwebview_binding,
    		olskmodalview_binding
    	];
    }

    class Main$l extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Main",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    const LCHCompose = new Main$l({
    	target: document.body,
    });

    return LCHCompose;

}());
//# sourceMappingURL=ui-behaviour.js.map
